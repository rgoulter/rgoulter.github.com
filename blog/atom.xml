<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//blog/atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//blog/atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        
        <email>richard.goulter+blog@gmail.com</email>
        
    </author>
    <updated>2024-07-06T00:00:00Z</updated>
    <entry>
    <title>Debugging Kirei with UART</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/programming/2024-07-06-debugging-kirei-with-uart.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/programming/2024-07-06-debugging-kirei-with-uart.html</id>
    <published>2024-07-06T00:00:00Z</published>
    <updated>2024-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/semickolon/kirei">Kirei</a> is nascent keyboard firmware, which
at the time of writing supports CH58x and RP2040 microcontrollers.<br />
It uses the same declarative approach to keyboards/keymaps that
<a href="https://github.com/semickolon/fak">fak</a> uses; albeit, Kirei‚Äôs one step further
around the <a href="https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html">configuration complexity
clock</a>
as it embeds a DSL into <a href="https://nickel-lang.org/">Nickel</a>.</p>
<p>CH58x (and CH592) are MCUs which are both cheap and provide BLE (Bluetooth)
functionality. For keyboard enthusiasts, they‚Äôre notable because <a href="https://github.com/WeActStudio/WeActStudio.WCH-BLE-Core">WeAct Studio
has a core board for these
MCUs</a> (for the
<a href="https://aliexpress.com/item/1005004784988010.html">CH582F</a> and
<a href="https://vi.aliexpress.com/item/1005006117859297.html">CH592F</a>).</p>
<p>(There aren‚Äôt many keyboards using these core boards; <a href="https://www.youtube.com/watch?v=mc6wTqoDZe8">but I recently recorded a demonstration of a prototype I‚Äôve been working on</a>; <a href="https://youtu.be/5eCvUGTr0aU">including tap-hold &amp; layers functionality</a>).</p>
<p>For Kirei‚Äôs CH58x platform, <a href="https://github.com/semickolon/kirei/blob/27df23f37165d8a2b597134b32948745b8b1bee5/src/platforms/ch58x/debug.zig">it supports logging output to UART</a>.</p>
<p>Here are some notes on viewing that output on a computer:</p>
<h2 id="uart">UART</h2>
<p>I see the terms ‚ÄúTTL‚Äù and ‚ÄúRS232‚Äù mentioned alongside ‚ÄúUART‚Äù.</p>
<p>These StackExchange questions are relevant:</p>
<ul>
<li><a href="https://electronics.stackexchange.com/questions/274287/what-is-the-difference-between-rs-232-and-ttl-uart" class="uri">https://electronics.stackexchange.com/questions/274287/what-is-the-difference-between-rs-232-and-ttl-uart</a></li>
<li><a href="https://electronics.stackexchange.com/questions/37814/usart-uart-rs232-usb-spi-i2c-ttl-etc-what-are-all-of-these-and-how-do-th" class="uri">https://electronics.stackexchange.com/questions/37814/usart-uart-rs232-usb-spi-i2c-ttl-etc-what-are-all-of-these-and-how-do-th</a></li>
</ul>
<h2 id="connecting-to-serial-consoles">Connecting to Serial Consoles</h2>
<p>Some articles discussing how to connect to a serial console:</p>
<ul>
<li><p><a href="https://wiki.archlinux.org/title/Working_with_the_serial_console#Making_Connections">from Arch Wiki ‚ÄúWorking with the serial console‚Äù</a></p>
<ul>
<li>I use <code>screen</code> or <code>tio</code>.</li>
</ul></li>
<li><p><a href="https://learn.adafruit.com/welcome-to-circuitpython/kattni-connecting-to-the-serial-console">from AdaFruid‚Äôs ‚ÄúWelcome to CircuitPython‚Äù</a></p></li>
</ul>
<h3 id="tio">TIO</h3>
<p>The Arch Wiki article mentions that <code>tio</code> is intended to replace <code>screen</code> for
this use case, for <code>tmux</code> users.</p>
<p>With <a href="https://nixos.org/">the Nix package manager</a>, getting <code>tio</code> is as simple
as <code>nix shell nixpkgs#tio</code>.</p>
<p>To connect to the serial console, the command would be something like:</p>
<pre><code>tio /dev/ttyUSB0 --baudrate 115200</code></pre>
<p>(115200 is used as a baudrate, since that‚Äôs what the <code>debug.zig</code> sets).</p>
<p>Helpfully, <code>tio</code> output includes the key sequence to quit:</p>
<pre><code>[09:22:12.178] tio v2.8
[09:22:12.178] Press ctrl-t q to quit
[09:22:12.179] Connected</code></pre>
<h3 id="screen">Screen</h3>
<p>With <a href="https://nixos.org/">the Nix package manager</a>, getting <code>screen</code> is as
simple as <code>nix shell nixpkgs#screen</code>; although I‚Äôd recommend opening a new
terminal emulator window, and not running it within tmux or
<a href="https://github.com/zellij-org/zellij/">zellij</a>.</p>
<p>To connect to the serial console, the command would be something like:</p>
<pre><code>screen /dev/ttyUSB0 115200</code></pre>
<p>(115200 is used as a baudrate, since that‚Äôs what the <code>debug.zig</code> sets).</p>
<p>Killing the session uses the sequence: <code>Ctrl-a k</code></p>
<h2 id="connecting-to-ch58xs-uart">Connecting to CH58x‚Äôs UART</h2>
<p>As the <code>debug.zig</code> code suggests, it‚Äôs using <code>A9</code> to transmit data.</p>
<h3 id="connecting-using-ftdi-ft232rl-usb-adapter">Connecting using FTDI FT232RL USB Adapter</h3>
<p>I happen to have an <a href="https://aliexpress.com/item/1005005857014294.html">FTDI FT232RL USB adapter</a>.</p>
<p>This can be used to connect a serial console to the UART output.</p>
<p>The jumper on the FTDI board should be changed to 3V3.</p>
<p>Connect a cable from the TX of the CH58x TX (A9) to the RX on the FTDI board.</p>
<p><img src="/blog/images/embedded/serial_uart_ftdi_weact_ch592.jpg" /></p>
<p>Then, with the FTDI board connected to the computer, and the CH58x board
powered, connecting to the serial console (<code>/dev/ttyUSB0</code> with baudrate 115200)
should display output from Kirei:</p>
<pre><code>$ tio /dev/ttyUSB0 --baudrate 115200
[I] Kirei üå∏
...</code></pre>
<h3 id="connecting-using-circuitpython">Connecting using CircuitPython</h3>
<p>Another way of connecting to the CH58x UART is with an Arduino board or a
CircuitPython board.</p>
<p>CircuitPython is much easier to use than Arduino.</p>
<p>I have a <a href="https://github.com/WeActStudio/WeActStudio.RP2040CoreBoard">WeAct RP2040 core board</a>
(which is similar to but not exactly a Raspberry Pi Pico).</p>
<p>CircuitPython firmware can be <a href="https://circuitpython.org/downloads">downloaded from the CircuitPython
website</a>. With the RP2040, flashing the uf2
firmware onto the board is very easy. (Connect the device with the boot switch
held, then copy the uf2 to the mass storage device).</p>
<p><a href="https://learn.adafruit.com/circuitpython-essentials/circuitpython-uart-serial">AdaFruit‚Äôs ‚ÄúCircuitPython Essentials‚Äù page</a>
has some code that‚Äôs close to what we want.</p>
<p>Instead of using <code>print()</code>, we‚Äôll <a href="https://docs.circuitpython.org/en/latest/shared-bindings/usb_cdc/index.html#usb_cdc.console">write the bytes to the CDC console directly</a>.</p>
<p>Here‚Äôs the CircuitPython code for read the bytes from UART, and writing to the CDC console.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;Relay UART to CDC console.&quot;&quot;&quot;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> board</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> busio</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> usb_cdc</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>uart <span class="op">=</span> busio.UART(<span class="va">None</span>, board.GP1, baudrate<span class="op">=</span><span class="dv">115200</span>)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    data <span class="op">=</span> uart.read(<span class="dv">32</span>)</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> data <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        usb_cdc.console.write(data)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        usb_cdc.console.flush()</span></code></pre></div>
<p>Connect a cable from the TX of the CH58x TX (A9) to the RX on the RP2040 board (GP1).</p>
<p><img src="/blog/images/embedded/serial_uart_weact_rp2040_weact_ch592.jpg" /></p>
<p>Then, with the RP2040 board connected to the computer, and the CH58x board powered,
connecting to the serial console (<code>/dev/ttyACM0</code>) should display output from Kirei:</p>
<pre><code>$ tio /dev/ttyACM0
[09:41:43.156] tio v2.8
[09:41:43.156] Press ctrl-t q to quit
[09:41:43.157] Connected
[I] Kirei üå∏
...
üêçDone | 9.0.5
Code stopped by auto-reload. Reloading soon.
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:

...</code></pre>]]></summary>
</entry>
<entry>
    <title>Indicating Success on QMK Keyboards</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/programming/2024-06-23-indicating-success-on-qmk-keyboards.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/programming/2024-06-23-indicating-success-on-qmk-keyboards.html</id>
    <published>2024-06-23T00:00:00Z</published>
    <updated>2024-06-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In the previous post, I discussed ways of <a href="/blog/posts/programming/2024-06-16-using-the-qmk-leader-key-for-fancy-keyboard-functionality.html">using QMK leader key sequences in QMK keymaps</a>.</p>
<p>One of the downsides with this is that QMK leader key sequences are handled only
after a timeout (i.e.¬†enter the key sequence, then wait a moment).</p>
<p>One way of improving the UX of this is having the keyboard provide some feedback
when a leader sequence is activated.</p>
<p>The <a href="https://docs.qmk.fm/features/leader_key">QMK docs page for the Leader key
sequences</a> gives an example using the
<code>AUDIO</code> feature, with <code>PLAY_SONG</code>, and will play song indicating whether a
leader key sequences was activated successfully or not.</p>
<p>My keyboards don‚Äôt support the <code>AUDIO</code> feature.</p>
<p>But, I do have keyboards with per-key RGB or with haptic feedback.</p>
<p>The <code>leader_end_user</code> function (which handles leader key sequences after
timeout) can be updated with:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> leader_end_user<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> did_leader_succeed <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_Q<span class="op">,</span> KC_B<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: QMK Boot</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        reset_keyboard<span class="op">();</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span><span class="co">/* ... */</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* .... */</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        did_leader_succeed <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    leader_end_notify<span class="op">(</span>did_leader_succeed<span class="op">);</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>i.e.¬†call some <code>leader_end_notify</code> function, unless the leader key sequence
wasn‚Äôt recognised. (It‚Äôs conceptually neater to initialize <code>did_leader_succeed</code> with
<code>false</code>, and only set it to <code>true</code> when handling a key sequence.. but, that
would take more lines of code for the same effect).</p>
<p>The <code>leader_end_notify</code> can be written like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> leader_end_notify<span class="op">(</span><span class="dt">bool</span> succeeded<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#    ifdef HAPTIC_ENABLE</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>succeeded <span class="op">&amp;&amp;</span> haptic_get_enable<span class="op">())</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        haptic_play<span class="op">();</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#    endif</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#    ifdef RGB_MATRIX_ENABLE</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    rgb_matrix_blink_start<span class="op">(</span>succeeded<span class="op">);</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#    endif</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The <code>rgb_matrix_blink_start</code> is a function can is a bit trickier.</p>
<p>On a split keyboard, it‚Äôs a bit difficult to communicate state between the
master half and the slave half. ‚Äì My first attempt, I tried using the
<code>rgb_matrix_set_color_all</code> function; but, this didn‚Äôt update the RGB LEDs
on the slave half.</p>
<p>I work with this limitation by using the RGB matrix effects. The QMK framework‚Äôs
split keyboard transport protocol already handles syncing state for RGB effects.</p>
<p>So, we ‚Äúblink‚Äù the keyboard by:</p>
<ul>
<li>setting the effect to ‚Äúsolid color‚Äù (white).</li>
<li>waiting a bit.</li>
<li>restoring the effect/color to what it was before.</li>
</ul>
<p>Hence, the implmentation, we have some extra state to store:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef RGB_MATRIX_ENABLE</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">uint8_t</span>  old_mode               <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>HSV      old_hsv                <span class="op">=</span> <span class="op">{</span>HSV_OFF<span class="op">};</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">uint32_t</span> rgb_matrix_blink_timer <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span>     blinking_active        <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>
<p>In <code>rgb_matrix_blink_start</code>, we store the current RGB effect and colour, and keep track of the time:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> rgb_matrix_blink_start<span class="op">(</span><span class="dt">bool</span> succeeded<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* impl. note: in order to get the &#39;blink&#39; to work across split keyboard,</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">     *  save the old mode &amp; hsv, then set to solid white.</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co">     * The old mode &amp; hsv are then restored after some time,</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">     *  in the rgb_matrix_indicators_user callback.</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">     */</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    old_mode <span class="op">=</span> rgb_matrix_get_mode<span class="op">();</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    old_hsv  <span class="op">=</span> rgb_matrix_get_hsv<span class="op">();</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    rgb_matrix_mode_noeeprom<span class="op">(</span>RGB_MATRIX_SOLID_COLOR<span class="op">);</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>succeeded<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        rgb_matrix_sethsv_noeeprom<span class="op">(</span>HSV_WHITE<span class="op">);</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        rgb_matrix_sethsv_noeeprom<span class="op">(</span>HSV_RED<span class="op">);</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    rgb_matrix_blink_timer <span class="op">=</span> timer_read32<span class="op">();</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    blinking_active        <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> rgb_matrix_blink_end<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    rgb_matrix_mode_noeeprom<span class="op">(</span>old_mode<span class="op">);</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    rgb_matrix_sethsv_noeeprom<span class="op">(</span>old_hsv<span class="op">.</span>h<span class="op">,</span> old_hsv<span class="op">.</span>s<span class="op">,</span> old_hsv<span class="op">.</span>v<span class="op">);</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    blinking_active <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>and in <code>rgb_matrix_blink_end</code>, we restore the RGB effect and colour.</p>
<p>This <code>rgb_matrix_blink_end</code> is called by a ‚Äúhousekeeping task‚Äù, which is called by QMK at the end of each scan loop.
It simply checks the blink timer, and calls the blink end function if enough time has passed.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> housekeeping_task_user<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>blinking_active <span class="op">&amp;&amp;</span> timer_elapsed32<span class="op">(</span>rgb_matrix_blink_timer<span class="op">)</span> <span class="op">&gt;=</span> RGB_MATRIX_BLINK_INTERVAL<span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        rgb_matrix_blink_end<span class="op">();</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>With this, I can now confidently be notified that a leader sequence succeeded,
using either haptic feedback, or RGB matrix functionality.</p>
<p>I expect that code for the <code>RGBLIGHT</code> QMK feature would be similar to the RGB matrix implementation above.</p>
<p>So, e.g., if I use a leader key sequence to enable caps word, I can be confident
caps word has activated. Or if I invoke a sequence and don‚Äôt see the keyboard
‚Äòblink‚Äô (or don‚Äôt receive haptic feedback), then I can understand that I failed
to enter a leader key sequence.</p>]]></summary>
</entry>
<entry>
    <title>Using the QMK Leader Key for Fancy Keyboard Functionality</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/programming/2024-06-16-using-the-qmk-leader-key-for-fancy-keyboard-functionality.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/programming/2024-06-16-using-the-qmk-leader-key-for-fancy-keyboard-functionality.html</id>
    <published>2024-06-16T00:00:00Z</published>
    <updated>2024-06-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://qmk.fm/">QMK</a> keyboards are keyboards where the functionality can be
customized.</p>
<p>Customising keyboard functionality goes hand in hand with non-traditional
keyboards, like ortholinear or split keyboards, which seek to improve upon the
traditional keyboard‚Äôs pretty awful design. (<a href="https://github.com/rgoulter/keyboard-labs">I‚Äôve designed a few such
keyboards</a>).</p>
<p>There are some QMK features where it‚Äôs fairly clear how to make effective use of
the feature, such as <a href="https://docs.qmk.fm/feature_layers">layers</a>, <a href="https://docs.qmk.fm/tap_hold">tap
hold</a> or <a href="https://docs.qmk.fm/features/caps_word">caps
word</a>.</p>
<p>One feature that I had not found an effective use for was the <a href="https://docs.qmk.fm/features/leader_key">‚Äúleader
key‚Äù</a> feature. This feature
is named after Vim‚Äôs <a href="https://vimhelp.org/map.txt.html#%3CLeader%3E">leader
key</a>.</p>
<h2 id="vim-and-key-sequences">Vim and Key Sequences</h2>
<p>In vim, the leader key is a placeholder, and can be used for the start of <a href="https://vimhelp.org/map.txt.html#key-mapping">a
sequences of keys which maps to some
command</a>.</p>
<p>Generally, sequences of keys are fundamental to vim‚Äôs keybindings, especially for its
<a href="http://www.robertames.com/blog.cgi/entries/physics-of-vim.html">verb-motion
idiom</a>.<br />
e.g.¬†the key sequence <code>d$</code> commands the editor to ‚Äúdelete until the end of
line‚Äù, or <code>yi"</code> commands the editor to yank (copy) the text inside the <code>"</code> marks
the cursor is inside of.</p>
<p>I first came across heavy use of the space-as-leader idiom in
<a href="https://www.spacemacs.org/">spacemacs</a>, which uses vim-keybindings, and space
as its leader key.</p>
<p>My main text editing environment is <a href="https://github.com/doomemacs/">Doom Emacs</a>,
which also uses space-as-leader for its command map.<br />
e.g.¬†<code>spc t b</code> to Toggles the font to a Big size. <code>spc f s</code> Saves the File.</p>
<p>VSCode, to a lesser extent, also uses sequences in its keyboard shortcuts.<br />
e.g.¬†Ctrl+K Ctrl+C adds a line comment.</p>
<p>In QMK, the leader key is used to start listening for a sequence of keypresses,
which can then be handled by custom functionality.</p>
<h2 id="typical-uses-of-the-qmk-leader-key">Typical Uses of the QMK Leader Key</h2>
<p>What to use QMK‚Äôs leader key for?</p>
<p>QMK‚Äôs <a href="https://docs.qmk.fm/features/leader_key">documentation for the leader
key</a> gives examples of sequences which
map to <code>SEND_STRING</code>. i.e.¬†using it as a way to trigger macros.</p>
<p>I had previously tried that, but didn‚Äôt end up making much use of it.<br />
I reckon the effort to recognise I could use the leader sequence (&amp; recall how
to invoke it) was higher than just typing out my email or username or hostname
or whatever.</p>
<p>But also, I think there are other ways to avoid having to type the same thing
out frequently:<br />
On the command line, using fzf with shell history is a great way to find
previously typed commands, which is close enough to ‚Äúsave typing the same thing
out‚Äù for me; <a href="https://fishshell.com/docs/current/cmds/abbr.html">fish shell‚Äôs
abbr</a> seems a useful way of
‚Äúsave typing the same thing out‚Äù. This is similar to typical shell aliases,
except it expands the abbreviation before executing it.</p>
<h2 id="another-idea-for-qmk-leader-key-sequences">Another Idea for QMK Leader Key Sequences</h2>
<p>Putting 2 and 2 together, I had another idea of what to use the QMK leader functionality for:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> leader_end_user<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_Q<span class="op">,</span> KC_B<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: QMK Boot</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        reset_keyboard<span class="op">();</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_C<span class="op">,</span> KC_C<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Caps DWIM (capslock)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        tap_code<span class="op">(</span>KC_CAPS<span class="op">);</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef CAPS_WORD_ENABLE</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_C<span class="op">,</span> KC_W<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Caps capsWord</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        caps_word_on<span class="op">();</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef HAPTIC_ENABLE</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_H<span class="op">,</span> KC_H<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Haptic DWIM (toggle)</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      haptic_toggle<span class="op">();</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_H<span class="op">,</span> KC_E<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Haptic Enable</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      haptic_enable<span class="op">();</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_H<span class="op">,</span> KC_D<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Haptic Disable</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>      haptic_disable<span class="op">();</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_K<span class="op">,</span> KC_K<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Keymap DWIM (set to default)</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        default_layer_set_dvorak_keymap<span class="op">();</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_K<span class="op">,</span> KC_D<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Keymap Dvorak</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>        default_layer_set_dvorak_keymap<span class="op">();</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_K<span class="op">,</span> KC_Q<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Keymap Qwerty</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        default_layer_set_qwerty_keymap<span class="op">();</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_K<span class="op">,</span> KC_G<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Keymap Gaming</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        default_layer_set_gaming_keymap<span class="op">();</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_K<span class="op">,</span> KC_H<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: Keymap Gaming (alt)</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        default_layer_set_gaming_alt_keymap<span class="op">();</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_O<span class="op">,</span> KC_W<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: OS Windows</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        current_os <span class="op">=</span> _OS_WIN<span class="op">;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_O<span class="op">,</span> KC_L<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: OS Linux</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        current_os <span class="op">=</span> _OS_LINUX<span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_O<span class="op">,</span> KC_M<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: OS MacOS</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>        current_os <span class="op">=</span> _OS_MACOS<span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef RGB_MATRIX_ENABLE</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_R<span class="op">,</span> KC_R<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: RGB DWIM (next effect)</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        rgb_matrix_step_noeeprom<span class="op">();</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_R<span class="op">,</span> KC_J<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: RGB Jellybean</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        rgb_matrix_mode_noeeprom<span class="op">(</span>RGB_MATRIX_JELLYBEAN_RAINDROPS<span class="op">);</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_two_keys<span class="op">(</span>KC_R<span class="op">,</span> KC_T<span class="op">))</span> <span class="op">{</span> <span class="co">// mnemonic: RGB Toggle</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        rgb_matrix_toggle_noeeprom<span class="op">();</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>leader_sequence_one_key<span class="op">(</span>KC_L<span class="op">))</span> <span class="op">{</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>current_os<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>            <span class="cf">case</span> _OS_LINUX<span class="op">:</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>                tap_code16<span class="op">(</span>CODE16_LINUX_DESKTOP_LOCK<span class="op">);</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>            <span class="cf">case</span> _OS_MACOS<span class="op">:</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>                tap_code16<span class="op">(</span>CODE16_MACOS_DESKTOP_LOCK<span class="op">);</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>            <span class="cf">case</span> _OS_WIN<span class="op">:</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>                tap_code16<span class="op">(</span>CODE16_WIN_DESKTOP_LOCK<span class="op">);</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span><span class="op">;</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>    leader_end_keymap<span class="op">();</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This code implements the <code>leader_end_user</code> callback, which handles how QMK
leader key sequences behave for a keymap.</p>
<p>Example sequences:</p>
<ul>
<li><p><code>LEAD q b</code> enters the bootloader, which I hope to recall with ‚ÄúQMK -&gt; Bootloader‚Äù.</p></li>
<li><p><code>LEAD r t</code> toggles whether RGB lighting is on/off, which I hope to recall with
‚ÄúRGB -&gt; Toggle‚Äù.</p></li>
</ul>
<p>‚ÄúDWIM‚Äù means ‚ÄúDo What I Mean‚Äù.<br />
In this case, I mean ‚Äúwhat‚Äôs the most common functionality to expect (from
tapping the same key twice)‚Äù.</p>
<p>More concretely, the idea is that QMK leader key sequences seem like a natural
interface for dynamic customisation of keyboard functionality.</p>
<p>I like the idea of allowing both the standard CapsLock and the fancier caps word
within the same keymap, but without needing to take the effort to remember which
key I put where.</p>
<p>I put my <code>leader_end_user</code> implementation in <a href="https://github.com/rgoulter/qmk_userspace">my
userspace</a>.</p>
<h2 id="downside-discoverability">Downside: Discoverability</h2>
<p>One obvious downside to this approach is that a keyboard‚Äôs firmware is not easily discoverable.</p>
<p>There‚Äôd be no easy way to discover what leader key sequences are implemented in a keymap.</p>
<p>Whereas, say, in VSCode, the keyboard shortcuts are shown as part of the command
palette.<br />
Or in Emacs, <a href="https://github.com/justbur/emacs-which-key">which-key</a> will
automatically show a map of keybindings (and the commands they‚Äôre bound to)
after pressing some key.<br />
e.g.¬†pressing <code>spc f</code> presents a map of keybindings for next keys to press (such
as <code>s</code> to save file, <code>C</code> to copy the file, <code>D</code> to delete the file).</p>
<h2 id="similar-functionality-qmks-command">Similar Functionality: QMK‚Äôs Command</h2>
<p>The idea of using the keyboard to dynamically configure the keyboard
configuration is similar to what the <a href="https://docs.qmk.fm/features/command">Command
feature</a> does. ‚Äì Except these commands
are invoked by holding down modifier keys, rather than by hitting a sequence of
keys.</p>
<p>The idea of using leader-key sequences for dynamically customising various
features is more general (&amp; implemented by the keymap, rather than as part of
QMK‚Äôs framework).</p>
<p>Incidentally, this Command feature has a ‚Äúprint help to the console‚Äù keybinding,
which is one way of addressing lack of discoverability.</p>
<h2 id="recall-cost-for-custom-and-small-keyboard-keymaps">Recall Cost for Custom and Small Keyboard Keymaps</h2>
<p>Maybe the idea of using leader key sequences seems complex; but I think it‚Äôs
worth comparing the above idea to other techniques used in keymap
implementations for custom (and small) keyboards:</p>
<p>Custom keyboards tend to have more functionality than just what the legends on
the keycaps denote.<br />
This means you have to remember anything that‚Äôs not on the keycaps.</p>
<p>Anything that‚Äôs frequently used will be easy to recall.<br />
What requires more consideration is trying to make recall easier for stuff
that‚Äôs used infrequently.</p>
<p>Small keyboards (like the ortholinear 4x12 keyboards, or split 36-key
keyboards) have keymaps which bring the full functionality of a typical keyboard
to within easy reach of the hands on home row.<br />
In my experience, it‚Äôs fairly straightforward to recall the ‚Äústandard keyboard‚Äù
keys (letters, numbers, symbols), since it‚Äôs easy to position the keys in a way
that‚Äôs either familiar, or coherent.</p>
<p>e.g.¬†The popular <a href="https://github.com/manna-harbour/miryoku/tree/master/docs/reference">Miryoku
keymap</a>
demonstrates a few techniques for how this is commonly achieved:</p>
<p>As an example of good key placement, where the positions are easy to recall: The
Number/Symbol layers are different than a traditional keyboard, but it‚Äôs
(mostly) coherent: the numbers resemble a numpad, the <code>[</code> key pairs with <code>]</code>.
<code>_</code> is often used as a placeholder for ‚Äúspace‚Äù.<br />
(I personally prefer to amend it by having <code>/</code> complement <code>\</code>, and by moving <code>~</code>
to home row‚Äôs pinkie finger).</p>
<p>Examples of how functionality is brought to within reach of the hands:</p>
<ul>
<li><p>Modifier keys Shift/Ctrl/Gui/Alt can be used with tap-hold using the keys on
home row. (‚ÄúHome Row Mods‚Äù).</p></li>
<li><p>Miryoku puts the <code>CapsLock</code> key on a layer.</p></li>
<li><p>Miryoku has some ‚ÄúAdditional Features‚Äù, such as switching between a Base and
an Extra keymap. These keys are on a layer, with additional intention gated
by requiring these keys to be tapped twice. (QMK‚Äôs <a href="https://docs.qmk.fm/features/tap_dance">tap
dance</a> feature).</p></li>
</ul>
<p>Putting the key on a layer comes with positional cost. ‚Äì You have to be able to
recall <em>where</em> the key is. ‚Äì And you have to recall which modifier keys to hold
down to activate the key. (Modifier-based shortcuts are more common than
sequence-based shortcuts. e.g.¬†Ctrl+S for ‚Äúsave‚Äù, Ctrl+N for ‚Äúnew‚Äù. If you
squint, holding down Ctrl &amp; tapping S could be thought of as holding down a Fn
key, and hitting the ‚ÄúSave‚Äù key).</p>
<p>For ‚Äúfancy keycodes‚Äù (keys that don‚Äôt appear on a typical keyboard), it can be
difficult to come up with ways to make it easy to remember its position.<br />
e.g.¬†in the miryoku layout, it‚Äôs easier to recall where the arrow keys are
placed than where the ‚Äúchange RGB hue‚Äù key is. (The arrow keys are placed on
home row, or in a vi-style hjkl position).</p>
<p>Using QMK leader key sequences for ‚Äúfancy keycodes‚Äù might be complex, but the
effort to remember the key sequence doesn‚Äôt rely on finding a position for it on
a layer, nor having to recall that position later.</p>
<h2 id="leader-key-sequence-cost-multiple-key-presses">Leader Key Sequence Cost: Multiple Key Presses</h2>
<p>Another obvious cost to using QMK leader sequences like suggested is the
sequence is not very quick to type out.</p>
<p>It involves pressing the <code>LEAD</code> key, and then some sequence of keys.<br />
That‚Äôs surely going to be slower than holding down some Fn keys and hitting a
single key.</p>
<p>This seems a reasonable trade-off to me: the cost of having to hit a sequence of
keys comes with the benefit that it‚Äôs easier to recall how to invoke it.</p>
<p>I‚Äôm optimistic that using leader key sequences are suitable for making it easier
to invoke behaviour that‚Äôs otherwise not frequently invoked enough to be easy to
position on a keyboard.</p>
<h2 id="leader-key-sequence-cost-firmware-size-and-complexity">Leader Key Sequence Cost: Firmware Size and Complexity</h2>
<p>I‚Äôm guessing a large number leader key sequences wouldn‚Äôt fit neatly on a
keyboard with a weak atmega32u4 MCU.</p>
<p>That‚Äôs probably another reason why getting an ARM-based custom keyboard. (Plugging again: <a href="https://github.com/rgoulter/keyboard-labs">I‚Äôve designed a
few such keyboards</a>).</p>
<h2 id="other-possible-use-cases">Other Possible Use Cases</h2>
<p>Without having to worry about ‚Äúwhere do I position these keys‚Äù, I reckon it‚Äôs
easier to add additional functionality to a keymap by adding a leader key
sequence which invokes it.</p>
<p>The point is less ‚Äúit‚Äôs good to use leader key sequences for everything‚Äù, and
more ‚Äúit‚Äôs a low cost to add it to the keymap, and will hopefully be easy to
recall if it‚Äôs needed‚Äù.</p>
<p>Here are some thoughts as to leader key sequences I think I might add to my
keymap:</p>
<ul>
<li><p>Toggle/Enable/Disable for various features.</p>
<ul>
<li>Rather than just having ‚ÄúRGB toggle‚Äù or ‚ÄúHaptics Enable‚Äù, it‚Äôd make sense to
provide all of ‚Äúenable/disable/toggle‚Äù as part of leader key sequences.</li>
</ul></li>
<li><p>Dynamic Configuration: increase/decrease, default, min/max.</p>
<ul>
<li><p>RGB effects can have different hue, saturation, brightness (value), and the
effects can run at different speeds.<br />
It might make sense to provide the ability to increase/decrease these
through leader key sequences.</p></li>
<li><p>Tap Hold configuration supports <a href="https://docs.qmk.fm/tap_hold#dynamic-tapping-term">dynamic configuration of the tapping
term</a>.</p></li>
<li><p><a href="https://docs.qmk.fm/features/auto_shift">AutoShift</a> also has dynamic
configuration of its tapping term.</p></li>
</ul></li>
<li><p><a href="https://getreuer.info/posts/keyboards/macros3/index.html">‚Äúcase modes‚Äù</a></p>
<ul>
<li><p>‚Äúcaps word‚Äù is a neat feature, since it makes it easier to type out a single
word in all caps (e.g.¬†variables with uppercase identifiers).</p></li>
<li><p>‚Äúcase modes‚Äù generalises this feature, which would aim to make it easier to
write out <code>snake_case</code>, <code>kebab-case</code> or <code>./path/case</code> values.</p></li>
</ul></li>
<li><p><a href="https://docs.qmk.fm/features/dynamic_macros">Dynamic Macros</a></p>
<ul>
<li>Again, this is a neat feature, but I‚Äôm not quite sure where I‚Äôd position it
on a layer in a keymap.</li>
</ul></li>
<li><p>Send String and other shortcuts.</p>
<ul>
<li><p>From searching for ‚Äúqmk leader sequence‚Äù, most uses of the leader key I
could find seem to be use of <code>SEND_STRING</code>, or as a convenient way to
access modifier-heavy keyboard shortcuts.</p>
<ul>
<li>Vaguely, the idea of using sequences of taps instead of simultaneous holds
of modifier keys resembles one shot mods, or <a href="https://github.com/qmk/qmk_firmware/blob/user-keymaps-still-present/users/callum/readme.md">callum-style
mods</a>,
which I‚Äôve seen mentioned as a friendlier alternative to tap-hold home row
mods.</li>
</ul></li>
</ul></li>
</ul>
<h2 id="a-new-kind-of-modifier">‚ÄúA New Kind of Modifier‚Äù</h2>
<p>The docs page for the QMK leader key has the subtitle ‚Äúa new kind of modifier‚Äù.</p>
<p>Most keyboard shortcuts operate with modifier keys that you have to hold down.</p>
<ul>
<li><p>e.g.¬†on a web browser, Ctrl+T opens a new tab, Ctrl+Shift+T re-opens a closed
tab.</p></li>
<li><p>e.g.¬†in Emacs and macOS, shortcuts like Ctrl+a or Ctrl+e navigate in text.</p></li>
<li><p>on laptop keyboards, you hold down the Fn key to change the behaviour of some
other keys.</p>
<ul>
<li>or on small custom keyboards, you might access different keyboard layers by
holding down one or more Fn keys.</li>
</ul></li>
</ul>
<p>Modifier keys allow re-using the same set of physical keys for more actions.</p>
<p>Key sequences are another way of mapping functionality onto a set of keys.
(Although I‚Äôm not sure ‚Äúmodify key behaviour‚Äù is the best way to describe).</p>
<h2 id="implementation-notes-qmk-lead-timeout">Implementation Notes: QMK Lead Timeout</h2>
<p>I like defining <code>#define LEADER_NO_TIMEOUT</code> so that when inputting <code>LEAD r r</code>, I
don‚Äôt have to rush after invoking <code>LEAD</code>.</p>
<p>Setting <code>LEADER_PER_KEY_TIMING</code> also helps with long sequences. Maybe a
<code>LEADER_TIMEOUT</code> longer than the default 350ms might help for leader key
sequences same-finger bigrams.</p>
<p>https://docs.qmk.fm/features/leader_key#disabling-initial-timeout</p>
<h2 id="qmk-leader-key-sequence-idiosyncracies">QMK Leader Key Sequence Idiosyncracies</h2>
<p>The behaviour of key sequences I‚Äôm used to in Doom Emacs is that each sequence
must be unique and not the prefix of another sequence. (e.g.¬†<code>spc f s</code> saves
file, but <code>spc f</code> does not map to a command).</p>
<p>QMK‚Äôs implementation is a bit more limited: the leader key sequence has a buffer
of up to 5 keycodes; and then once the leader key sequence has timed out, then
the <code>leader_end_user</code> can be used to check which leader key sequence was used.</p>
<p>An advantage here is this allows for ‚Äúone sequence can be a prefix of another‚Äù.</p>
<p>The disadvantage is it imposes a delay after inputting the sequence. (Because
the leader key command behaviour is checked in the callback after the timeout,
there‚Äôs no way for the leader to end before the timeout).</p>
<p>I suspect an alternative implementation could overcome those limitations
(albeit, for different implementation costs).</p>
<h2 id="implementation-notes-qmk-combo">Implementation Notes: QMK Combo</h2>
<p>I have <code>LEAD</code> as a combo (chord) on my keymap.</p>
<p>In order to still use <code>LEAD</code> (and other combo keys) with different base layers
(e.g.¬†qwerty instead of dvorak), I define:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define COMBO_ONLY_FROM_LAYER </span><span class="dv">0</span></span></code></pre></div>
<p>https://docs.qmk.fm/features/combo#layer-independent-combos</p>]]></summary>
</entry>
<entry>
    <title>Further Notes on Gym Going</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/2024-06-12-further-notes-on-gym-going.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/2024-06-12-further-notes-on-gym-going.html</id>
    <published>2024-06-12T00:00:00Z</published>
    <updated>2024-06-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I have continued going to the gym in the time <a href="2024-03-23-six-months-of-going-to-the-gym.html">since I wrote a blogpost with thoughts about going there for six months</a>.<br />
That post logged that I‚Äôd made good progress on fat loss goals, enjoyed going to the gym, thought some of the machines in the gym were neat.</p>
<p>Since then, I‚Äôve paid more attention to resistance training.</p>
<p>Here are some scattered notes and links to things I‚Äôve found interesting:</p>
<ul>
<li><p>I use ChatGPT less than I was using it before.</p>
<ul>
<li>I‚Äôve since found resources which I find reputable.
Whereas, before, I‚Äôd at least found ChatGPT to be better than random blogspam.</li>
</ul></li>
<li><p>Great resource: <a href="https://exrx.net/" class="uri">https://exrx.net/</a></p>
<ul>
<li>This has many great pages on topics related to exercise.</li>
<li>I constantly refer to this website for its exercise library,
which lists exercises grouped by what muscle the exercise targets.
(e.g.¬†if you want to know what exercises target the hamstrings, you can find a list there).</li>
<li>The exercises each have a video demonstrating how to perform the exercise,
as well as a description and comments.
<ul>
<li>You can often find similar exercises done with a barbell, dumbbells, cable machine, plate-loaded machine, selectorized.. or with a smith machine, or bodyweight. ‚Äì Some exercises are locked behind a premium paywall, but <em>most</em> can be read for free.</li>
</ul></li>
</ul></li>
<li><p>Caveats about content creators:</p>
<ul>
<li>IMO: There are perverse incentives with YouTube channels and blogs:
<ul>
<li>There‚Äôs a conflict between ‚Äúput out quality information‚Äù and ‚Äúget discovered
by a recommendation algorithm‚Äù.
<ul>
<li>Recommendation algorithms tend to favour things that are fresh/new.</li>
<li>In health/fitness, it‚Äôs likely that good information is already well known
(by some people somewhere).</li>
</ul></li>
<li>I reckon that, especially for YouTube channels or blogs with high production value,
this leads to pushing out repeats of content, in order to stay ‚Äòfresh‚Äô.</li>
</ul></li>
<li>Audience / context.
<ul>
<li>Beginners have a lot of room to grow/improve; for advanced practitioners, marginal increases can be expensive.
So, advice targeted at an intermediate or advanced level might not be necessary for a beginner level.
<ul>
<li>For beginners and for casual practitioners, it‚Äôs not necessarily worth pursuing 100% efficiency.</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>Great resources: Dr Mike Israetel‚Äôs <a href="https://www.youtube.com/@RenaissancePeriodization/videos">RenaissancePeriodization</a> (RP).</p>
<ul>
<li>Especially the channel‚Äôs <a href="https://www.youtube.com/@RenaissancePeriodization/playlists">playlists</a>, and its ‚Äúmade simple‚Äù series.</li>
<li>On the whole.. the channel‚Äôs content is geared towards intermediate and advanced lifters.</li>
</ul></li>
<li><p><a href="https://www.youtube.com/watch?v=dvYgXOFCeGM">Alexander Bromley‚Äôs video on exercise science</a> is an interesting ‚Äúcold shower‚Äù.</p>
<ul>
<li>‚ÄúScience‚Äù is catchy in video titles.
But the field Exercise Science as a field hasn‚Äôt made an impact on powerlifting or bodybuilding competitors.</li>
<li>Exercise Science suffers same factors as other soft sciences:
<ul>
<li>Issues with reproducibility (sometimes due to fraud).</li>
<li>Many variables to consider deal with, which makes it easy to confound results/understanding.</li>
</ul></li>
<li>Exercise science content often has to hedge with weasel words like ‚Äúbut if that works for you, it works for you‚Äù;
this undermines its prescriptive value.</li>
</ul></li>
<li><p>The LesMills BodyPump sessions that the gym holds have been an excellent way to build confidence with weights. It‚Äôs a good exercise.</p></li>
<li><p>Bioelectrical Impedance Analysis:</p>
<ul>
<li>The results I get from day to day vary. I like to think that by taking a frequent number of measurements,
(e.g.¬†once for each session), overall the impact of the variation evens out.</li>
<li>e.g.¬†<a href="https://www.youtube.com/watch?v=fQezbeaDXIc">Video from RP discussing ways to estimate Percentage Body Fat</a> discusses that using BIA is not as effective as that judging by weight &amp; strength performance. (e.g.¬†‚Äúweight goes down &amp; strength stays same‚Äù would be positive; ‚Äúweight up, strength down‚Äù would be negative).</li>
</ul></li>
<li><p><a href="https://www.youtube.com/watch?v=DupQfkoI-Sc">RP‚Äôs video on Rep Ranges</a></p>
<ul>
<li>This is basic/fundamental.</li>
<li>‚ÄúWorking set‚Äù is a set of repetitions (reps) that is challenging enough that you‚Äôre near the limit of what you can do.
<ul>
<li>e.g.¬†ideally, you‚Äôre unable to do 15 reps with a weight which you plan to use for a set of 10. (If you could do 15 reps, the weight is too light).</li>
</ul></li>
<li>Lower reps = heavier weight = better for building strength. (Typically 3-6).</li>
<li>Higher reps = lighter weight = better for building muscle. (Anything up to 30 reps).</li>
<li>e.g.¬†‚ÄúStarting Strength‚Äù uses sets of 5 reps. (For beginners, 3 sets of 5 reps).</li>
</ul></li>
<li><p><a href="https://www.youtube.com/watch?v=UU2dpLFIOHU">Menno Henselman has a video discussing key ideas for strength/muscle development</a>.</p>
<ul>
<li>Doing more ‚Äòvolume‚Äô of work (more sets, more reps) will result in more muscle.</li>
<li>For strength: short term, intensity is good. (Low reps).
<ul>
<li>However, since there‚Äôs a limit to how strong a muscle mass can get,
in the long term, more strength would require more muscle.</li>
<li>Menno describes the relationship between strength/muscle size using an analogy of a race car: a race car might go faster by the driver improving his skills, or by improving the car‚Äôs engine.</li>
</ul></li>
</ul></li>
<li><p>I liked RP‚Äôs ‚Äúmade simple‚Äù series, particularly its playlists about <a href="https://www.youtube.com/playlist?list=PLyqKj7LwU2RulAjHczohbx5OyJQ8TaFM0">fat loss</a> and <a href="https://www.youtube.com/playlist?list=PLyqKj7LwU2RvZhQ739Mg9v8cLotbX_qE3">cardio</a>:</p>
<ul>
<li>Fat loss:
<ul>
<li>The key factor is ‚Äúcalorie deficit‚Äù (calories in &lt; calories out).
<ul>
<li>Diet (in the sense of ‚Äúwhat food you eat‚Äù) plays a much more significant role than exercise.
<ul>
<li>There‚Äôs a limit to the amount of energy you can expend in a day.
<ul>
<li>If you perform too much exercise, your body will conserve energy for the remaining part of the day.
(e.g.¬†you‚Äôll not get up &amp; do things).</li>
</ul></li>
<li>Exercise also accumulates fatigue and risk of injury, so can‚Äôt be done to excess.</li>
<li>To an extent: reaching (or increasing) calorie deficit involves doing what‚Äôs least awful of reducing what you eat or exercising more.</li>
</ul></li>
<li>An often touted goal of keto diet (low carb) is to burn fat for energy by;
but, this doesn‚Äôt supersede ‚Äúcalories in, calories out‚Äù.
<ul>
<li>Excess calories will still get stored as fat;
calorie deficit will still burn fat.</li>
<li>However, high-carb food is often not satiating;
(e.g.¬†chips; you‚Äôd have to eat many potato chips to feel full).
So, avoiding high-carb food is a good idea.</li>
</ul></li>
</ul></li>
</ul></li>
<li>Cardio:
<ul>
<li>‚ÄúStimulus to Fatigue‚Äù needs to be considered.
<ul>
<li>e.g.¬†Sprinting burns many calories per second, but is too fatiguing to sustain for some time.</li>
<li>Dr Mike rates elliptical machine highly.</li>
<li>Dr Mike rates using step-counter and aiming to reach 8k/10k/12k steps per day highly.
<ul>
<li>Good energy expenditure; very low disruption to day‚Äôs activities.</li>
<li>Very low fatigue / risk of injury.</li>
<li>Not ‚Äòfun‚Äô, but walking around is an ubiquitous part of the day.</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>Nutrition:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=oCDqqVwYMa4">Discussion of Diet Soda and Aspartame</a>.
<ul>
<li>Although ‚ÄúDiet soda cancer‚Äù makes headlines,
it‚Äôd be foolishly inaccurate to think ‚Äúdiet soda unhealthy; regular soda is healthier‚Äù.</li>
</ul></li>
<li>A few key ideas Dr Mike repeats in various places:
So long as you‚Äôre getting a certain minimum of macronutrients/micronutrients,
the overall composition of where calories come from is not important.
<ul>
<li>c.f. <a href="https://edition.cnn.com/2010/HEALTH/11/08/twinkie.diet.professor/index.html">Mark Haub‚Äôs Twinkie study</a>,
where he was able to reduce fat from a caloric deficit, while two thirds of the calories he ate came from twinkies</li>
</ul></li>
</ul></li>
<li><p>Machines vs free weights:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=iIcWxvplE6Y">Menno Henselman</a> cites papers which compared training with free weights against training with machines.
<ul>
<li>Supposed thoughts: Since machines are stable, should be able to get more strength out of them; machines worse for joints and muscle growth.</li>
<li>The studies show:
<ul>
<li>Due to specificity: you‚Äôll do slightly better on the one you train with.</li>
<li>But for health benefits: do whatever you prefer.</li>
<li>For machines: it‚Äôs slightly better to use plate-loaded machines with a free range of motion, than lever selectorized machines with a fixed range of motion.</li>
</ul></li>
</ul></li>
<li>e.g.¬†I recall seeing that Nassim didn‚Äôt like weight machines and thought they‚Äôre stupid.</li>
<li><a href="https://www.youtube.com/watch?v=qIFYgb7Mvu0">RP discusses that ‚Äúgotta use barbells!‚Äù overstates it</a>.
<ul>
<li>Barbell lifts (especially heavy compound exercises) are great; but, it would be wrong to assert they‚Äôre the best for all cases.</li>
</ul></li>
</ul></li>
<li><p>Doing cardio and resistance training in the same session:</p>
<ul>
<li>I‚Äôve seen that doing cardio after doing resistance leads to an ‚Äúinterference effect‚Äù where the muscle won‚Äôt gain as much since the body‚Äôs recovering from cardio.</li>
<li>This seems plausible to me. But, ‚Äúno interference effect‚Äù also seems plausible.</li>
<li>At least, it does seem ‚Äútrade Peter for Paul‚Äù: time spent on cardio is time spent not doing resistance training, and vice versa. It‚Äôs easier to perform well when starting fresh.</li>
<li>As such, I do split up my gym sessions between ‚Äúfocus on cardio‚Äù and ‚Äúfocus on resistance training‚Äù.</li>
</ul></li>
<li><p>RP‚Äôs <a href="https://www.youtube.com/watch?v=a5Yzg5K5EPE">Definition of Beginner (from the Hypertrophy Made Simple series): ‚Äúwhen improvement is automatic‚Äù</a>.</p>
<ul>
<li>I reckon this is a reasonable and interesting use of the word ‚Äúbeginner‚Äù.
For beginners, improvement is easy.
<ul>
<li>As opposed to ‚Äúbeginner is someone who has been lifting for up to 6 months‚Äù or whatever.</li>
</ul></li>
<li>The <a href="https://www.youtube.com/watch?v=-8Sgczn4VsM">Strength Made Simple series‚Äô equivalent video concurs</a>:
it defines beginner as ‚Äúsees improvement from adhering to basics‚Äù.</li>
</ul></li>
<li><p>ExRx‚Äôs <a href="https://exrx.net/ExInfo/Etiquette">page about Gym Etiquette</a>.</p>
<ul>
<li>This is all mostly obvious. Don‚Äôt make things unpleasant for others.</li>
<li>I‚Äôve noticed that in practice, ‚Äúunrack weights from the machine you‚Äôre using‚Äù isn‚Äôt intuitive.</li>
</ul></li>
<li><p>ExRx discussing <a href="https://exrx.net/Questions/LegPressLockOut">Locking out on leg press machine</a>.</p>
<ul>
<li>There are some nasty ‚Äúgym fails‚Äù videos which feature injuries on leg press machines.</li>
<li>ExRx discusses that the problem is putting the knee under stress it‚Äôs not adapted to.</li>
<li>This risk of injury can be prevented by always controlling the weight of the leg press.
(e.g.¬†don‚Äôt lock out in an uncontrolled manner), and don‚Äôt use more weight than your legs can handle.</li>
</ul></li>
<li><p><a href="https://www.youtube.com/watch?v=kW8KP-rlKTk">Alexander Bromley‚Äôs Bench Press (‚Äúfor no gains‚Äù series)</a>.</p>
<ul>
<li>An interesting point: the two most popular YouTube videos about bench pressing
recommend different techniques: Bromley explains that one technique is optimal for powerlifting (where the focus is strength),
the other is optimal for hypertrophy (building muscle).</li>
</ul></li>
<li><p>Fatigue &amp; Recovery:</p>
<ul>
<li>Obvious constraints to exercise are ‚Äútime available‚Äù and ‚Äúeffort you‚Äôre willing to put in‚Äù.</li>
<li>Less obvious to me was that fatigue is an important constraint.
<ul>
<li>Working beyond what the body can recover from risks injury.</li>
<li>This also indicates: rest and <em>sleep</em> are important for improvement.</li>
</ul></li>
</ul></li>
<li><p>Number of sets:</p>
<ul>
<li>RP‚Äôs discussions
<ul>
<li><a href="https://www.youtube.com/watch?v=Nh4qa-Y1CIo">for hypertrophy</a>,
<ul>
<li>Per muscle:
<ul>
<li>Aim for muscle to be pumped, and muscle disrupted. (&amp; should feel burn, if using a low enough weight).</li>
<li>For beginners, 1-5 sets targetting the muscle can be enough.</li>
<li>If can‚Äôt recover for the next session, you‚Äôre doing too much.</li>
</ul></li>
<li>Per session:
<ul>
<li>If too fatigued, it‚Äôs difficult to push target muscle to failure.</li>
<li>15-25 sets per session.</li>
</ul></li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=b9RcebQyG0A&amp;t=147s">for strength</a>
<ul>
<li>Per movement:
<ul>
<li>At least 1 heavy working set. Higher intensity is better.</li>
<li>If you can‚Äôt recover for next session, you‚Äôre doing too much.</li>
</ul></li>
<li>Per session:
<ul>
<li>Probably not worth the effort if can‚Äôt lift sufficiently heavy weight.</li>
<li>If you‚Äôre tired, anything will ‚Äòfeel‚Äô heavy/difficult.
<ul>
<li>IMO: Seems unlikely that ‚Äúget tired, then lift light weights‚Äù would lead to strength gains.</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>RP on <a href="https://www.youtube.com/watch?v=eadyCiB0G3A">rounding the back during exercises</a>:</p>
<ul>
<li>Rounding the back risks injury. Lifting should be done with a neutral back.</li>
<li>On the other hand, rounding the back builds resiliency.</li>
<li>Synthesising these: keep the back neutral for heavy lifts; train the lower back with suitable exercises (&amp; light enough weight).</li>
</ul></li>
<li><p><a href="https://exrx.net/Lists/WorkoutMenu">ExRx Workout Templates</a>.</p>
<ul>
<li>These are great.
<ul>
<li>Provides a guide on what kinds of exercises are useful to aim for at the gym.
<ul>
<li>This is useful for more direction than just ‚Äúuh, I‚Äôll use whatever machines are available‚Äù.</li>
</ul></li>
</ul></li>
<li>The pages mention useful qualifiers like ‚Äúdon‚Äôt do these kinds of exercises on the same day‚Äù.</li>
</ul></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Bridgerton Season 3</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/romance/2024-05-27-bridgerton-season-3.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/romance/2024-05-27-bridgerton-season-3.html</id>
    <published>2024-05-27T00:00:00Z</published>
    <updated>2024-05-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Finished watching Bridgerton Season 3.</p>
<p>I don‚Äôt know why it‚Äôs 4 episodes. Season 1 and 2 had 8 each.<br />
I guess they‚Äôre moving away from 1 season = 1 book.</p>
<p>This time, we see the romance primarily between Colin Bridgerton and Penelope.<br />
It also features, to a lesser degree, romance between Francesca Bridgerton &amp;
Lord Kilmartin.</p>
<h2 id="what-it-did-well">What It Did Well</h2>
<p>The sweet parts are <em>so</em> sweet!</p>
<p>I think the romantic plot between Francesca and Kilmartin is very well done.<br />
It‚Äôs cheesey.<br />
It‚Äôs very adorable.<br />
I think it‚Äôs a very ideal depiction of two utter nerds flirting. Most of the
time nerds in media are depicted as just spewing a bunch of technical jargon..
but with Francesca &amp; Kilmartin, we get people who are just somewhat socially
awkward.</p>
<p>My favourite part of this season, Francesca sees Kilmartin walking through the
streets and excitedly goes up to greet him; when she flirts with him, he
responds obtusely with an overly literal response, and the air deflates. It‚Äôs
awkward; there‚Äôs tension; and both of them are thinking ‚Äúdid I do something
wrong?‚Äù. Or, rather, this part is so good because later, Kilmartin redeems the
awkwardness by giving a very geeky gift; and it‚Äôs such a sweet resolution to the
tension that was built up.</p>
<p>The romance between Colin and Penelope is solid.<br />
I think it‚Äôd be enough to carry the season on its own.<br />
I‚Äôm a simple man with simple tastes. I like a sweet story, well executed.</p>
<p>I don‚Äôt recall if it was done the same in S1 or S2, but in this one at least, Lady Bridgerton got to fulfil that Dumbledore-eque ‚Äúknows things, nudges in the right direction‚Äù kind of role.<br />
It‚Äôs a good archetype, and cliches are cliche for a reason.</p>
<p>I was pleasantly surprised by the friendship between Eloise and Cressida.<br />
Cressida‚Äôs character always seemed like a shallow bitch rival.<br />
In this season, she‚Äôs portrayed with more sympathy. She‚Äôs lonely as a
consequence of her cruel actions.<br />
Eloise‚Äôs character is more rounded and balanced than it was in earlier seasons:
here, she mostly retains the character of ‚Äúeww, I‚Äôm not interested in feminine
things like sewing‚Äù. (Which is nice; means you‚Äôre avoiding every female
character being the same character).</p>
<p>It was also good to see that the suitor Penelope was chasing was a fairly charming and pleasant man.</p>
<h2 id="what-it-did-poorly">What It Did Poorly</h2>
<p>The show‚Äôs already made its bed, I guess, but the sex scenes are superfluous and
don‚Äôt really add much to the show. Worse, it makes it a ‚Äúdon‚Äôt want to watch
this with my family‚Äù.<br />
I get that the sex scenes are important in the novels, in defiance of
prudishness, and in favour of female sexual empowerment, or as a tangible plot
point demonstrating the intensity of the love interest. But as depicted in the
Bridgerton S3, it comes closer to ‚Äúour show has sex scenes, just like other cool
shows have sex scenes‚Äù.<br />
At the, uh, climax of the season, we have a classical arrangement of some pop
song triumphantly blasting as Colin pleasures Penelope.. it felt more ‚Äúamusing‚Äù
than ‚Äúhot‚Äù.<br />
‚Äì Instead: I think it‚Äôd be better to just skip the sex scenes altogether.</p>
<p>Generally, though.. I think the show suffers in the same way that I reckon
Columbo does:<br />
In Columbo, every episode I want to see Columbo annoy the villain, ask innocuous
questions, and ask ‚Äújust one more thing‚Äù, before eventually catching the villain
in the villain‚Äôs web of lies. I reckon the problem was, they never quite landed
on what to do with the <em>rest</em> of the runtime, so you‚Äôd get weird gimmicky
plotlines that fell flat more than they landed. ‚Äì The core, good part of what
people like about the show needs padding to support it, otherwise it‚Äôd just be
15 minutes long.<br />
Here, the sweet romance stuff is great. I wanna see the hero &amp; heroine flirt,
bicker, dance, and get together. But what to do with the rest of the runtime?</p>
<p>There‚Äôs the old adage ‚Äúboth original and good; but the good parts aren‚Äôt
original, and the original parts aren‚Äôt good‚Äù.<br />
I don‚Äôt think an adaptation needs to be all that original; especially not for
the first time it‚Äôs being adapted.</p>
<p>And a lot of the original stuff in Netflix‚Äôs Bridgerton is just ‚Ä¶ not good.</p>
<p>A major subplot throughout the whole season is that Penelope‚Äôs newlywed sisters
need to get pregnant.<br />
And the sisters are naive about how to make babies; and their husbands are
terrible lovers.<br />
The whole thing is an awkward joke, but it‚Äôs not particularly funny.<br />
(It‚Äôs easy to see Penelope‚Äôs sisters as the butt of a joke in a laughing-at-them
kind of way. I think it detracts more than it adds).</p>
<p>I think it‚Äôs no different than other seasons, but I recall really enjoying Lady
Danbury‚Äôs character in the books as a fierce character with almost
fourth-wall-breaking frankness. And in this show, she‚Äôs a silly gossip who‚Äôs a
lacky to the Queen character. Zzzz.</p>
<p>Though, speaking of fourth-wall-breaking frankness: the boxer/club owner
Mondrich and his wife continue to feature in this season. I recall in S1,
Mondrich‚Äôs wife came across as talking like someone with a smartphone in her
pocket. (Bridgerton (books or otherwise) strives for fun over historical
fidelity; but, at some point, why not just have a story set in the present?).<br />
I think the show was not really short of strong-independent-female characters.
But in this season, Mondrich‚Äôs wife is written differently, and shows a vanity
by way of concern for what others in society will think of her if she doesn‚Äôt
appear as her social class expects her to. I reckon the change was jarring.</p>
<p>And while it‚Äôs more a problem with the genre than the show itself.. but I still
don‚Äôt like seeing ‚Äúthe hero is cool, the other men are losers‚Äù nor ‚Äúthe heroine
is cool, the other women are losers‚Äù.<br />
In Bridgerton S3, we see that a marquess tries to court Francesca; but, he‚Äôs
shown to be crass or otherwise undesirable. Ehhh. I don‚Äôt think the story
benefits from this.<br />
Penelope‚Äôs story is nicer, and more romantic: her primary concern being the
security that‚Äôd come from a marriage, and she manages to catch the interests of
a smart and friendly vegetarian. He‚Äôs not a loser, she could live happily with
him. (On the other hand, Colin is shown frequenting a brothel several times. It
doesn‚Äôt endear him to me. I think I‚Äôd prefer the trope where he otherwise chases
after some girl, without realising his feelings are truly for Penelope).</p>
<p>The show still also suffers from light (or otherwise) touches of progressivism.<br />
There‚Äôs a joke in The Simpsons where Lisa Simpson boldly walks up to the
football team and bravely says ‚ÄúI want to join! That‚Äôs right, a girl!‚Äù. (Lisa is
then deflated to find that the team already has girls).<br />
I was reminded of that by one part in Bridgerton S3, when a group of men are
laughing/mocking an inventor for his hot air balloon, and a woman interrupts
saying ‚ÄúI came hear to learn things‚Äù; Benedict Bridgerton thanks her, then
remarks ‚Äúoh, you‚Äôre a woman‚Äù, and she gives the same kind of ‚Äúthat‚Äôs right, I‚Äôm
a woman who can read‚Äù kind of reply.<br />
Do people enjoy story beats like that? I enjoy the geeky characters being well
written. Maybe someone enjoys these ‚ÄúI was brave! and everybody clapped‚Äù type
stuff.<br />
‚Äì It‚Äôs kindof bizarre that someone would want to have fun by proselytizing
progressivism, but also set a story in a setting wherein ‚Äúwoman needs to get
married to secure her future‚Äù is a key driver of plots in the story.</p>]]></summary>
</entry>
<entry>
    <title>Getting MounRiver Studio to Run on NixOS</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/programming/2024-05-23-getting-mounriver-studio-to-run-on-nixos.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/programming/2024-05-23-getting-mounriver-studio-to-run-on-nixos.html</id>
    <published>2024-05-23T00:00:00Z</published>
    <updated>2024-05-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In <a href="/blog/posts/programming/2024-05-22-example-of-cannot-execute-required-file-not-found-on-nixos.html">the previous post</a>,
I walked through a few different ways of how to get a pre-compiled binary running on NixOS.</p>
<p>In this post, I‚Äôll share some notes on what it took to get <a href="http://www.mounriver.com/download">MounRiver</a> running on NixOS.
The basic idea is the same, but in practice it felt much more difficult.
(MounRiver Studio is an IDE used for WCH MCUs. <a href="/blog/posts/programming/2023-12-21-notes-on-building-wch-ble-ch592-evt-exam-with-bare-makefile.html">I‚Äôve discussed developing the EVT examples in a previous blogpost</a>).</p>
<p>If the previous post was ‚Äúdraw a circle‚Äù, this post is ‚Äú<a href="https://knowyourmeme.com/memes/how-to-draw-an-owl">draw the rest of the owl</a>‚Äù.</p>
<p>These notes are mostly ‚Äúhere are the commands I ran, here was the output‚Äù:</p>
<p>The Community RISC-V IDE can be downloaded from the MounRiver website. It‚Äôs a tarball with a <code>beforeinstall</code> (with some <code>.so</code> shared libraries to be copied into <code>/usr/lib</code>), and an <code>MRS_Community</code> directory which is a distribution of the <a href="https://eclipseide.org/">Eclipse IDE</a>.</p>
<p>First thing to try: just running the executable directly:</p>
<pre><code>$ ./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver\ Studio_Community
exec: Failed to execute process &#39;./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver Studio_Community&#39;: The file exists and is executable. Check the interpreter or linker?</code></pre>
<p>or with bash:</p>
<pre><code>bash: ./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver Studio_Community: cannot execute: required file not found</code></pre>
<p>This ‚Äúrequired file not found‚Äù should be familiar, having read the previous blogpost.</p>
<p>So, checking what <code>ldd</code> says:</p>
<pre><code>$ ldd ./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver\ Studio_Community
        linux-vdso.so.1 (0x00007ffd249d4000)
        libpthread.so.0 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libpthread.so.0 (0x00007fc32c3d8000)
        libdl.so.2 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libdl.so.2 (0x00007fc32c3d3000)
        libc.so.6 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libc.so.6 (0x00007fc32c1ea000)
        /lib64/ld-linux-x86-64.so.2 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib64/ld-linux-x86-64.so.2 (0x00007fc32c3df000)</code></pre>
<p>Indeed, the dynamic linker is <code>/lib64/ld-linux-x86-64.so.2</code>. (So far, this is the same as the hello world example from the previous post).</p>
<h2 id="approach-1-using-nix-alien">Approach 1: Using Nix Alien</h2>
<p>In the previous post, we saw <a href="https://github.com/thiagokokada/nix-alien">nix-alien</a> could automatically work around some problems. Trying that:</p>
<pre><code>$ nix-alien ./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver\ Studio_Community
/home/rgoulter/playground/nix-mounriver-studio/MounRiver_Studio_Community_Linux_x64_V160/MRS_Community//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.linux.x86_64_14.0.2.v20200815-0932/jre/bin/java: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory
MounRiver Studio_Community:
JVM terminated. Exit code=127
/home/rgoulter/playground/nix-mounriver-studio/MounRiver_Studio_Community_Linux_x64_V160/MRS_Community//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.linux.x86_64_14.0.2.v20200815-0932/jre/bin/java
-Dosgi.requiredJavaVersion=11
-Dosgi.instance.area.default=@user.home/mrs_community-workspace
....</code></pre>
<p>The key detail of this output being <code>... libz.so.1: cannot open ...</code>:</p>
<pre><code>plugins/org.eclipse.justj.openjdk.hotspot.jre.full.linux.x86_64_14.0.2.v20200815-0932/jre/bin/java: error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory</code></pre>
<p>Checking <code>ldd</code> on this <code>java</code> binary:</p>
<pre><code>$ ldd ..../jre/bin/java
        linux-vdso.so.1 (0x00007ffe3abb5000)
        libz.so.1 =&gt; not found
        libjli.so =&gt; /home/rgoulter/playground/nix-mounriver-studio/MounRiver_Studio_Community_Linux_x64_V160/MRS_Community//plugins/org.eclipse.justj.openjdk.hotspot.jre.full.linux.x86_64_14.0.2.v20200815-0932/jre/bin/../lib/libjli.so (0x00007ff14489c000)
        libpthread.so.0 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libpthread.so.0 (0x00007ff144897000)
        libdl.so.2 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libdl.so.2 (0x00007ff144892000)
        libc.so.6 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libc.so.6 (0x00007ff1446a7000)
        /lib64/ld-linux-x86-64.so.2 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib64/ld-linux-x86-64.so.2 (0x00007ff1448b3000)
        libz.so.1 =&gt; not found</code></pre>
<p>Indeed, <code>libz.so.1 =&gt; not found</code>.</p>
<p>We can add <code>--additional-libs=libz.so.1</code>
to the <code>nix-alien</code> call, which helpfully lets us pick the package <code>libz</code>. (We could instead use <code>--additional-packages=libz</code> if we already know <code>libz</code> is the name of the nix package with <code>libz.so.1</code>). Re-running <code>nix-alien</code> with this still runs into problems:</p>
<pre><code>$ nix-alien --recreate --additional-libs=libz.so.1 ./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver\ Studio_Community
MounRiver Studio_Community:
An error has occurred. See the log file
/home/rgoulter/playground/nix-mounriver-studio/MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/configuration/1716348838071.log.</code></pre>
<p>Checking the contents of that log file:</p>
<pre><code>!SESSION 2024-05-22 03:33:57.978 -----------------------------------------------
eclipse.buildId=4.17.0.I20200902-1800
java.version=14.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.embedcdt.product
Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.embedcdt.product

!ENTRY org.eclipse.osgi 4 0 2024-05-22 03:33:59.069
!MESSAGE Application error
!STACK 1
java.lang.UnsatisfiedLinkError: Could not load SWT library. Reasons:
        no swt-pi4-gtk-4936r26 in java.library.path: [/run/opengl-driver/lib, /run/opengl-driver-32/lib, /usr/java/packages/lib, /usr/lib64, /lib64, /lib, /usr/lib]
        no swt-pi4-gtk in java.library.path: [/run/opengl-driver/lib, /run/opengl-driver-32/lib, /usr/java/packages/lib, /usr/lib64, /lib64, /lib, /usr/lib]
        Can&#39;t load library: /home/rgoulter/.swt/lib/linux/x86_64/libswt-pi4-gtk-4936r26.so
        Can&#39;t load library: /home/rgoulter/.swt/lib/linux/x86_64/libswt-pi4-gtk.so
....</code></pre>
<p><code>~/.swt/lib/linux/x86_64/</code> doesn‚Äôt have the <code>pi4</code> lib, but it does have a <code>pi3</code> one:</p>
<pre><code>$ ls /home/rgoulter/.swt/lib/linux/x86_64/
libswt-pi3-gtk-4936r26.so*

$ ldd /home/rgoulter/.swt/lib/linux/x86_64/libswt-pi3-gtk-4936r26.so

        linux-vdso.so.1 (0x00007fffa2b60000)
        libgtk-3.so.0 =&gt; not found
        libgdk-3.so.0 =&gt; not found
        libcairo.so.2 =&gt; not found
        libgthread-2.0.so.0 =&gt; not found
        libc.so.6 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libc.so.6 (0x00007fc0c9a17000)
        /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib64/ld-linux-x86-64.so.2 (0x00007fc0ca004000)</code></pre>
<p>Here, the <code>libswt</code> shared library can‚Äôt load, because shared libraries it links against aren‚Äôt there.</p>
<p>With that, let‚Äôs add packages <code>cairo</code>, <code>glib</code>, <code>gtk3</code> to the <code>nix-alien</code> invocation.</p>
<pre><code>$ nix-alien --recreate --additional-packages=libz -p cairo -p gtk3 -p glib ./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver\ Studio_Community</code></pre>
<p>And it runs!</p>
<p>Further invocations of <code>nix-alien</code> can just run the binary directly:</p>
<pre><code>$ nix-alien ./MounRiver_Studio_Community_Linux_x64_V160/MRS_Community/MounRiver\ Studio_Community</code></pre>
<h2 id="approach-2-using-patchelf-on-the-binaries-directly">Approach 2: Using patchelf on the Binaries Directly</h2>
<p>Although using <code>nix-alien</code> works, I was curious to see what it would take to beat the thing into shape using <code>patchelf</code> directly. (This is obviously a more tedious way of approaching the problem).</p>
<p>It‚Äôs possible to run <code>patchelf</code> against everything that looks like it could be an executable binary, and let <code>patchelf</code> sort out whether the interpreter needs to be set or not:</p>
<pre><code>interpreter=/nix/store/....-glibc-2.39-5/lib64/ld-linux-x86-64.so.2

find ./MounRiver_Studio_Community_Linux_x64_V160 -type f -executable -exec file {} \; \
  | grep ELF \
  | cut -d: -f1 \
  | xargs -i sh -c &quot;patchelf --set-interpreter $interpreter \&quot;{}\&quot; || true&quot;</code></pre>
<p>(Find files which are executable, and run <code>file</code> on them; filter the output to ELF files (binaries and libraries), take the output up till the first <code>:</code>, and run this against <code>patchelf</code>).</p>
<p>This will take care of the interpreter being set to <code>/lib64/ld-linux-x86-64.so.2</code> in the binaries for running on this machine. (I‚Äôm not suggesting this is a clean approach to the problem).</p>
<p>I had also tried running <code>patchelf --set-interpreter</code> against each each executable as it caused a problem. This lead to iteratively running the program, seeing what didn‚Äôt work, and then patching whatever binary couldn‚Äôt be executed due to its interpreter not being found.<br />
This was a bit tedious, since it involved the eclipse binary, the JRE it uses, and the toolchains in the same distribution (<code>make</code>, and then the GCC components).</p>
<p>I found the link between Eclipse and the toolchains in its distributions:<br />
In the project settings, under Project -&gt; C/C++ Build -&gt; Settings -&gt; Toolchains tab, the toolchains are set to the binaries in this MounRiver distribution.</p>
<p>I think plaintext files are simpler to understand than configuration via a UI. Eclipse seems to be oriented around configuration through the UI.</p>
<p>As with the <code>nix-alien</code> solution above, of course the program also ran into problems with missing shared libraries when loading SWT.</p>
<p>I opted to set <code>LD_LIBRARY_PATH</code> in a <code>shell.nix</code>, and so would open MounRiver wtih this <code>shell.nix</code> loaded:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">libs</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">[</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    libz</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    cairo</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    glib</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    gtk3</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>pkgs.mkShell <span class="op">{</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">LD_LIBRARY_PATH</span> <span class="op">=</span> pkgs.lib.makeLibraryPath libs<span class="op">;</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="using-the-mounriver-ide-for-wct-evt-examples">Using the MounRiver IDE for WCT EVT Examples</h2>
<p>While trying the MounRiver IDE to build the CH592 EVT examples, I ran into a problem where it couldn‚Äôt find the <code>CH59xBLE</code> lib.</p>
<pre><code>$ ls /home/rgoulter/github/ch592/EVT_V1.0/EXAM/BLE/LIB

.... LIBCH59xBLE.a ....</code></pre>
<p>This should be renamed to <code>libCH59xBLE.a</code> in order for the linker to find it.</p>
<p>Presumably the developers distributing the EVT are using a case-insensitive filesystem.</p>
<p>Issues like that, and the distributed Eclipse containing whitespace in the executable/toolchain paths, smell sloppy to me.</p>
<h2 id="attempting-to-package-this-in-nix">Attempting to Package this in Nix</h2>
<p>I expect using the <code>buildFHSEnv</code> would likely result in a package which works. (Albeit, for distributing as a package, care would need to be taken for unpacking the binary).</p>
<p>However, it‚Äôs cleaner to write a Nix package using <code>stdenv.mkDerivation</code>.<br />
And by writing a package, it‚Äôs going to be easier for others to use, or for me to re-use without having to make assumptions about where I put different files.</p>
<p>For the first attempt, we copy the approach as with the <code>autoPatchelfHook</code> example in the previous blogpost, e.g.¬†<code>mounriver.nix</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">stdenv</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">autoPatchelfHook</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libz</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">cairo</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">glib</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">gtk3</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;mounriver studio community&quot;</span><span class="op">;</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;V160&quot;</span><span class="op">;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./MounRiver_Studio_Community_Linux_x64_V160.tar.xz</span><span class="op">;</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>    autoPatchelfHook</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a>    libz</span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>    cairo</span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>    glib</span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>    gtk3</span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>    libXtst</span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>    libsecret</span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a>    alsa-lib</span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>  <span class="co"># breaks on whitespace</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUpdateAutotoolsGnuConfigScripts</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a>  <span class="va">doBuild</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a><span class="st">    cp -r ./MRS_Community/* $out</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>and a <code>default.nix</code> with:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>pkgs.callPackage <span class="ss">./mounriver.nix</span> <span class="op">{}</span></span></code></pre></div>
<p>that we build with <code>nix-build</code>.</p>
<p>This results in some errors:</p>
<pre><code>error: auto-patchelf could not satisfy dependency libXtst.so.6 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/plugins/org.eclipse.justj.openjdk.hotspot.jre.full.linux.x86_64_14.0.2.v20200815-0932/jre/lib/libawt_xawt.so
error: auto-patchelf could not satisfy dependency libasound.so.2 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/plugins/org.eclipse.justj.openjdk.hotspot.jre.full.linux.x86_64_14.0.2.v20200815-0932/jre/lib/libjsound.so
error: auto-patchelf could not satisfy dependency libsecret-1.so.0 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/plugins/org.eclipse.equinox.security.linux.x86_64_1.1.300.v20190830-1238/libkeystorelinuxnative.so
error: auto-patchelf could not satisfy dependency libusb-1.0.so.0 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/toolchain/OpenOCD/bin/openocd
error: auto-patchelf could not satisfy dependency libhidapi-hidraw.so.0 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/toolchain/OpenOCD/bin/openocd
error: auto-patchelf could not satisfy dependency libjaylink.so.0 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/toolchain/OpenOCD/bin/openocd
error: auto-patchelf could not satisfy dependency libncurses.so.5 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/toolchain/arm-none-eabi-gcc/bin/arm-none-eabi-gdb
error: auto-patchelf could not satisfy dependency libtinfo.so.5 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/toolchain/arm-none-eabi-gcc/bin/arm-none-eabi-gdb
error: auto-patchelf could not satisfy dependency libncurses.so.5 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/toolchain/arm-none-eabi-gcc/bin/arm-none-eabi-gdb-py
error: auto-patchelf could not satisfy dependency libtinfo.so.5 wanted by /nix/store/vhjxnm2ris1rnnc3zgwbi55z5f3ah9ak-mounriver-studio-community-V160/toolchain/arm-none-eabi-gcc/bin/arm-none-eabi-gdb-py</code></pre>
<p>The <code>libusb-1.0.so.0</code>, <code>libhidapi</code>, <code>libjaylink</code>, etc. helps explain why these shared libraries were included in the <code>beforeinstall</code> directory. (They‚Äôre used by openocd and gdb).</p>
<p>Anyway, adding the libraries for these to the <code>buildInputs</code></p>
<div class="sourceCode" id="cb18"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">stdenv</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">autoPatchelfHook</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libz</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">cairo</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">glib</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">gtk3</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">hidapi</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libjaylink</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libusb1</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">ncurses5</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libXtst</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">alsa-lib</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libsecret</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;mounriver studio community&quot;</span><span class="op">;</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;V160&quot;</span><span class="op">;</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./MounRiver_Studio_Community_Linux_x64_V160.tar.xz</span><span class="op">;</span></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>    autoPatchelfHook</span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>    libz</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a>    cairo</span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>    glib</span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>    gtk3</span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>    hidapi</span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>    libjaylink</span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>    libusb1</span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a>    ncurses5</span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a>    libXtst</span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a>    libsecret</span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>    alsa-lib</span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a>  <span class="co"># breaks on whitespace</span></span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUpdateAutotoolsGnuConfigScripts</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a>  <span class="va">doBuild</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out</span></span>
<span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a><span class="st">    cp -r ./MRS_Community/* $out</span></span>
<span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This package recipe is able to <em>build</em>, but the resulting Eclipse doesn‚Äôt successfully <em>run</em>.</p>
<p>Unsurprisingly, it can‚Äôt load the shared libraries for the SWT library.<br />
<code>nix-alien</code> solved this by adding <code>cairo glib gtk3</code> to its FHS env.<br />
Replacing the interpreter fixed this by adjusting <code>LD_LIBRARY_PATH</code>.<br />
Here, we can use <code>wrapProgram</code> to adjust the <code>LD_LIBRARY_PATH</code> with <code>lib.makeLibraryPath [ cairo glib gtk3 ]</code>. This ensures <code>LD_LIBRARY_PATH</code> runs with a value we want when we run the program.</p>
<p>Hence:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">stdenv</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">autoPatchelfHook</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">makeWrapper</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libz</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">cairo</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">glib</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">gtk3</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">hidapi</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libjaylink</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libusb1</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">ncurses5</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libXtst</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">alsa-lib</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libsecret</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;mounriver studio community&quot;</span><span class="op">;</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;V160&quot;</span><span class="op">;</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./MounRiver_Studio_Community_Linux_x64_V160.tar.xz</span><span class="op">;</span></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>    autoPatchelfHook</span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>    makeWrapper</span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>    libz</span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a>    cairo</span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a>    glib</span>
<span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a>    gtk3</span>
<span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-32"><a href="#cb19-32" aria-hidden="true" tabindex="-1"></a>    hidapi</span>
<span id="cb19-33"><a href="#cb19-33" aria-hidden="true" tabindex="-1"></a>    libjaylink</span>
<span id="cb19-34"><a href="#cb19-34" aria-hidden="true" tabindex="-1"></a>    libusb1</span>
<span id="cb19-35"><a href="#cb19-35" aria-hidden="true" tabindex="-1"></a>    ncurses5</span>
<span id="cb19-36"><a href="#cb19-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-37"><a href="#cb19-37" aria-hidden="true" tabindex="-1"></a>    libXtst</span>
<span id="cb19-38"><a href="#cb19-38" aria-hidden="true" tabindex="-1"></a>    libsecret</span>
<span id="cb19-39"><a href="#cb19-39" aria-hidden="true" tabindex="-1"></a>    alsa-lib</span>
<span id="cb19-40"><a href="#cb19-40" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb19-41"><a href="#cb19-41" aria-hidden="true" tabindex="-1"></a>  <span class="co"># breaks on whitespace</span></span>
<span id="cb19-42"><a href="#cb19-42" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUpdateAutotoolsGnuConfigScripts</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb19-43"><a href="#cb19-43" aria-hidden="true" tabindex="-1"></a>  <span class="va">doBuild</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb19-44"><a href="#cb19-44" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb19-45"><a href="#cb19-45" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out</span></span>
<span id="cb19-46"><a href="#cb19-46" aria-hidden="true" tabindex="-1"></a><span class="st">    cp -r ./MRS_Community/* $out</span></span>
<span id="cb19-47"><a href="#cb19-47" aria-hidden="true" tabindex="-1"></a><span class="st">    wrapProgram &quot;$out/MounRiver Studio_Community&quot; --prefix LD_LIBRARY_PATH : </span><span class="sc">${</span>lib.makeLibraryPath <span class="op">[</span> cairo glib gtk3 <span class="op">]</span><span class="sc">}</span></span>
<span id="cb19-48"><a href="#cb19-48" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb19-49"><a href="#cb19-49" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This runs, but compared to the MounRiver run by <code>nix-alien</code>, the toolchains in the project settings are empty, and so the IDE doesn‚Äôt ‚Äújust work‚Äù for building the WCH EVT examples.</p>
<p>In the MounRiver which did build the WCT EVT examples, the toolchain paths were set to values like <code>${eclipse_home}toolchain/make-3.8/usr/local/bin</code> or <code>${eclipse_home}/toolchain/RISC-V Embedded GCC/bin</code>.</p>
<p>Searching for these strings, in the <code>MRS_Community</code> folder:</p>
<pre><code>$ rg --hidden --fixed-strings &#39;${eclipse_home}toolchain&#39;
configuration/.settings/ilg.gnumcueclipse.managedbuild.cross.prefs</code></pre>
<p>It‚Äôs not clear to me <em>why</em> the Eclipse running from this <code>mounriver.nix</code> Nix package doesn‚Äôt pick these settings up.<br />
My guess is something to do with the <code>configuration/.settings</code> being read-only in the <code>/nix/store</code>.<br />
I noticed that copying the <code>configuration</code> from the <code>/nix/store</code> (or just the extracted <code>MRS_Community</code> directory) to the directory in <code>~/.eclipse</code> did set the global toolchain paths; but I‚Äôm not sure where/how that directory in <code>~/.eclipse</code> comes into things, either. (Whereas, say, the <code>.ini</code> file in <code>MRS_Community</code> does define <code>osgi.instance.area.default=@user.home/mrs_community-workspace</code>).</p>
<p>At this point, it‚Äôs worth looking at code in nixpkgs.
<a href="https://search.nixos.org/packages?channel=23.11&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=eclipse">Searching for packages named ‚Äúeclipse‚Äù</a>, and then opening up <a href="https://github.com/NixOS/nixpkgs/blob/nixos-23.11/pkgs/applications/editors/eclipse/build-eclipse.nix">the source code</a>.<br />
The build inputs &amp; wrapping with <code>LD_LIBRARY_PATH</code> looks familiar. This nixpkgs code has code to deal with <a href="https://nixos.org/manual/nixpkgs/stable/#ssec-gnome-packaging">packaging a gnome application</a>, among other things.</p>
<p>The only thing that sticks out as related to <code>configuration</code> is the argument is <code>makeWrapper</code> <code>-add-flags "-configuration \$HOME/.eclipse/''${productId}_${productVersion}/configuration"</code>.</p>
<p>My understanding of how Eclipse works is insufficient to figure out how I would write a Nix package this MounRiver distribution &amp; also have the <code>configuation/.settings</code> it provides get used, without requiring the user to just copy these files.</p>
<p>At this point, it‚Äôs enough for me to say that the approach taken by this distributed tarball is different enough from the way Nix prefers to package things. e.g.¬†the tarball includes a java runtime, as well as toolchain binaries for <code>make</code> and the RISC-V GCC toolchain; whereas Nix would package these separately.<br />
For myself, getting MounRiver to run is mostly a curiosity. It would have been useful for checking the WCH EVT examples. <a href="/blog/posts/programming/2023-12-21-notes-on-building-wch-ble-ch592-evt-exam-with-bare-makefile.html">In another blogpost, I discussed building this outside of MounRiver</a>, and in that I linked to an example with a nix-shell provided.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Okay, so in the end, I was able to run the MounRiver Studio binary on NixOS. This required using <code>nix-alien</code>, and figuring out which shared libraries were required to run the precompiled binaries. ‚Äì This was a bit annoying, but not insurmountable. Getting it to run with <code>nix-alien</code> was essentially no more difficult than the hello-world example in the previous blogpost.</p>
<p>I was not able to successfully write a nix package for MounRiver Studio such that the user experience was the same ‚Äújust works‚Äù as is intended. The point here seems to be:</p>
<ul>
<li><p>It seems the idiosyncracy of the eclipse home being read only caused issues reading the settings.</p></li>
<li><p>Understanding of how to work around issues like these may require a deep understanding of what the program is doing in order to work around them.</p></li>
</ul>
<p>In my experience, cases like this are not common on NixOS, and it doesn‚Äôt dissuade me at all from using NixOS. However, this is also additional effort that you probably don‚Äôt have to expend on other Linux distributions.</p>]]></summary>
</entry>
<entry>
    <title>Example of Cannot Execute Required File Not Found on NixOS</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/programming/2024-05-22-example-of-cannot-execute-required-file-not-found-on-nixos.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/programming/2024-05-22-example-of-cannot-execute-required-file-not-found-on-nixos.html</id>
    <published>2024-05-22T00:00:00Z</published>
    <updated>2024-05-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>One of the problems many NixOS users encounter is difficulty running binaries which have been compiled on other Linux systems.</p>
<p>The error message from trying is typically:</p>
<pre><code>cannot execute: required file not found</code></pre>
<p>which is confusing because the file is right there.</p>
<p>In this post, I‚Äôll walk through a ‚Äúhello world‚Äù example, which hopefully illustrates what‚Äôs going on.</p>
<h3 id="quickly-entering-non-nixos-from-nixos">Quickly Entering non-NixOS from NixOS</h3>
<p>A simple example of this is a ‚Äúhello world‚Äù C program compiled on a non-NixOS system.</p>
<p>From NixOS, we can still enter a non-NixOS system easily using <a href="https://github.com/89luca89/distrobox">distrobox</a>.
(Distrobox is similar to <a href="https://docs.fedoraproject.org/en-US/fedora-silverblue/toolbox/">Fedora‚Äôs toolbox</a>; it lets you easily work with your HOME directory from within a container, which can be useful for OSs like NixOS or Fedora Silverblue).</p>
<p>Distrobox requires docker or podman; so, ensure that‚Äôs enabled:</p>
<pre><code>virtualisation.podman.enable = true;</code></pre>
<p>e.g.¬†should be able to run:</p>
<pre><code>podman version</code></pre>
<p>Then we can run distrobox &amp; create an ubuntu distrobox with:</p>
<pre><code>$ nix shell nixpkgs#distrobox

$ distrobox create ubuntu --image ubuntu:latest</code></pre>
<p>And enter this with <code>distrobox enter ubuntu</code>.</p>
<h3 id="building-hello-world-in-the-ubuntu-distrobox">Building Hello World in the Ubuntu Distrobox</h3>
<p>Within the ubuntu distrobox, we install <code>build-essential</code> (since we want to compile a simple C program):</p>
<pre><code>$ sudo apt update
$ sudo apt install build-essential</code></pre>
<p>then e.g.¬†<code>hello.c</code> (unintuitively, you can use the text editor from the host system, such as helix or neovim, even within the ubuntu distrobox):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">**</span>argv<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  printf<span class="op">(</span><span class="st">&quot;hello world</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And then compile this (<code>gcc hello.c</code>). And run it, if you like: <code>./a.out</code>.</p>
<h3 id="examining-a.out">Examining a.out</h3>
<p>Checking what <code>ldd</code> says about the compiled <code>hello.c</code>, from within the ubuntu distrobox:</p>
<pre><code>$ ldd ./a.out
        linux-vdso.so.1 (0x00007ffe04ff9000)
        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fcda5200000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fcda561d000)</code></pre>
<p>and then leaving the ubuntu distrobox (e.g.¬†<code>^D</code>), from the NixOS host we see a different result:</p>
<pre><code>$ ldd ./a.out
        linux-vdso.so.1 (0x00007ffe06e36000)
        libc.so.6 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib/libc.so.6 (0x00007f6dd47d1000)
        /lib64/ld-linux-x86-64.so.2 =&gt; /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib64/ld-linux-x86-64.so.2 (0x00007f6dd49c1000)
</code></pre>
<p>Trying to run this on the NixOS host results in an error:</p>
<pre><code>$ ./a.out
bash: ./a.out: cannot execute: required file not found</code></pre>
<p>Using <code>fish</code> shell, the error is more useful:</p>
<pre><code>$ ./a.out
exec: Failed to execute process &#39;./a.out&#39;: The file exists and is executable. Check the interpreter or linker?</code></pre>
<h3 id="a-bash-script-analogy">A Bash Script Analogy</h3>
<p><code>ld-linux</code> is the <a href="https://linux.die.net/man/8/ld-linux">dynamic-linker</a>.</p>
<p>What‚Äôs going on is comparable to executing a shell script with a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> moo <span class="kw">|</span> <span class="ex">cowsay</span></span></code></pre></div>
<p>If we have an executable script with a bad interpreter, e.g.¬†<code>badinterp</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/nonexist</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> <span class="st">&quot;hello&quot;</span></span></code></pre></div>
<p>Then trying to run this with <code>bash</code> yields the same ‚Äúrequired file not found‚Äù error:</p>
<pre><code>$ ./badinterp
bash: ./badinterp: cannot execute: required file not found</code></pre>
<p>although <code>fish</code> shell once again is more useful:</p>
<pre><code>$ ./badinterp
exec: Failed to execute process &#39;./badinterp&#39;: The file specified the interpreter &#39;/nonexist&#39;, which is not an executable command.</code></pre>
<p>If running the above executable script (e.g.¬†<code>cowsay-moo</code>) without <code>cowsay</code> on <code>PATH</code>, we get a different error:</p>
<pre><code>$ ./cowsay-moo
./cowsay-moo: line 2: cowsay: command not found</code></pre>
<p>That the executable isn‚Äôt on the PATH is a much easier to understand.</p>
<p>The other most common kind of linker error is analogous to that:</p>
<pre><code>error while loading shared libraries: libz.so.1: cannot open shared object file: No such file or directory</code></pre>
<p>whereas a shell uses <code>PATH</code> to find exectuables, the dynamic linker uses <code>LD_LIBRARY_PATH</code> to find dynamically linked libraries.</p>
<p>This is also why setting <code>LD_LIBRARY_PATH</code> often results in problems related to ‚Äúversion GLIBCXX_ not found‚Äù. ‚Äì By setting the <code>LD_LIBRARY_PATH</code>, the dynamic linker loads a glibc version that‚Äôs different than what the program expects, and so runs into problems.</p>
<h3 id="working-around-the-problem-fhs-environments">Working Around the Problem: FHS Environments</h3>
<p>One workaround provided by nixpkgs is <a href="https://nixos.org/manual/nixpkgs/stable/#sec-fhs-environments">FHS environments</a>.
(These are implemented using <a href="https://github.com/containers/bubblewrap">bubblewrap</a>, which flatpak uses).</p>
<p>e.g.¬†in this case, we can write a simple <code>fhs.nix</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>pkgs.buildFHSEnv <span class="op">{</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;hello&quot;</span><span class="op">;</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">runScript</span> <span class="op">=</span> <span class="ss">./a.out</span><span class="op">;</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>and then build/run this with <code>nix-build ./fhs.nix</code>, and running <code>./result/bin/hello</code>.</p>
<p>(FWIW, this FHS env would need to be re-built every time the binary changes).</p>
<h3 id="automating-this-workaround-nix-alien">Automating this Workaround: nix-alien</h3>
<p>This approach of ‚Äúwrite an FHS env for the unpatched binary, and run that‚Äù has been automated by the tool <a href="https://github.com/thiagokokada/nix-alien">nix-alien</a>.</p>
<p>We can add <code>nix-alien</code> to the shell with:</p>
<pre><code>$ nix shell &quot;github:thiagokokada/nix-alien#nix-alien&quot;</code></pre>
<p>and then run this with:</p>
<pre><code>$ nix-alien ./a.out
[nix-alien] File &#39;/home/rgoulter/.cache/nix-alien/f5127167-26a2-5c7d-89d0-fb363e223e43/fhs-env/default.nix&#39; created successfuly!
....
hello world</code></pre>
<p>The thing to note is that it creates this <code>.cache/nix-alien/UUID/fhs-env/default.nix</code> file.</p>
<p>NOTE: if you change the arguments to <code>nix-alien</code>, you may need to call <code>nix-alien</code> with <code>--recreate</code> to ensure it recreates the <code>default.nix</code>.</p>
<p>Examining the <code>default.nix</code> it creates:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="bu">builtins</span>.<span class="bu">fetchTarball</span> <span class="op">{</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>      <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;nixpkgs-unstable-20240509145238&quot;</span><span class="op">;</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>      <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/NixOS/nixpkgs/archive/f1010e0469db743d14519a1efd37e23f8513d714.tar.gz&quot;</span><span class="op">;</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>      <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-doPgfj+7FFe9rfzWo1siAV2mVCasW+Bh8I1cToAXEE4=&quot;</span><span class="op">;</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">})</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span> <span class="op">}</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">inherit</span> (<span class="va">pkgs</span>) <span class="va">buildFHSUserEnv</span>;</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>buildFHSUserEnv <span class="op">{</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;a.out-fhs&quot;</span><span class="op">;</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a>  <span class="va">targetPkgs</span> <span class="op">=</span> <span class="va">p</span><span class="op">:</span> <span class="kw">with</span> p<span class="op">;</span> <span class="op">[</span></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>  <span class="va">runScript</span> <span class="op">=</span> <span class="st">&quot;/home/rgoulter/playground/distrobox-build/a.out&quot;</span><span class="op">;</span></span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The <code>builtins.fetchTarball</code> is essentially performing the same role as <code>&lt;nixpkgs&gt;</code>. (The latter uses <code>nixpkgs</code> on <code>NIX_PATH</code>, the former uses a particular revision of the <code>nixpkgs</code> repository).</p>
<p><code>buildFHSUserEnv</code> is an alias for <code>buildFHSEnv</code>.</p>
<p><code>targetPkgs</code> is empty (so doesn‚Äôt have any effect on this example), but it‚Äôs useful for additional dynamically linked libraries the precompiled binary may need.</p>
<h3 id="a-universal-nixos-workaround">A Universal NixOS Workaround:</h3>
<p>Another solution, which works in some cases where <code>buildFHSEnv</code> does not, is <a href="https://github.com/Mic92/nix-ld">nix-ld</a>.</p>
<p>This can be enabled by updating your NixOS config with:</p>
<pre><code>  programs.nix-ld.enable = true;</code></pre>
<p>Directly running the same binary again leads to a different error message:</p>
<pre><code>$ ./a.out
cannot execute ./a.out: You are trying to run an unpatched binary on nixos, but you have not configured NIX_LD or NIX_LD_x86_64-linux. See https://github.com/Mic92/nix-ld for more details</code></pre>
<p>As the nix-ld readme suggests, we can set <code>NIX_LD</code> with a <code>shell.nix</code>:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>pkgs.mkShell <span class="op">{</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_LD_LIBRARY_PATH</span> <span class="op">=</span> pkgs.lib.makeLibraryPath <span class="op">[];</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_LD</span> <span class="op">=</span> pkgs.lib.fileContents <span class="st">&quot;</span><span class="sc">${</span>pkgs.stdenv.cc<span class="sc">}</span><span class="st">/nix-support/dynamic-linker&quot;</span><span class="op">;</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>entering this with <code>nix-shell</code>, and running this:</p>
<pre><code>$ ./a.out
hello world</code></pre>
<h3 id="another-workaround-patchelf">Another Workaround: patchelf</h3>
<p>Another way to work around the program is to just patch the binary directly.
(This is typically how precompiled binaries are handled in nixpkgs packages).</p>
<p>This can be done with <a href="https://github.com/NixOS/patchelf">patchelf</a>. Again, adding it to PATH with:</p>
<pre><code>nix shell nixpkgs#patchelf</code></pre>
<p>then e.g.¬†copying the interpreter from the output of <code>ldd</code> above:</p>
<pre><code>$ patchelf --set-interpreter /nix/store/anlf335xlh41yjhm114swi87406mq5pw-glibc-2.38-44/lib64/ld-linux-x86-64.so.2 ./a.out</code></pre>
<p>and running the binary:</p>
<pre><code>$ ./a.out
hello world</code></pre>
<h4 id="automatic-patchelf-in-nix-packaging-autopatchelfhook">Automatic patchelf in Nix Packaging: autoPatchelfHook</h4>
<p>When writing Nix packages, nixpkgs has an <a href="https://nixos.org/manual/nixpkgs/stable/#setup-hook-autopatchelfhook">autoPatchelfHook</a> which can take care of automatically performing tasks like this.</p>
<p>This makes more sense when packaging a prebuilt release of some program, but we can still apply it to this prebuilt <code>./a.out</code>:</p>
<p>e.g.¬†a <code>hello.nix</code> file with:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>pkgs.stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;hello-world&quot;</span><span class="op">;</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;1.0.0&quot;</span><span class="op">;</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    pkgs.autoPatchelfHook</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUnpack</span><span class="op">=</span><span class="cn">true</span><span class="op">;</span></span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span><span class="op">=</span><span class="st">&#39;&#39;</span></span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out/bin</span></span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a><span class="st">    cp </span><span class="sc">${</span><span class="ss">./a.out</span><span class="sc">}</span><span class="st"> $out/bin/hello</span></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>this can be built with <code>nix-build hello.nix</code> and the resulting patched binary run with <code>./result/bin/hello</code>.</p>
<p>The <code>autoPatchelfHook</code> is invoked as part of the ‚Äòfixup‚Äô phase.</p>]]></summary>
</entry>
<entry>
    <title>Experience Updating the C Worksheet Project</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/programming/2024-05-18-experience-updating-the-c-worksheet-project.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/programming/2024-05-18-experience-updating-the-c-worksheet-project.html</id>
    <published>2024-05-18T00:00:00Z</published>
    <updated>2024-05-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Around a decade ago, I made a <a href="https://github.com/rgoulter/c-worksheet.vim">pretty neat project</a>:
a ‚Äúworksheet‚Äù user interface for simple C programs. ‚Äì By executing the worksheet, you get to see the program‚Äôs
output annotated alongside the source code.</p>
<p>An illustrative example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span><span class="op">*</span> argv<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> x <span class="op">=</span> <span class="dv">5</span><span class="op">;</span>                                      <span class="co">//&gt; x is int</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> <span class="op">*</span>px<span class="op">;</span>                                        <span class="co">//&gt; px is pointer to int</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  px <span class="op">=</span> <span class="op">&amp;</span>x<span class="op">;</span>                                        <span class="co">//&gt; px = 0x7ffc365efd5c = 5</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">*</span>px <span class="op">=</span> <span class="dv">3</span><span class="op">;</span>                                        <span class="co">//&gt; (*px) = 3</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  x<span class="op">;</span>                                              <span class="co">//&gt; 3</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  px <span class="op">=</span> <span class="dv">0</span><span class="op">;</span>                                         <span class="co">//&gt; px = (nil)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">*</span>px <span class="op">=</span> <span class="dv">5</span><span class="op">;</span>                                        <span class="co">//&gt; SEGFAULT</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  x<span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  printf<span class="op">(</span><span class="st">&quot;done.</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The <code>//&gt;</code> comments are automatically generated by the worksheet program.</p>
<p><a href="https://github.com/rgoulter/c-worksheet-instrumentor/?tab=readme-ov-file#worksheet-examples">More examples on the c-worksheet-instrumentor readme</a>.</p>
<p>The project consists of a ‚Äúc-worksheet‚Äù program which does all the heavy lifting of computing the C worksheet annotations, and a vim plugin which provides a nice UI for using the worksheet functionality.</p>
<p>I recently performed some maintenance on it to bring it up to scratch, &amp; to check that it‚Äôs in working condition.</p>
<p>You‚Äôd hope untouched code would stay working. ‚Äì Nothing changed, so nothing should have broken.<br />
In reality, since the project dependencies constantly get updated (e.g.¬†library dependencies, and system tools), some code needed to change in order to build the code from source.</p>
<p>Logging some thoughts here:</p>
<h2 id="updating-the-c-worksheet-instrumentor-scala-project">Updating the C Worksheet Instrumentor (Scala Project)</h2>
<p>The ‚ÄúC Worksheet Instrumentor‚Äù is the Scala part of the project which does the heavy work.</p>
<p>Overall, the changes I made involved:</p>
<ul>
<li><p>Getting the project to build again:</p>
<ul>
<li><p>Updating the <code>build.gradle</code> file to work with recent gradle releases.</p></li>
<li><p>Updating the dependency library versions from Scala 2.11 to Scala 2.12.</p></li>
</ul></li>
<li><p>Updating CI: Fixing mistakes in AppVeyor, removing TravisCI, and adding GitHub Actions support.</p></li>
<li><p>Upon this foundation, some more minor polishing:</p>
<ul>
<li><p>Adding files to work with the Nix package manager.</p></li>
<li><p>Tree-wide automated formatting of the codebase.</p></li>
</ul></li>
</ul>
<p>Most of the project was written in 2015 as part of my undergraduate dissertation.<br />
Since then, I did add CI/CD jobs to the project in 2018.</p>
<p>Implementation-wise:<br />
This ‚ÄúC worksheet instrumentor‚Äù project was implemented using Scala, &amp; a parser written with Antlr (which generates Java code from a grammar definition file). The tests were written using ScalaTest.</p>
<p>This tech stack is different-enough from ‚Äúonly Scala files‚Äù so as to make setting up the build files annoying.</p>
<p>For building this, I used gradle.</p>
<p>For Scala, I think the SBT (Scala Build Tool) is more common. <a href="/blog/posts/programming/2015-01-19-gradle-or-sbt.html">I wrote about my frustrations trying to set up the project with either back then</a>. (Since then, I moved to use gradle; I think because I was able to add a ProGuard configuration to gradle, but didn‚Äôt for SBT).<br />
‚Äì I wish I could say my conclusion of ‚Äúthey both suck‚Äù was sophomoric. Perhaps ‚Äúthey‚Äôre both painful to set up‚Äù would be a more precise and tactful way of expressing it.</p>
<h3 id="updating-gradle">Updating Gradle</h3>
<p>In this case, where the <a href="https://github.com/rgoulter/c-worksheet-instrumentor/commits/master/build.gradle">build.gradle file was written in mid-2015</a>, the up to date release of gradle <a href="https://gradle.org/releases/">would have been v2.3; whereas at the time of writing, it‚Äôs Gradle 8.7</a>.<br />
‚Äì I wasn‚Äôt able to use gradle 8.7 to run this old gradle file.</p>
<p>I‚Äôve since learned Gradle tooling itself does have solutions for ‚Äúdifferent projects depend on different gradle versions‚Äù: gradle supports generating a <a href="https://docs.gradle.org/current/userguide/gradle_wrapper_basics.html">‚Äúgradle wrapper‚Äù script</a>. This wrapper script will download &amp; invoke the appropriate gradle version.<br />
However, for my codebase, using a gradle wrapper generated by gradle 2.3 still ran into some problems:<br />
I couldn‚Äôt successfully run the gradle 2.3 wrapper using jdk 21. Not a big deal.<br />
Using jdk 8, I managed to at least build the project; but the tests failed due to a classpath error. (Presumably a transitive dependency updated with a requirement for a more recent Gradle version. ‚Äì There wasn‚Äôt a lockfile of versions used; although <a href="https://docs.gradle.org/6.8/release-notes.html#dependency-management-improvements">Gradle apparently introduced this feature in Gradle 6.8</a>).</p>
<p>Anyway.<br />
Since the code didn‚Äôt build, I stripped the <code>build.gradle</code> file down to its basics in order to get <em>something</em> to build.<br />
Previously, I had added code to the <code>build.gradle</code> related to shadowjar and proguard. (shadowjar would help to bundle dependency JARs all into one JAR file, and proguard could assemble a small JAR with stripped down dependencies). I recall adding these partly because I was frustrated with how slow the internet took to download a 20MiB JAR from GitHub Releases. And partly because I liked the idea of the distributed <code>lib/</code> dir having a single JAR.<br />
‚Äì Distributing software is hard. I knew less about that back then than I do now, I feel.</p>
<p>I was then able to get an LLM chatbot to help advise me on the changes I‚Äôd need to make to the <code>build.gradle</code> file for a more recent gradle.<br />
e.g.¬†it was able to explain to me to change from <code>jcenter()</code> to <code>mavenCentral()</code>, and syntax changes to the <code>dependencies {}</code> and <code>jar {}</code> blocks. This saves several minutes of time &amp; a search or two.</p>
<p>And since Scala 2.11 didn‚Äôt run with a recent Java Runtime Environment, I updated the code (and matching dependencies) to Scala 2.12.</p>
<p>In the end: <a href="https://github.com/rgoulter/c-worksheet-instrumentor/compare/cdd47b185df9690f9f5dde78d8f596b5c2af2296..74ceb4c1558450355488431bafe126641c0c480b">diff of changes to get the code to build</a>.</p>
<h3 id="updating-ci">Updating CI</h3>
<p>One thing I did do well with this project was to have a fairly good test suite.</p>
<p>I‚Äôd left the project in a state where it had CI jobs running on Travis CI, and on Appveyor.</p>
<p>I do appreciate that these CI services often will let you run jobs for free, if your repository is public.</p>
<p>The CI jobs I have for this project are almost trivial: install dependencies &amp; check that <code>gradle build</code> runs.</p>
<p>In the years since, Travis CI stopped running my jobs. So, I moved the builds for Linux/macOS to GitHub Actions.</p>
<p>The builds failed AppVeyor due to Java version issues.<br />
I got stuck for a moment since AppVeyor wasn‚Äôt reading the <code>appveyor.yml</code> file for build details. Deleting/recreating the AppVeyor sorted things out. (It had been something to do with AppVeyor‚Äôs behaviour for arbitrary git projects vs for GitHub-linked projects).</p>
<h3 id="adding-nix">Adding Nix</h3>
<p>The <a href="https://nixos.org/">nix package manager</a> has been a valuable tool to learn. It‚Äôs got a steep learning curve, but it‚Äôs very good at dealing with problems related to packaging. (Which, for developers, turns out to be <em>a lot</em>).</p>
<p>One of the ways that writing CI/CD can be frustrating is for cases where something works locally, but figuring out how to run it on a fresh host can be frustrating.<br />
With nix, this isn‚Äôt an issue. ‚Äì Indeed, the CI/CD job I added which used nix really is trivial: it installs nix, and then runs <code>nix build .</code>.</p>
<p>Another advantage with Nix is easy setup for isolated development environments. I remember reading blogposts like ‚Äúmy development setup for <lang>‚Äù. These days, it‚Äôs pretty much ‚Äúa formatter, a linter, a language server‚Äù. Using a <code>shell.nix</code> means it‚Äôs easy to make these tools available (i.e.¬†installed) when working on the project.</p>
<p>The difficulty I ran into adding Nix support for the project was due to differences between how gradle wants to manage dependencies, vs how nix wants to. Searching through the nixpkgs codebase, a common approach is to use some kind of <a href="https://nixos.org/manual/nixpkgs/stable/#maven">Fixed Output Derivation deps pattern</a> in order to deal with the idiosyncracies of each. (Also, gradle uses <code>~/.gradle</code>, and nix builds its packages with <code>HOME</code> set to a non-existant directory, so the <code>gradle.user.home</code> had to be explicitly set to avoid issues).</p>
<h3 id="minor-polishing">Minor Polishing</h3>
<p>With the code building from source, and CI/CD in working state so as to run the build/tests for each commit, changes can be made with the confidence that if anything breaks, CI/CD will be able to catch problems.</p>
<p>I spent time to add an ‚ÄúEnd to End‚Äù integration test: a test which called the command line program, and checked the results of the output. This was an improvement over the existing test suite, which ran the Scala code in-process.</p>
<p>I also noticed that some tests failed when running on macOS where <code>cc</code> defaults to <code>clang</code>.<br />
Turns out, some of the Worksheet functionality works with GCC but not Clang.<br />
So, I refactored the tests so that the relevant parts of the test suite could be run with either GCC or with Clang.</p>
<p>Another polish to add to the project was using <code>scalafmt</code> to ensure consistent code formatting across the project.</p>
<h3 id="chatbot-llms-often-useful">Chatbot LLMs Often Useful</h3>
<p>As mentioned, I found a chatbot LLM to be useful for helping to update the code.</p>
<p>To be honest, tasks like ‚Äúupdate CI/CD‚Äù or ‚Äúupdate the build file‚Äù are not glamorous: they might require knowing a fair amount about the tools, but the tools provide limited value.<br />
(Whereas e.g.¬†Nix is a powerful tool which lends itself to use cases outside of just ‚Äúbuild this project‚Äù, and so is worth taking the time to learn).<br />
‚Äì For these tasks, using chatbot LLMs helps make progress without having to spend a long time learning the tool.</p>
<p>e.g.¬†Since gradle files are written with the Groovy language (a Ruby-ish JVM language), and this is the only use of Groovy I have, it‚Äôs quicker to ask a chatbot ‚Äúplease write the Groovy code to‚Ä¶‚Äù than to spend time looking up Groovy syntax, and what methods Groovy lists have.</p>
<p>Where I found it limited, with the LLM I was chatting with, was when I was asking a dumb question (trying something that goes against the grain of a tool‚Äôs approach), the chatbot was more inclined to give me an answer that sounded helpful, than to push back and say ‚Äúno, it doesn‚Äôt work that way‚Äù.</p>
<h3 id="lost-context-and-knowledge">Lost Context and Knowledge</h3>
<p>Working on a project so intermittently means you suffer from losing context/knowledge of various parts of it.</p>
<p>Phrasing this in terms of risk and change: using something more unusual means there‚Äôs a higher risk that it‚Äôs more difficult to change if you need to.</p>
<p>The more implicit and magical something is, the harder it is to identify.</p>
<p>Scala is a complex language with a wide variety of sophisticated features.<br />
I haven‚Äôt had to change the Scala codebase all that much. However, I do appreciate its ‚Äòsophisticated‚Äô features, such as the pattern matching, and named arguments.</p>
<h2 id="updating-the-vim-plugin">Updating the Vim Plugin</h2>
<p>The C Worksheet is a neat idea, but it only really sense for the UI to be part of a text editor (rather than just listing annotated output on the command line).</p>
<p>I had written <a href="https://github.com/rgoulter/c-worksheet.vim">c-worksheet.vim</a> back in 2015.</p>
<p>Implementation-wise:<br />
The meat of the code was fairly straightforward: rather than leaning on vimscript, I used vim‚Äôs python commands in order to invoke Python code; and that Python code managed the interface between the Vim source and the c-worksheet output.</p>
<p>The upside to using vim‚Äôs python integration was not having to wrangle with vimscript to figure out how to interface it with the Scala program.<br />
The downside was that it was affected by Python‚Äôs less-than-smooth transition from Python 2 to Python 3.</p>
<p>In 2015, it was fine to use the python2 <code>pyeval</code>. In 2024, I needed to use the python3 <code>py3eval</code>.</p>
<p>Other than updating the Python code, the rest of the vimscript fortunately still worked. +1 to vim‚Äôs support backwards compatability.</p>
<p>I saw that Vim has a new native package management functionality, with commands like <code>:packadd</code>.<br />
However, I was using the <code>autoload</code> feature to defer loading much of my plugin‚Äôs loading, and using <code>ftplugin/c/</code> in order to provide my plugin functionality to C files.. ‚Äì Using <code>:packadd</code> is also a way of deferring when code gets loaded; but by loading the package when opening a C file, it wouldn‚Äôt then also load my plugin.<br />
‚Äì The intricacies of how vim loads its vimscript is something I didn‚Äôt entirely recall. (Albeit, I‚Äôve moved on to using Doom Emacs as my primary editor).</p>
<p>After updating the code, I took the time to write a few tests for the code.<br />
In this case, integration tests that checked the plugin could run <code>c-worksheet</code> against a ‚ÄúHello World‚Äù source file. (And some non-functional tests to check that the plugin behaves if the <code>c-worksheet</code> program isn‚Äôt available).</p>
<p>The main trouble I had with this was trying to setup CI/CD with Windows.<br />
The computer I use for day to day things is Linux. I happen to have Windows installed on another partition; but, I‚Äôm not very familiar with the Windows command line.<br />
(And also, Vim‚Äôs batch mode didn‚Äôt behave well on Windows; I was able to set up the tests using Neovim, but not Vim).</p>
<p>With hindsight, there are things I wish I‚Äôd done better. The code could have been written more defensively: e.g.¬†<code>pyeval</code> is gated behind vim‚Äôs <code>python2</code> option. My code doesn‚Äôt guard against this. Nor does it guard against whether the <code>c-worksheet</code> command can be run. And its ‚Äòservice management‚Äô is naive/sloppy; the interface with the C Worksheet Instrumentor is also naive/sloppy. ‚Äì The code was clearly thrown together to the level of ‚Äúit‚Äôs at least useful in some cases‚Äù, rather than ‚Äúit‚Äôs cleanly and robustly useful in as many cases as it can be‚Äù.</p>]]></summary>
</entry>
<entry>
    <title>Finally Playing Medal of Honor Airborne</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/games/2024-05-17-finally-playing-medal-of-honor-airborne.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/games/2024-05-17-finally-playing-medal-of-honor-airborne.html</id>
    <published>2024-05-17T00:00:00Z</published>
    <updated>2024-05-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I‚Äôd bought ‚ÄúMedal of Honor Airborne‚Äù on Steam many years ago, but had been unable to play it. Something about compatibility with my graphics card.<br />
My desktop runs Linux these days; Valve‚Äôs Proton works pretty well for Windows games, and ProtonDB said that MoHA ran just fine. So, I was able to give it a go.<br />
It more/less worked! Albeit, the game was frequently laggy (and occasionally crashed).</p>
<p>Mostly I didn‚Äôt like the game. Here‚Äôs what I thought of it:</p>
<h2 id="parachuting-and-its-effect-on-level-design">Parachuting and its Effect on Level Design</h2>
<p>The game is set during WW2, and you play as an American paratrooper.<br />
This enables the game‚Äôs key ‚Äògimmick‚Äô: when you start the mission, you parachute into the mission.</p>
<p>The levels are then designed in two parts: the first half is a somewhat open map you parachute into, and the second half is a more traditional/linear experience.<br />
Optimistically, this is a nice way to hedge a potentially risky game design choice: since the second half of each mission reverts to the traditional linear gameplay style, then at least there‚Äôs that if the parachuting mechanics don‚Äôt work well. (Pessimistically, it‚Äôs a conflict of design vision).</p>
<p>The ‚Äúparachute into the level‚Äù still feels relatively unique for mission-focused single-player shooter games.<br />
e.g.¬†multiplayer games like Battlefield feature parachuting.. and it‚Äôs a strategic aspect of the ‚Äúbattle royale‚Äù games like PUBG or Fortnite, etc.<br />
The Just Cause series features the player being able to fly around; but Just Cause is an open world game through to its heart, and its missions are a light layer on top.</p>
<p>To an extent, ‚Äúwell crafted experience‚Äù conflicts with ‚Äúopen world sandbox‚Äù.<br />
Medal of Honor generally prefers to aim for the cinematic former.</p>
<p>In MoHA, the level design ends up having a very open start, which branches off into more linear chunks where the player completes each objective. (e.g.¬†‚Äúdestroy the ammo cache‚Äù will be its own linear segment of a level; and ‚Äúclear the anti air defenses‚Äù will be a separate linear segment).</p>
<p>In some cases, the player can parachute right to the end of one of these segments; but, the mission objectives are heavily defended, and then you don‚Äôt get to parachute into the next objective either.</p>
<p>Overall.. I thought this was a pretty neat game mechanic.<br />
I don‚Äôt think it adds enough to the game to be worth implementing.</p>
<h2 id="downsides-to-the-parachuting-as-implemented-checkpoints-and-progress">Downsides to the Parachuting as Implemented: Checkpoints and Progress</h2>
<p>As it‚Äôs implemented in MoHA, the parachuting did lead to some frustrating gameplay, or at least how it interacted with checkpoints.</p>
<p>Checkpoints are based on completing objectives.<br />
If you die before completing the (initial) objectives, you‚Äôll parachute into the level again.<br />
And all the enemies on the map respawn.<br />
AFAICT, enemies continuously spawn (up to a limit), based on ‚Äòmorale‚Äô.<br />
‚Äì This wasn‚Äôt immediately clear to me, but it did frustrate me a bit. It meant that I might spend a significant amount of time killing enemies and making progress, only to have that all undone if I died before reaching an objective. (In contrast, if there are two objectives close together, you can get checkpoints very quickly).</p>
<p>If there were a finite number of enemies, then this wouldn‚Äôt run into the same frustration. As is, it means that ‚Äúturtling‚Äù is just the wrong way to play the game.<br />
If checkpoints were more frequent, this wouldn‚Äôt run into the same frustration.</p>
<h2 id="shooter-mechanics">Shooter Mechanics</h2>
<p>These felt a bit clunky to me.</p>
<p>The first thing that seemed clunky was the ammo.<br />
In the earlier Medal of Honor Allied Assault, enemies drop ammo for the guns they use. An enemy with a rifle drops rifle ammo, an enemy with a submachine gun drops submachine gun ammo. You didn‚Äôt get to swap to use <em>their</em> rifle.<br />
In MoHA, the drops from enemies seem random. They might drop their weapon, in which case you can swap to use that. You don‚Äôt pick up ammo for your rifle from their rifle. They might drop health. They probably don‚Äôt drop anything at all.</p>
<p>But since the enemies continuously spawn (until pushed back), this meant my initial experience with the game was running out of ammo shooting at the enemies, and not being able to find ammo pickups.</p>
<p>The game does compensate for this by giving your pistol infinite ammunition.</p>
<p>You avoid these problems by taking a somewhat more aggressive approach:<br />
By pushing up, the enemies will ‚Äòretreat‚Äô; once pushed back to the objective, the enemies stop respawning.</p>
<p>The most strikingly clunky thing about the game (compared to shooters since) is the ‚Äúaim down sights‚Äù mechanic.. the intended use is for the player to use this behind cover, and then peek around cover to shoot enemies. For this, the game keeps the player standing, and the movement keys are used for ‚Äòpeek‚Äô.<br />
In practice, players will want to move about while using this ADS. MoHA supports this, but it‚Äôs not the default, so it feels clunky.</p>
<h2 id="the-flow-when-it-worked">The Flow, When it Worked</h2>
<p>Once I figured out the idiosyncrasies.. the gameplay loop that ended up mostly working was reasonable: rush up to cover near an enemy (or ideally, to a position which flanks the enemy), do the shooting while trying to not get shot, rinse &amp; repeat.</p>
<h2 id="rocket-spam-from-enemies-got-tiring-quickly">Rocket Spam from Enemies Got Tiring Quickly</h2>
<p>There are enemies with rocket launchers.<br />
These would spam rockets, which I found annoying.<br />
I found this particularly obnoxious because there was such a high duration between checkpoints.</p>
<h2 id="story">Story</h2>
<p>The game has a weird mix of tone.</p>
<p>Videogames are supposed to be fun. (Except maybe the pretentious artsy bullshit ones). War and history is horrible.<br />
So, games with historical parts aren‚Äôt going to be fully realistic. Some games aim to be simulations, some aim to be more arcade-like.</p>
<p>I reckon the game series that had a great balance between arcade and realistic is ‚ÄúBrothers in Arms‚Äù.<br />
BiA‚Äôs is a tactical shooter.. in the sense that you can‚Äôt just run up and shoot the enemies; it‚Äôs ‚Äòtactical‚Äô in the sense that the levels are designed around the idea of using your squad‚Äôs fire team and assault teams to suppress and flank enemy positions.<br />
Rather than ‚Äú1 man vs 100 soldiers‚Äù, it‚Äôs closer to ‚Äú6 soldiers vs 5 soldiers; then another 5 soldiers; and another 5 soldiers‚Äù.<br />
Regarding history, the level design mimicks the after-action reports from the fight themselves. So reading the AAR feels familiar.<br />
Regarding story.. by being very <em>subtle</em>, the game is much more impactful about your squadmates dying.</p>
<p>The story of MoHA is very ‚Äúcheesy war movie‚Äù in its tone.<br />
It has no weight because the gameplay is so unrelated.<br />
At the start of every mission, the plane you fly in gets shot and its engines are on fire. Because that‚Äôs what happens in war movies.<br />
But there‚Äôs never any consequence to this.. so you get this ‚Äúludo-narrative dissonance‚Äù. The conflict between the game (where there‚Äôs no risk) vs the story (where it‚Äôs super risky).<br />
‚Äì Whereas, there are ways to ‚Äòmarry‚Äô the gameplay and the story. e.g.¬†in Far Cry 5, as you progress through the story, you get kidnapped by the henchmen of the boss in each region. For the boss with the theme ‚Äúillusion of control‚Äù, the gameplay allows you to (temporarily) defer the kidnapping; giving you the illusion that you have more control than you really have.</p>
<p>MoHA‚Äôs battlefield is constantly filled with noisy combat; dozens of soldiers in every direction. NPC allies constantly getting gunned down, in game and in cutscenes.<br />
It has no weight at all.<br />
NPC allies just feel like ‚Äúprogress markers‚Äù more than anything else.</p>
<p>I guess some would say MoHA is realistic in the sense that you can‚Äôt just run and gun here, either.<br />
But, say, your pistol has infinite ammo, you can start missions with a loadout of German weapons, there are enemies which spam an endless stream of rockets at you, and enemies who carry MG42s and have ‚Äòbulletproof‚Äô gas masks or something.</p>]]></summary>
</entry>
<entry>
    <title>The Three Difficult Things about Nix</title>
    <link href="http://www.rgoulter.com/blog//blog/posts/programming/2024-05-09-the-three-difficult-things-about-nix.html" />
    <id>http://www.rgoulter.com/blog//blog/posts/programming/2024-05-09-the-three-difficult-things-about-nix.html</id>
    <published>2024-05-09T00:00:00Z</published>
    <updated>2024-05-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://nixos.org/">Nix</a> is a fancy package manager, with a bunch of powerful features.</p>
<p>One thing it‚Äôs notorious for is its steep learning curve.</p>
<p>Although generally, learning to write Nix code is difficult for the same reasons a lot of other tech is difficult (e.g.¬†you have to be aware of what‚Äôs possible, and unfamiliar things are always going to be have friction compared to what‚Äôs familiar), I reckon there are a bit more specifically three reasons why Nix is difficult.</p>
<p>Any difficulty someone is having when trying to use Nix almost always falls into one of:</p>
<ol type="1">
<li><p>difficulty with the Nix package manager itself.</p></li>
<li><p>difficulty with the Nixpkgs codebase.</p></li>
<li><p>difficulty with software and how it mixes with Nix‚Äôs approach.</p></li>
</ol>
<p>Discussing this a bit more:</p>
<h2 id="three-difficulties">Three Difficulties</h2>
<h3 id="difficulty-with-the-nix-package-manager-itself">Difficulty with the Nix Package Manager Itself</h3>
<p>When learning about Docker, you‚Äôll need to learn about the difference between an ‚Äúimage‚Äù and a ‚Äúcontainer‚Äù.</p>
<p>Or when learning Terraform, you need to build an intuition for how the providers model and manipulate the resources being declared.</p>
<p>With the Nix package manager, there are also a bunch of concepts to learn.</p>
<p>Nix‚Äôs approach to package management is quite different to how traditional package managers have done things. So, with Nix, you end up bumping into weird terms like ‚Äúderivation‚Äù, ‚Äúinstantiate‚Äù, ‚Äúrealise‚Äù.</p>
<p>I disagree with many who say things like ‚ÄúI like the idea of Nix, but wish I could write it in JavaScript‚Äù. The Nix expression language is <em>essentially</em> a ‚ÄúJSON + function (+ imports)‚Äù, similar to languages like Jsonnet (which I don‚Äôt hear the same complaints about).<br />
But, I agree it‚Äôs fair to say that the Nix expression language‚Äôs laziness can lead to code that‚Äôs very ‚Äúclever‚Äù (and hard to read). And concepts like ‚Äúpartially applying a function‚Äù are common in functional programming, and unusual/exotic otherwise.<br />
And e.g.¬†it took me some time to wrap my head around why many Nix files would open with <code>{ pkgs ? import &lt;nixpkgs&gt; {} }:</code>.</p>
<p>Much of the community has adopted use of Nix Flakes.<br />
There are several things about flakes that are not very ergonomic, and not all that intuitive, although overall I think they‚Äôre not too difficult to understand, and using flakes comes with more benefits than disadvantages.</p>
<h3 id="difficulty-with-the-nixpkgs-codebase">Difficulty with the Nixpkgs Codebase</h3>
<p>Nixpkgs is somewhat comparable to the ‚Äústandard library‚Äù of Nix.</p>
<p>A lot of Nix code will typically use common functions in nixpkgs. e.g.¬†functions like <code>pkgs.mkShell</code> or <code>buildPythonPackage</code> <a href="https://wiki.nixos.org/wiki/Python">on the NixOS wiki page for Python</a> are a part of the nixpkgs codebase.</p>
<p>Nixpkgs is a large codebase. It‚Äôs not immediately clear what‚Äôs useful and available. As you dive deeper into Nixpkgs, you quickly see it‚Äôs filled with a mixture of similar-but-different and often ‚Äúclever‚Äù solutions to similar problems.</p>
<p>I think this is responsible for a lot of difficulty with <em>writing</em> Nix code. (Although I think e.g.¬†<a href="https://nix.dev/">nix.dev</a> now does a lot to ease over the rough edges of getting started).</p>
<p>If you provided <code>pkgs.mkShell</code> in JavaScript, it would still be confusing to use.</p>
<p>It can be difficult to figure out how to properly access and manipulate code in nixpkgs.</p>
<p>The <code>lib.customisation</code> <a href="https://nixos.org/manual/nixpkgs/stable/#sec-functions-library-customisation">lib functions</a> are both confusing to understand and related to <code>.override</code> and <code>.callPackage</code> functions which are extremely common when dealing with Nix packages.</p>
<h3 id="difficulty-with-software-and-how-it-mixes-with-nixs-approach">Difficulty with Software and How it Mixes with Nix‚Äôs Approach</h3>
<p>This sorta applies more to NixOS than to Nix. (If someone runs into problems with Nix on non-NixOS, they can always just do things without touching Nix).</p>
<p>One of the reasons Nix is difficult is that when something goes wrong, it often requires a deeper and broader understanding of what‚Äôs going, compared to other Linux systems. ‚Äì You might need to understand what nix is doing, what the nixpkgs code in use is doing, or what the system-under-nix is doing.</p>
<p>As a novice programmer, I could get by with copying and pasting snippets from StackOverflow (after searching for whatever error message I encountered). ‚Äì Not so if you run into problems when on NixOS!</p>
<p>Nix doesn‚Äôt <em>replace</em> other Linux things (like <code>make</code>), so much as it uses them in an uncommon way. ‚Äì I recall reading a comment where someone‚Äôs cold shower against Nix hype was that it was ‚Äújust‚Äù using <code>make</code> &amp; symlinks. ‚Äì Nix and NixOS mean an additional layer that may need to be understood.</p>
<p>Probably the most common example of this problem is that it‚Äôs difficult to run pre-built binaries on NixOS, unlike on most other Linux distributions. On other Linux systems, shared libraries get installed into a global location, and pre-built binaries are able to find these. Whereas NixOS puts shared libraries in isolated locations, so pre-built binaries don‚Äôt run without some massaging.</p>
<p>It can be extra frustrating that something is easy on other Linux distributions but may be difficult with Nix/NixOS.</p>
<h2 id="other-remarks">Other Remarks</h2>
<p>There are sometimes difficulties people run into with Nix that don‚Äôt really fit into these categories. e.g.¬†sometimes a tool takes an approach which doesn‚Äôt map well to how Nix wants things done. But, if someone has the above difficulties covered (they‚Äôve got a good understanding of Nix, the relevant parts of Nixpkgs, and of what the program is doing), then the problem is more likely to feel tractable.</p>
<p>Another way of putting the above difficulties is ‚Äúyou gotta know what you‚Äôre doing (if something goes wrong)‚Äù.<br />
And for many developers, there‚Äôs an expectation of being able to get pretty far without needing to spend a long time learning all the details. (Often this is a pretty good strategy!).</p>
<p>I think to some extent, some of that difficulty is fundamental.<br />
Nix provides benefits like ‚Äúwill work the same way next time you run it‚Äù, and this demands it comes with a level of strictness.</p>]]></summary>
</entry>

</feed>
