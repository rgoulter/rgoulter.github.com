<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2016-06-20T00:00:00Z</updated>
    <entry>
    <title>Brief Thoughts on Purpose of Writing, Arguing</title>
    <link href="http://www.rgoulter.com/blog//posts/meta/2016-06-20-brief-thoughts-on-purpose-of-writing-arguing.html" />
    <id>http://www.rgoulter.com/blog//posts/meta/2016-06-20-brief-thoughts-on-purpose-of-writing-arguing.html</id>
    <published>2016-06-20T00:00:00Z</published>
    <updated>2016-06-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 20, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/persuasion.html">persuasion</a>
    
</div>

<blockquote>
<p>There’re two kinds of argument-posts: preaching to the choir, or convincing the doubtful.</p>
</blockquote>
<p>I came across this remark on a blogpost, &amp; it’s kindof interesting, because <em>does the second kind actually exist?</em><br />
(The above remark was followed by “so don’t use these words when describing your opponent”; essentially, a call for civility, which is an interesting topic in itself).</p>
<p>I mean. Is it common for people to come across an article, and say “you know what, I was wrong”? I feel Haidt persuasively argues in his “Righteous Mind” book that humans are driven foremost by intuition, and reason post-hoc tries to make the reason look good.</p>
<p>– I do believe people can <em>evaluate</em> whether arguments make sense or not; at least in the case where it’s about something they’re not tribal about. (Implicitly, though, if an argument on your side is bad, it’ll disappear).<br />
There’s value in two people arguing publicly, even in absense of persuasion, though: while, yes, the truth each believes is made stronger/richer by contact with the opposition; globally, the audience gets to pick/choose the merits of each side. (The world is complicated, and having a nuanced understanding of things is more likely to fit better than a simplified ideological viewpoint).</p>
<p>And yet. I don’t think <em>persuasion</em> (of a disinterested audience) happens via the rational arguments, as such.<br />
– For an argumentative post to be reasonable is a high cost, though: It’s easy to preach to the choir by merely saying “our opponents are stupid, the world would be better without them”. It’s much harder to construct sound reasons which support this. (The easiest way to do this is to showcase the worst of your opponent. “Look, they’re bad”. But this is necessarily met with a showcase of the worst of ‘your side’, so). – Rather, if rationality has much to do with persuading the elephant, then the ‘side’ which is able to keep the strongest guise of rationality (for the longest) is more likely the ‘right’ side.<br />
(That all pre-supposes this is about arguments between tribes. I’d guess most people in whichever community are largely non-tribal; and if they pay attention to the argument at all, somewhat serve as the disinterested audience).</p>
<hr />
<p>Yeah, there’s a danger ‘danger’ in attention-rewarding metrics like Twitter’s Retweets/Favourites, Facebook’s Shares, etc. is that it incentivises content to seek-attention; if ‘attention to post’ isn’t related to ‘quality of post’, this disincentivises writing quality posts. – Rather, writing posts for the sake of writing posts is in defiance of the incentives of the social media.</p>
<p>There’s also a danger in ‘everything is an argument’, in a tribalistic viewpoint, where everything must be about politics all the time.. the goal becomes less about ‘finding truth’, having good discussion and asking questions, but instead asking “how do I win? how does our side win?”.<br />
– In that sense, it’s okay that some posts are written which don’t appeal to those outside the author’s in-group. (An echo-chamber, though, where the author &amp; audience never engage/read other viewpoints.. there’s also good cause to be concerned about that).</p>
]]></summary>
</entry>
<entry>
    <title>Recommendation: Rick and Morty</title>
    <link href="http://www.rgoulter.com/blog//posts/narrative/2016-06-12-recommendation-rick-and-morty.html" />
    <id>http://www.rgoulter.com/blog//posts/narrative/2016-06-12-recommendation-rick-and-morty.html</id>
    <published>2016-06-12T00:00:00Z</published>
    <updated>2016-06-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 12, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/media.rick%20and%20morty.html">media.rick and morty</a>
    
</div>

<blockquote>
<p>“What? It’s way existential.” – Cher, describing Ren &amp; Stimpy, <em>Clueless</em></p>
</blockquote>
<p>This is a strong,weak recommendation for Rick and Morty.<br />
It’s not completely outstanding/amazing; but where it is, it’s great, and when it’s not it’s still not bad. (Overall, the start of Season 2 is much stronger than the rest).</p>
<h2 id="without-spoilers">Without spoilers</h2>
<p>Rick &amp; Morty (R&amp;M) is a cartoon, loosely in the spirit of, say, Futurama. Episodic adventures, with sci-fi themes. Loosely, Rick &amp; Morty are bastardised Doc &amp; Marty from Back to the Future.</p>
<p>It’s quite subversive:<br />
It delights in being utterly gross. A lot of the humour is crass, or quite deliberately making the audience uncomfortable. (Family Guy’s <a href="https://www.youtube.com/watch?v=Y9j3heYZAk8">Peter Griffin ‘knee injury’</a> is the same kind of humour).<br />
It’s also subverts tropes &amp; narrative expectations. Usually. – I wouldn’t exactly call the show ‘meta’, but it’s almost as if it plays around with tropes as if they’re as integral to a narrative as its plot &amp; characters.</p>
<p>Often the characters get into quite a mess, it’s emphasised how bad the mess is, then the mess gets worse. Rick’s kindof like a cat-in-the-hat, I guess. – Something I found a bit discomforting about the show, though, at first: you tend to expect that the mess gets cleaned up, that all is restored with the world, that the ‘hidden world’ remains hidden. – R&amp;M doesn’t particularly bother, it doesn’t care.</p>
<p>I can’t say the <em>setting</em> of R&amp;M is as inherently intriguing as, say, “Inside Out”, “Zootopia” or “The Wire”. – It’s sci-fi, Rick has a portal gun to visit other realities; various magic items to present or solve problems. – What’s <em>nice</em> is that the magic is never used as a means-to-an-end, hardly a deus-ex-machina without further problems.<br />
– The <em>problems</em> it presents are quite ‘fun’ in themselves.</p>
<p>So, at times, it’s kindof a filthy show.<br />
And with its massive universe (infinite alternate realities, astronomical number of worlds within the reality), it’s certainly got an “everything is arbitrary” existential bitterness to it. It adores slaying sacred cows, more than it adores anything else.</p>
<p>And yet, at times, it’s capable of being quite sweet.</p>
<hr />
<p>I can’t say it’s a show where it’s valuable for its plot, but just to discuss more specifics:</p>
<h2 id="with-spoilers">With Spoilers</h2>
<p>Some of the episodes are pretty cute.</p>
<h3 id="gods-batteries">God’s Batteries</h3>
<p>I quite liked the “Recursive Other World” theme they use several times.<br />
My favourite was this one:</p>
<blockquote>
<p>You, as a brilliant scientist, make an “electric battery”. It’s actually a mini-universe, in a time-dilation field; you found a planet where you introduced electricity.<br />
This planet produces electricity for themselves, but also produce enough electricity (as a ‘by-product’ of the electric generator you gave them) for their mini-universe to function as a “battery” for you.</p>
<p>Problem: A brilliant scientist finds a way to generate electricity without the by-product. (i.e. your battery loses produces no charge). – They make an “electric battery”. It’s actually a mini-universe…</p>
</blockquote>
<p>– At the end of the episode, after Rick’s visited the battery-planet (and the battery-planet’s battery-planet..; and the battery-planet’s scientist realises the recursion), he asserts that his battery now works. “It’s simple: either I return &amp; find a broken battery [which I dispose of], or I find my battery works.” Shots are shown of the battery-planet’s people working as before, and a very bitter battery-planet scientist.</p>
<h3 id="e-pluribus-unum">E Pluribus Unum</h3>
<p>By far the best Rick and Morty episode was S02E03.<br />
It’s gross. At times not great. Packs a lot of fun questions about some tough issues. And just a little heart-wrenching/sweet. – Kinda like R&amp;M on the whole.<br />
It’s also the one of the few times we see can sympathise with Rick.</p>
<p>Roughly, the sci-fi toy was this:</p>
<blockquote>
<p>The idea of suppressing an individual’s freedom is gross, right?</p>
<p>Wouldn’t a collectivist-system be much better, though? (If all were operated by one collective mind:) People could fulfill the roles they’re best suited to. The world would be at peace. No crime, etc.</p>
<p>Short of that, people are destructive and awful: people easily fight against each other, separating into tribes based on arbitrary, insignificant differences.</p>
</blockquote>
<p>Not exactly a ringing criticism of J.S. Mill,<br />
but I guess what was great about the episode wasn’t its sci-fi parts.</p>
<h3 id="recoverability">Recoverability</h3>
<p>Probably the most striking sci-fi toy R&amp;M makes use of, (apparently the 2nd episode they wrote), was from the episode “Rick Potion #9”. Basically:</p>
<blockquote>
<p>Given an infinite number of alternate-universes, and the ability to travel between them:<br />
If ever you make a bad mistake, you can ‘probably’ find a universe where things are exactly the same as your universe, except: no bad mistake, alternate-you is indisposed. (Chances decreasing to infinitesimally small after some iterations).</p>
</blockquote>
<p>Everything is arbitrary, huh.</p>
]]></summary>
</entry>
<entry>
    <title>Reflection on Haskell Programming</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-06-08-reflection-on-haskell-programming.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-06-08-reflection-on-haskell-programming.html</id>
    <published>2016-06-08T00:00:00Z</published>
    <updated>2016-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June  8, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.haskell.html">programming.haskell</a>
    
</div>

<p>With my free time lately I’ve been tinkering on <a href="https://github.com/rgoulter/expenses-csv-utils">a Haskell project of mine</a>.<br />
Depending on which side of the 80-20 rule you look at, I’d say I’m “about 20% done”.</p>
<p>I love many things about Haskell, but, I didn’t have any proper pet projects written in Haskell.<br />
– The impetus to a Haskell project, I guess, is that for quick/dirty projects Python is a much nicer choice. (Depending on your likelihood of revisiting a project after several months/years, it may be worth considering things like “maintainability” or “ease of refactoring”, where Haskell is a much better choice).</p>
<p>Any language will have drawbacks, and Haskell certainly has some minor ones (like weird record syntax, Cabal-Hell, etc.),<br />
the <em>BIG</em> drawback to Haskell is its pure functions. – You <em>can’t</em> just slap a <code>printf</code> function in your function. (Concepts like laziness also mean that tracing/debugging a function could result in different results than if you don’t).<br />
– The community is a bit mixed: some Haskell folk love Category Theory and some others are amazed things compile; documentation often tends toward academic/unhelpful. There’re many concepts to understand beyond the basics (like Lenses, Monad Transformers (let alone monads, like the State Monad), and potentially things like Template Haskell, Arrows, etc.).<br />
etc. etc.</p>
<p>On the other hand, of Haskell they say “if it compiles, it works”.</p>
<h2 id="first-half-parsers">First Half: Parsers</h2>
<p>The script-ish part of the project parses in some file format, processes this and outputs it as CSV.</p>
<p>For writing parsers from scratch, Haskell (or some ML-family language) is a good choice. I used “megaparsec”, a purported successor to the classic parsec library. “parsec” for “Parser Combinator”.<br />
’cause Parsec is cool, and I hadn’t had much experience writing parsers.</p>
<p>– The file format here is so trivial that (as is) regular expressions would do the trick. (But then I would’ve had two problems).<br />
In any case, I didn’t run into much trouble writing the parser.</p>
<p>It would’ve been better if I’d written unit-tests for the parser earlier.</p>
<p>In this case, the program was so quick/simple that ‘debugging’ wasn’t necessary.</p>
<h2 id="second-half-ncurses-ui">Second Half: NCurses UI</h2>
<p>Okay, so. If it’s not clear that writing this project has been an excuse for “playing with things I’ve not used before”, maybe the choice of a NCurses-base UI gives that away.</p>
<p>Haskell’s <a href="https://hackage.haskell.org/package/brick">brick</a> looked interesting. It constructs/defines UI declaratively. (Loosely comparable to Elm, minus FRP concepts).<br />
– As with most “I’m just learning this” programming, I was able to iterate on some of the sample programs. (During which, I learnt details of the API anyway, so).</p>
<p>I’d say most of the ‘programming’ I did involved writing out types, &amp; types of functions in particular.<br />
Haskell has a value called <code>undefined</code>, which lets you quickly stub functions. (It throws an error if evaluated. Scala has <code>???</code> which does the same thing. I think these are great). – With a type signature, you roughly know whether you can construct the output given the input; &amp; as you implement this, what other functions would be useful.<br />
In order to test anything useful, this is rather bottom-up. The Python hacking I do would be the opposite.</p>
<p>There was one case where code compiled, but didn’t pass its unit tests. – Though, I’d left a comment saying “To Be Implemented: (some computation)”, and this computation was what was needed for the test to pass.</p>
<p>– Only a few times did I ever think “I wish I could put a printf there”.<br />
In one case, I was using unsafe pattern matching (e.g. assuming an input list had at-least 2 elements), &amp; this didn’t hold. (I should’ve either relaxed this assumption, or made it so that the types I used explicitly held this assumption). – Again, I’d left a comment somewhere critical saying “To Be Implemented..”.<br />
In another, my UI was receiving a new input, but not updating the UI components to show this.</p>
<p>What’d I think of NCurses/Brick? Not bad. The trickiest part seems to be keeping the event-handling function to a maintainable size.</p>
<h2 id="the-next-80">The Next 80%</h2>
<p>Sure, I’d rather maintain a Haskell project than a Python project. But that Haskell’s compiler is so good allows you write pretty unclear code, too.<br />
– I’d certainly like the code to be prettier.</p>
<p>I’d also expect to iterate on the UI to see if it could better fit how I’d like to use it, but anyway.</p>
]]></summary>
</entry>
<entry>
    <title>Organising Things</title>
    <link href="http://www.rgoulter.com/blog//posts/meta/2016-06-07-organising-things.html" />
    <id>http://www.rgoulter.com/blog//posts/meta/2016-06-07-organising-things.html</id>
    <published>2016-06-07T00:00:00Z</published>
    <updated>2016-06-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June  7, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/organising.html">organising</a>
    
</div>

<p>From the wisdom I’ve picked up so far:<br />
Computer Science is about managing complexity.<br />
Programming is about breaking larger, complex problems down into smaller, solveable problems. (Which involves Naming, Abstracting, Composing).<br />
The best program is no program; second to that, the best program is a small a program as possible.<br />
When coming up with a data-structure/algorithm for a problem, it helps to consider what operations you often do, and to make these as cheap as possible.<br />
The tools you use are related to how you think about the problem, to how you model the domain.<br />
The more specific a problem you solve, the more ‘elegant’ your solution can be.</p>
<p>I’d like to give some considerations in this post about organising things.<br />
– Maybe it helps to consider that, in the above: “program”, “code”, or “tool” work interchangeably.</p>
<p>At the moment I’m writing a program to track/organise where I’ve spent my money[1]. Part of this ‘organising’ would involve categorising/tagging expenses. (e.g. “Spent 100 on Steam” prob’ly not as essential as “Spent 10 on phone top-up”).</p>
<p>In a sense, “organising stuff” is rather an ubiquitous problem. (Wisdom from my Algorithms professor: algorithms are boring, but algorithms are everywhere). – Here I’d like to consider just the organising for consuming content:</p>
<h1 id="webpage-bookmarks">Webpage Bookmarks</h1>
<p>There are basically two ‘operations’ you need when dealing with links:</p>
<ul>
<li><p>storing a bookmark to a page, with some meaningful information,</p></li>
<li><p>finding this page later.</p></li>
</ul>
<p>If you were to store every webpage you ever read, with all the meta-information you’d later value, then your “organisation problem” is solved. The trouble is, or the trade-off you’d have to pay to get this, is it’d be an expensive chore to bookmark literally everything. (Also, it’s tough to know <em>what</em> you’ll find interesting about the link much later on).</p>
<p>– My current ‘approach’ to this is basically only saving bookmarks after I find I’d refer to “something I read months ago”. That’s a somewhat expensive ‘cache-miss’. (“searching browse history” would work for this if you only ever use one computer/OS/browser..). (As well as saving “obviously interesting” things, like programming tutorials, or things that’d’ve been useful in previous arguments).</p>
<h2 id="tools-for-links">Tools for Links</h2>
<p>The ‘tools’ helping me with links at the moment:</p>
<ul>
<li><p>Pinboard - Let’s you tag bookmarks.</p>
<ul>
<li>Secondarily, if you search ‘globally’ for tags, it’s a nifty way for discovering what links are popular among tags. e.g. <code>t:haskell</code> for popular articles about Haskell.</li>
</ul></li>
<li><p>Pocket - Let’s you enqueue links as “to read later”.<br />
(Although I’m kinda bad at the “reading later” part).</p></li>
<li><p>Facebook/Twitter - While really poor at the archival stuff, social media (and to a lesser extent, messaging apps) is nice for content discovery. (Albeit, I find it’s rather tribal, much of the time). – This way benefits from “Share generously, bookmark conservatively”.</p></li>
<li><p>RSS Reader - For the blogs which do have RSS feeds. Unfortunately, in order to prevent other sites copying blog content, many blogs won’t include the full blogpost content in their RSS feed, which somewhat defeats the purpose. (Scraping scripts can mitigate this, but scraping blogs is a cat-and-mouse game).</p></li>
</ul>
<p>– There’re other tools/techniques people can use (e.g. HN/Reddit, or sharing aggregates of links on a blog), but the above works for me. (Twitter in particular, while full of tribal garbage fires of cancer, is also pretty good at content discovery; stuff which is popular on HN/Reddit can find its way onto Tweets, too).</p>
<h2 id="tags-tag-atrophy">Tags &amp; Tag Atrophy</h2>
<p>Pinboard uses ‘tags’ for organising things, rather than hierarchical categories.<br />
Tags are less constrained than categories. (Bookmarking by folders/subfolders is more disjoint, say). And you could emulate categories using tags if you’d like.</p>
<p>– The main disadvantage to tags is the ‘atrophy’.<br />
I find there’s a bigger difference between what tags you’d think something you stored would have compared to what category you’d expect to find it in. (I’d think there’s some atrophy to categories, too, but not as quickly, not as badly).<br />
– Pinboard does let you ‘organise’ through your collection (or subset of) to quickly edit through your bookmarks; that strikes me as a useful tool.</p>
<h1 id="books">Books</h1>
<p>With books, the problem isn’t particularly “how can I recall what I’ve read” (although this is useful for non-fiction); it’s “how do I organise what to read next?”.<br />
– This’ll vary depending on how you read (&amp; seek books to read). Maybe it’s ok to consider a TBR (or even “want to read”) pile as large/unsorted. But “what’s a book I’d enjoy” is a similar question. – For myself, I recently got around 30 books from a Kobo sale, whereas before I’d usually not keep a TBR pile of more than 2-3.</p>
<p>The Kobo eReader apps ought to have bookshelves. (IIRC, the iOS version does, the Windows Phone version doesn’t). Bookshelves do the job as well as can be hoped, although adding/removing books to shelves can be quite clunky/awkward.</p>
<p>I like GoodReads; at least for rating books/reviewing.[2]<br />
– GoodReads lets you mark a book as “Want to Read”, “Currently Reading”, or “Read”. – I’d consider “TBR” as “book I own” (or “book I’ve been issued from the library”), which fits somewhere between the first two. (“DNF” is another state, somewhere between the last two). – GoodReads does let you add arbitrary shelves, so it’s common to emulate these states as shelves.</p>
<p>In terms of discovery, both vendors like Kobo and review sites like GoodReads can (try to) compute/guess what books you might like, based on what books you’ve liked already. – Without information like that, it’s hard to consider tools which could improve <em>that</em> problem.<br />
– I guess, drawing analogy to finding interesting links on Pinboard: for fiction, if users tagged books by their tropes, then you could search a trope to find similar books. (Sounds <a href="http://www.mayarodale.com/2016/04/27/the-surprising-reason-you-cant-find-the-right-romance-novel-and-how-one-librarian-is-fixing-it/">kinda like this</a> I guess?).</p>
<hr />
<p>[1] “Writing my own” is perhaps NIH Syndrome; but other solutions I’d tried for this didn’t stick.</p>
<p>[2] …And just like LinkedIn, I’m not drawn to visit it unless I’ve some action to perform on the site. “Glorified Book Spreadsheet” is one way to summarise this common usecase of GoodReads.</p>
]]></summary>
</entry>
<entry>
    <title>Kudos to the Awesome Lists</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-05-30-kudos-to-the-awesome-lists.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-05-30-kudos-to-the-awesome-lists.html</id>
    <published>2016-05-30T00:00:00Z</published>
    <updated>2016-05-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 30, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.html">programming</a>, <a href="/tags/programming.github.html">programming.github</a>
    
</div>

<p>I’ve a wariness for programming-languages/etc. which are hyped by the mainstream programmer community. – Computers suck, programming languages suck; the best code is no code, etc.; &amp; much of the “hey this is cool” often comes from folk without the experience to say with authority that something is cool.<br />
(<a href="https://quoderat.megginson.com/2006/03/06/programming-languages-of-distinction/">This post</a> argues that the ‘elites’ are the one who drive a languages adoption, &amp; by the time the ‘unwashed masses’ arrive, the party is over.).</p>
<p>But, uh, kudos to the “<em>awesome</em>” lists. e.g. this <a href="https://github.com/bayandin/awesome-awesomeness">list of awesome-lists</a>.<br />
They seem to be good aggregates of the kinds of resources you’re supposed to somehow know-of or pick up along the way. While each list is different, it seems that the <code>awesome-$language</code> lists showcase: the popular libraries (for which problems), as well as popular tools for doing stuff with the language. (In particular, code-styling and linting tools.).</p>
<p>(I’m not sure whether the star-/commit-counts are good indications of a language’s community, or indications of how well ninja-rockstars love a language, but still looks useful.).</p>
]]></summary>
</entry>
<entry>
    <title>Why Use Functional Programming Features?</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-05-26-why-use-functional-programming-features.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-05-26-why-use-functional-programming-features.html</id>
    <published>2016-05-26T00:00:00Z</published>
    <updated>2016-05-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 26, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.python.html">programming.python</a>, <a href="/tags/programming.scala.html">programming.scala</a>, <a href="/tags/programming.exceptions.html">programming.exceptions</a>
    
</div>

<p>I was asked in an interview “what advantages are there to coding in a functional style?”.<br />
I’d use ‘functional’ a bit more loosely than “everything pure, monads, etc.”; I’m happy with modern language idioms like pattern matching.<br />
– I’d say the best reason is it makes explicit dangerous things which are implicit in procedural, blub language code.</p>
<hr />
<p>Consider a typical <code>dictionary.get(key)</code>:<br />
If the key is in the dictionary, get the value, the world is at peace and all is well.<br />
But writing code where things go well is easy. Here, it’s more interesting to consider how to model “what to do when things go wrong”. – To me, returning <code>Optional[Value]</code> (as any “functional” language will do) seems the most elegant:</p>
<p>Mainstream languages (like Java, Python) tend to return <code>null</code>/<code>None</code> for this case.<br />
Mainstream languages also tend to throw errors when trying to use a <code>null</code>-value as if it’s not a <code>null</code>-value. So what happens is you’ll write code assuming the value is non-<code>null</code>; at some point this (implicit) assumption will be wrong. (Let he who’s never had a NullPointerException throw the first stone).</p>
<p><code>Optional[Value]</code> is kinda morally equivalent. A dictionary returns <code>Some[Value]</code>, which contains a non-<code>null</code> value if the dictionary has the key, <code>None</code> if the key wasn’t present in the dictionary. (Well, technically it could be a <code>Some(null)</code>; but by the same argument, this’d be better as <code>Some(None)</code>).<br />
The syntactic difference is, every time you have an <code>Optional[Value]</code> you MUST have <code>optional match { Some(x) =&gt; ...; None =&gt; ...; }</code> (or an acknowledgement of ‘danger’, like <code>optional.getValue()</code>). – With nullable variables, it’s up to the programmer’s discipline to have <code>if (x != null) { ... } else { ... }</code>; I’d be willing to bet the <code>else</code> clause is almost-always missing in code.<br />
– Or, rather, looking at code where values are never null, you know you can’t get NPEs. With nullable-values, you’ve to rely on (implicit) assumptions, and maybe-probably the code is fine.</p>
<hr />
<p>There are other ways to deal with errors.<br />
One kinda-stupid approach would be for the dictionary to loop indefinitely (until it has a value for the given key). In a concurrent/parallel program, this isn’t completely stupid, &amp; blocking-until-result <em>may</em> be desirable. But still.</p>
<p>Throwing an exception is another approach. Python does this. It seems to me this is kindof-sortof morally equivalent to <code>Optional[Value]</code> also; the benefit being that a value isn’t going to be <code>null</code>, the drawback being it’s difficult to tell what the program is doing:</p>
<pre><code>try {
  x = dict.get(keyX);
  doTask1(x);
  y = dict.get(keyY);
  doTask2(x, y);
} catch KeyNotPresent ex {
  //...
}</code></pre>
<p>– Obviously if an exception is thrown above, it’s not clear whether it came before or after <code>doTask1(x)</code>; perhaps less clear is that <code>y = dict.get</code> onwards ‘needs’ its own <code>try-catch</code> block. It doesn’t make sense to have <code>KeyNotPresent</code> exception cover both <code>x = dict.get</code> and <code>y = dict.get</code>; not if you want to be sure that you’re handling each alternative.</p>
<p>Error Codes, similarly, seem kinda-sorta equivalent if your program follows discipline to handle all alternatives. Somehow <a href="http://nedbatchelder.com/text/exceptions-vs-status.html">Exceptions are seen as good</a> for allowing you to “leave error handling code out of much of your code”. (If you don’t write half your program logic, you don’t have to write half your program logic). – Though, much of the advantages of Exceptions over Error Codes here also apply to <code>Optional</code> and friends.</p>
<p>– The advantages that Exceptions and Error Codes have over <code>Optional[Value]</code> is that the latter just says “not everything went well”, the former can describe what went wrong. (IOError, DivisionByZero, StackUnderflow, UnsupportedOperation, etc.). This can be quickly remedied by using <code>Either</code>, i.e. keeping information about what kind of error occurred.</p>
<hr />
<p>That’s all fine &amp; well.<br />
<code>Optional</code> works well to model where computations may fail; <code>Either</code> for when you want to know why things went wrong (or perhaps maybe to recover depending on what went wrong). These are more explicit than nullable values or Error Codes.</p>
<p>The bigger challenge is how well functions-which-may-fail compose with other functions-which-may-fail.</p>
<pre><code>fun importantComputation() {
  x = mayFailX()
  stmt1;
  y = mayFailY()
  stmt2;
  return g(x, y);
}</code></pre>
<p>With stateful code, one needs to be careful about assumptions about what <code>stmt1</code>, <code>mayFailY</code> mutate. – <em>Implicitly</em>, you also mustn’t assume <code>stmt2</code>, <code>g</code> are executed (&amp; so must consider state when they are executed, aren’t executed).<br />
– While it’s true that Exceptions defer the error-handling; there’s surely more cognitive-load required to keep the above in mind while scrolling through code.</p>
<p>Functional code also isn’t necessarily so cumbersome. <code>Optional.map</code> allows:</p>
<pre><code>optional match {
  Some(x) =&gt; doSomething(x)
  None =&gt; None
}</code></pre>
<p>to be written as <code>optional.map({ x =&gt; doSomething(x) })</code> (or <code>.map(doSomething)</code> if you literally have a function).</p>
<hr />
<p>Programmers tend to make mistakes when they forget to take care of cases when things go wrong.<br />
It’s easier to make mistakes when “something went wrong” is implicitly handled.<br />
Functional Programming-ish code tends to be very explicit; and potentially more concise. For writing correct, complete, safe code, this is clearly an advantage.</p>
]]></summary>
</entry>
<entry>
    <title>Elm, Rust, and Learning a Language</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-05-24-elm-rust-and-learning-a-language.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-05-24-elm-rust-and-learning-a-language.html</id>
    <published>2016-05-24T00:00:00Z</published>
    <updated>2016-05-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 24, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.elm.html">programming.elm</a>, <a href="/tags/programming.rust.html">programming.rust</a>, <a href="/tags/programming.java.html">programming.java</a>
    
</div>

<p>Elm and Rust are two programming languages I’m excited about (in the sense of, “wow it’d be cool to use these”).</p>
<p>Elm is a Haskell-inspired language for client-side web development; with a philosophical emphasis at making Functional Programming <em>usable</em>/accessible. – In a talk from March, <a href="http://www.elmbark.com/2016/03/16/mainstream-elm-user-focused-design">“Let’s be mainstream”</a>, Evan Czaplicki compares JavaScript (easy to write, hard to maintain) to ML (hard to write, easy to maintain): the suggestion being that this isn’t necessarily a trade-off which must be paid; but that perhaps it’s better to try and improve JavaScript than to make ML languages easier.<br />
There’s a cool <a href="http://elm-lang.org/try">online editor environment</a> for Elm so you can look at some examples &amp; try the language.</p>
<p>Rust is a “safe C”, with many of the goodies of ‘modern’ languages like product and/or union types, tuples/records, pattern matching, etc.; its unique aspect is that “ownership” must be explicitly modelled.<br />
For a taste, <a href="http://chrismorgan.info/blog/rust-fizzbuzz.html">“this post showing Fizz-Buzz programs in Rust”</a> explores various parts of Rust which you’ll encounter starting out with the language. This page <a href="http://cglab.ca/~abeinges/blah/too-many-lists/book/">showing implementing linked-lists in Rust</a> does the same thing, exploring aspects of the Rust language while programming a fairly familiar data structure.<br />
<a href="http://rustbyexample.com">Rust by Example</a> lets you edit &amp; run each of the code snippets.<br />
Andrei Alexandrescu (guy who coined the term “modern C++”; architect of the D language) <a href="https://www.quora.com/Which-language-has-the-brightest-future-in-replacement-of-C-between-D-Go-and-Rust-And-Why/answer/Andrei-Alexandrescu">wrote an answer on Quora</a> where he compared D, Go and Rust as “C/C++ replacements”. The criticism of Rust is whether it’s worth all the extra effort to model ownership. (On that note, D v Swift v Rust would be interesting; maybe also Scala-Native if that comes to fruition..; Go is cool &amp; all, but relates more to Python/Ruby).</p>
<p>One thing both of these languages have in common is “great error messages”. (e.g. <a href="http://elm-lang.org/blog/compiler-errors-for-humans">“Compiler Errors for Humans”</a>, Rust’s compiler will try to explain what was wrong / suggest a solution). – One might say that because these languages are so out of wack from your typical <a href="http://www.paulgraham.com/avg.html">blub language</a> that the compiler <em>needs</em> to explain its errors, ha; but I’m more likely to think that reading compiler error messages is strange, … because I’m used to reading compiler errors as “nope” then checking the guilty line to figure out what’s wrong.</p>
<hr />
<p>These posts about Elm and Rust are interesting and all, but there’s also a limitation to them. You certainly get a taste for the <em>language</em>, (&amp; certainly there’re differences to these languages that you’ve to pay attention to these things); but there’s also a step between “playing with the language in online environment” &amp; being able to run the examples on your computer.<br />
’cause when someone says they “know Java”, they don’t just mean the Java language, but some familiarity with some JRE library packages, how to setup a development environment for Java, how to setup projects in Java (e.g. in Ant, Maven, Gradle or whatever).<br />
– I guess newer languages ought to benefit from how older languages have been developed. So you get tools like <a href="https://github.com/sonnym/elmenv">elmenv</a> or <a href="https://github.com/avh4/elm-format">elm-format</a>, <a href="https://github.com/rust-lang-nursery/rustfmt">rustfmt</a>, in addition to decent platform tools like Rust’s cargo.</p>
<p>I think what’s not immediately obvious is how to pick up &amp; use these languages for tiny projects.<br />
Python is my go-to language for quick scripts where I just wanna scratch something together. It’s not that these aren’t “programs” or “projects”, but I don’t wanna worry about setting up any kind of package-file, nor freezing dependencies, etc.<br />
– I don’t necessarily doubt that it’s possible to quickly get something together in Elm or Rust in the same way; but I wonder if this baggage of “things a $LANGUAGE developer knows how to do which a newcomer doesn’t” couldn’t be more obvious to pick up.</p>
]]></summary>
</entry>
<entry>
    <title>Review of The Righteous Mind</title>
    <link href="http://www.rgoulter.com/blog//posts/narrative/2016-05-15-review-of-the-righteous-mind.html" />
    <id>http://www.rgoulter.com/blog//posts/narrative/2016-05-15-review-of-the-righteous-mind.html</id>
    <published>2016-05-15T00:00:00Z</published>
    <updated>2016-05-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 15, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/media.the%20righteous%20mind.html">media.the righteous mind</a>, <a href="/tags/righteous%20mind.html">righteous mind</a>
    
</div>

<p>I’ve been a big fan of Jonathan Haidt since seeing his <a href="https://www.youtube.com/watch?v=b86dzTFJbkc">2013 Boyarsky Lecture</a>, in which he explains his Moral Foundations Theory. – It’s compelling as showing how conservatives can hold morality differently than the social-justice crowd holds it.</p>
<p>I finally got around to reading the actual book, rather than just picking up tidbits from various articles, podcasts and videos.<br />
Very much worth reading.</p>
<h2 id="compared-to-previous-things-id-read">Compared to Previous Things I’d Read</h2>
<p>The book has a somewhat different emphasis than just MFT + explanations of various cultural rifts:<br />
Each part presents a metaphor/model:</p>
<ul>
<li><p>The first part emphasises our morality is guided by intuition: a quick emotional reaction, followed by post-hoc, strategic rational justification.<br />
As Hume said, rationality should be servant to the emotions. Haidt presents the model of an emotional/intuitional elephant, ‘guided’ by a rational rider: the rider often has little control over what the elephant is doing, but can come up with great justifications.<br />
– Also emphasised is Glaucon’s stance in Plato’s Republic: People care more about the <em>appearance</em> of being virtuous, than actually being virtuous.</p></li>
<li><p>The second part establishes Moral Foundations Theory, Morality is underlaid by at least six foundations: Care, Fairness, Liberty, Loyalty, Authority, and Sanctity. (Many of the articles I’ve come across emphasise this aspect, as well as e.g. differences between American Left &amp; Right).</p>
<p>Emphasised is that WEIRD people (Western, Educated, etc.) see objects and individuals where others see relations and groups.<br />
In terms of US/Western politics: Lefties highly value Care MF, and to a lesser extent Liberty/Fairness. Libertarians care about Liberty and pretty much nothing else. Righties care about each of the MFs. (Given that Righties care about everything Lefties do, but not vice versa, Righties are better able to pass Ideological Turing Test as Lefties than Lefties of Righties; Lefties just don’t see how Authority, Sanctity could affect for morality).</p></li>
<li><p>The third part models humans as “90% chimps, 10% bees”; humans distinctly are able to cooperate in large groups which aren’t necessarily kinsfolk. – The ‘chimps’ aspect is our individuality, the ‘bees’ aspect is our hive-minded nature.<br />
– This part of the book largely argues the case for ‘group selection’, &amp; that humans’ righteous religiousity allowed our species to work in groups.</p></li>
</ul>
<p>The book is filled with interesting tidbits, stories, and occasionally diagrams. One interesting one was this ‘Social Intuitionist’ model:</p>
<div class="figure">
<img src="http://i.imgur.com/g57wfrI.jpg" />

</div>
<p>The takeaway from this model was, as intuition drives our judgement (&amp; reasoning follows judgement), it’s ineffective to try and change someone’s judgement directly through reasoning. (Possible, but rare). More effective was “elephant to elephant”, nudging an intuition from a socially respected source. (Since <em>appearing</em> respectable is important, intuition is more willing to yield). – As discussion progressed, after intuitions had adjusted, reasoning was more likely to persuade.<br />
Haidt later remarks about US Democrats vs Republicans; that Democrats have done so poorly in recent decades because Democrats’ speeches tend to talk to the elephant’s rider, whereas Republicans’ speeches resonate more with the elephant.</p>
<p>“Moral Matrix” is another recurring model in the book: ‘Matrix’ like the film, where under the binding/blinding righteousness, reality is distorted by one’s moral tastes.<br />
– The suggestion is to try and see things from within another’s moral matrix; to first gain social respect, then adjust intuition talking to the elephant, then to the rider.</p>
<h3 id="diversity-groups">Diversity &amp; Groups</h3>
<p>This was a bit interesting.<br />
I guess it makes sense in terms of, ‘our righteousness binds us together, blinds us to inconvenient truths’, but there was the remark that the more diverse a group, the less capable it was. – It’s not that more diverse groups drew more love of in-group, hatred of out-group, but instead an ‘anomie’: individuals were more socially isolated. (So, in order to get different people to work together, it’s better to emphasise <em>similarities</em>; highlighting differences has negative effects).</p>
<p>– This also came up in terms of the yin/yang of Am-Liberals v Conservatives; under Am-Liberals, society grows more diverse, “falls apart” under anomie. Conservatives valued ‘moral capital’ more, &amp; preserved social/moral order. – Conservatives protect <a href="http://www.chesterton.org/taking-a-fence-down/">Chesterton’s Fence</a>. – As a selection process, the society which is best able to balance progress vs stability wins.</p>
<hr />
<p>So, yes, it’s well worth reading “The Righteous Mind” for its ideas even with some awareness of the amazing thing JHaidt tends to say.</p>
]]></summary>
</entry>
<entry>
    <title>White New Zealand</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2016-05-12-white-new-zealand.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2016-05-12-white-new-zealand.html</id>
    <published>2016-05-12T00:00:00Z</published>
    <updated>2016-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 12, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/nzpol.html">nzpol</a>
    
</div>

<p>“What if your entire life was a lie?” was one question <a href="https://youtu.be/rAQHDex9kfs?t=1m45s">a friend</a> asked me on a vlog of his. It strikes me as a cheap, getting to know you type question; &amp; I apparently didn’t much bother to talk much on the video. (It was late at night).</p>
<p>“Falisifiability” - being able to check whether something is wrong - is important for that kindof reason: How do you know you’re not wrong? If you were wrong, how would you be able to tell?</p>
<p>I’m reading through Jonathan Haidt’s excellent “The Righteous Mind” at the moment.<br />
In the book, &amp; in many of the articles/videos discussing ideas from the book, various useful models come up: “reason is the lawyer/press-secretary to the emotions”, reason is like the rider guiding an elephant; a moral intuition strikes first, followed by strategic reasoning &amp; post-hoc justification of the moral judgement. – When an idea is morally pleasing to us, we ask “can I believe this?”, when an idea is morally repugnant we ask “must I believe this?”.</p>
<hr />
<p>Recently I’ve seen more opinions in NZPol which imitate &amp; reflect the same values I come across in the US-part of my Twitter feed. (I guess this is due to increasing exposure to NZ blogosphere, rather than these opinions growing recently).<br />
– <a href="http://xenos-theology.blogspot.sg/2016/05/andrew-judd-and-racism-in-new-zealand.html">This post</a> on the Andrew Judd issue is a good example. Here we have a non-confrontational “not calling actions racist” “racism-without-racists”, followed by the main point that if NZers were ‘more educated’, then everyone would be a left-leaning Labour/Green-voting good citizen. (So bravely calling out Paul Henry demonstrates why The Spinoff’s <a href="http://thespinoff.co.nz/07-04-2016/weird-the-paul-henry-show-is-actually-great/">positive review</a> of The Paul Henry Show is amusing; because Henry is gross &amp; not to be tolerated). – I don’t think it’s a strawman to say that the post’s author would then further agree: white people should be allies to oppressed minorities, &amp; should listen to what they have to say, as such people have experienced things the privileged haven’t. – The post certainly extols the virtue in feeling discomfort on such issues.</p>
<p>I don’t particularly hold issue with points like “people born to rich parents can more easily go to university than those whose parents haven’t gone”, etc.; de-emphasising the value of hard work seems dangerous to me, though. (Does it incentivise people to work harder if told the reason they fail is due to others, rather than lack of hard work?).</p>
<p>But “you’d agree with me if you were educated” seems blind to the notion that the opinion-holder is fallible; although, certainly everyone benefits with more information. (Any implication that NZers aren’t educated on such things ‘because racism’ is amusing; but I guess that’d be an uncharitable interpretation).<br />
“Just listen, don’t argue” is nice as a communication method (&amp; surely necessary, at times); but “don’t disagree, because of your identity” doesn’t seem a great truth-seeking strategy.<br />
The idea that ‘white people objecting’ is just ‘racists’ doing what racists do seems unfalsifiable: white person disagrees they’re racists = white person is racist; white person agrees they’re racists = white person is racist.</p>
<p>Overall, it rather seems to be lefties saying “it’s morally necessary that you hold socially-left attitudes”. – I guess the proper next step would be discussions of effective policies on “where to from here”.</p>
]]></summary>
</entry>
<entry>
    <title>Zootopia and its Edge Cases</title>
    <link href="http://www.rgoulter.com/blog//posts/narrative/2016-05-04-zootopia-and-its-edge-cases.html" />
    <id>http://www.rgoulter.com/blog//posts/narrative/2016-05-04-zootopia-and-its-edge-cases.html</id>
    <published>2016-05-04T00:00:00Z</published>
    <updated>2016-05-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May  4, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/media.zootopia.html">media.zootopia</a>, <a href="/tags/media.inside%20out.html">media.inside out</a>, <a href="/tags/diversity.html">diversity</a>
    
</div>

<p>Last weekend I went and saw <em>Zootopia</em>.<br />
Today a mate of mine bantered with me about the movie. Which is a push enough to get me to jot down some thoughts.</p>
<p>Spoilers follow.<br />
But I don’t think there’s much to spoil.</p>
<p>I’d heard only good things about <em>Zootopia</em> going in, and how amazing it was. After seeing <em>Inside Out</em>, I guess my standards for a “kids movie” is much higher.<br />
In terms of quality of the story, both <em>Zootopia</em> and <em>Inside Out</em> are pretty generic; but <em>Inside Out</em> wins in my book because it’s inherently more meta, &amp; it’d be more precise to say the constituent-substories are each generic. – <em>Inside Out</em> is also really sharp, very intelligent.<br />
– But what’s cool about both these movies is they present a compelling <em>setting</em>. These settings serve as good platforms from which to discuss other ideas, external to the story. (<em>Inside Out</em>’s credits even feature such extension).</p>
<p>Where <em>Inside Out</em>’s context is “emotions neurology-brain-stuff” (as well as dealing with sorrow), <em>Zootopia</em> tackles “diversity”.<br />
– From mainstream bias to “women in tech” &amp; “the wage gap”, I was expecting propaganda along the lines of “yay diversity is great”. – What <em>Zootopia</em> delivers is … not that. ish.</p>
<p>Brief aside, just so we’re clear on <em>Zootopia</em>’s setting:<br />
<em>Zootopia</em> is is like an alternative universe where modern world is populated by anthropomorphic animals, rather than humans. – Animals are divided between Predators and Prey. In time immemorial, the predators were the oppressors of the oppressed prey. In modern, civilised times, the animals have evolved to a supposed “egalitarian society, where anyone can be anything”. But things aren’t equal in Zootopia-city.<br />
Worth noting further, certain animals have stereotypes or stigmas attached to them (foxes are sly/deceiving; rabbits are weak, carrot-farmers). The society in Zootopia is also extremely segregated. (e.g. elephants, presumably, don’t live in the same housing blocks as hamsters).<br />
– For all I felt the film lacked; the setting is an interesting (if not an extreme or polemic) one.</p>
<p>Ostensibly, <em>Zootopia</em> does have a nice-sounding, fuzzy message of “let anyone do anything”:<br />
The oppressed sheep- (prey) and-female assistant-mayor gets pushed around and ignored by the lion-and-male mayor; builds solidarity with the bunny (and female) protagonist by way of “us little guys have to stick out for each other”.<br />
It’s celebrated (by the mayoralty, &amp; narrator) that the protagonist is the first bunny cop; and later, similarly the first sly-fox is also a “yay more diverse police force”.<br />
Prejudice is bad, like when the fox gets rejected (and beaten) for wanting to join the Scouts (dominantly/entirely prey-animals).<br />
And, sure, the fox <em>is</em> a sly deceiver, but only because no one gave him a chance to be otherwise.<br />
– The film ends with Shakira’s “Try Everything”, after a moral-of-the-story like “sure, animals have limits; but don’t let fear of those limits stop you from trying what you want to do”.</p>
<p>(On further thought, even those examples aren’t so black-and-white:<br />
the bunny isn’t the first ‘prey’-animal to be on the police, (Idris Elba’s character is a buffalo, and there’re elephants on the force), merely the first bunny.<br />
And there’s an irony in the ‘prey’-animals of the Scouts beating up the ‘predator’ fox since they fear him to be perfidious and violent. – The recent term “cry-bully” comes to mind).</p>
<p>A small part of my ‘disappointment’ is the cop-out of that moral-of-the-story.<br />
– A key (but plotwise, somewhat contrived) tension in <em>Zootopia</em> was “are predators inherently violent creatures?”. More explicitly, is it justifiable for prey to be concerned that predators they interact with may become violent. “No, don’t be a prejudiced asshole” the movie says, on the one hand. – But on the other hand, the godfather’s bodyguards are all large beefy animals; “anyone can be anything; but you can’t be a bodyguard if you’re a mouse” seems contrary to that.<br />
The movie never explicitly says “it is good and just that the police force is filled with the strong animals”, but never denies that there’re reasons for such inequalities.<br />
(Of course, in real life, differences in ability aren’t inherently as pronounced as between mice and elephants. I’d never be able to beat Usain Bolt in a sprint; but it’s not that any particular job is inherently best for some particular group of people by orders-of-magnitude differences).<br />
– Perhaps best to say that the film’s <em>setting</em> is nuanced, even if it’s plot mightn’t be.</p>
<p>I think it didn’t quite explore the ‘edge’ cases quite far enough.<br />
In tensions like “women in tech”, “the wage gap” and such, it’s often suggested that women’s preferences differ from men; e.g. women are interested in people-things rather than mechanical-things, or women prefer jobs which offer flexible hours over jobs which demand high availability. – <em>Zootopia</em>’s mapping of this is interesting: the rabbits (except the protagonist) prefer to be carrot farmers; the protagonists parents suggesting “it’s the way nature intended” (or so), but this also comes across as old-fashioned.<br />
– I mean, in a movie where the characters are <em>very</em> different, I’m not handing out cookies if the movie has a moral like “people are different and we should tolerate that”. Cookies are for where we should tolerate bad people; or where differences should be tolerated. – And, sure, it’s a kid’s movie; but those tough questions are what you’d try and illuminate with such a model.</p>
]]></summary>
</entry>

</feed>
