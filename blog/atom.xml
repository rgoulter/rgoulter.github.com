<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2016-09-04T00:00:00Z</updated>
    <entry>
    <title>On Wet Shaving</title>
    <link href="http://www.rgoulter.com/blog//posts/2016-09-04-on-wet-shaving.html" />
    <id>http://www.rgoulter.com/blog//posts/2016-09-04-on-wet-shaving.html</id>
    <published>2016-09-04T00:00:00Z</published>
    <updated>2016-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  4, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/wet-shaving.html">wet-shaving</a>, <a href="/tags/singapore.html">singapore</a>
    
</div>

<p>It occurs to me I’ve never written about wet-shaving on this blog.</p>
<p>“wet-shaving”, I’d say, is shaving not-with foam-from-a-can / cartridge-razor. So, using a shaving-brush with some shaving-soap (or shaving-cream), lathering the soap for the face, + using a safety/double-edged razor (or a straight-razor) to shave.<br />
Pretty old-school. – I guess in the same way that programmers now may prefer mechanical keyboards, in a “like how it used to be” kindof way, wet-shaving is healthier, cheaper, more luxurious way of shaving.</p>
<p>“Healthier / more luxurious” is nice, but it’s surely striking that it needn’t be all that expensive. If it’s well known that cartridge-razors’ price model is to “sell the razor cheap, the cartridges expensive”, then it’s kindof odd that people would opt for that rather than “expensive razor, cheap blades”.<br />
– As a <em>downside</em>, the main downside to wet-shaving is it can take much longer, and is more difficult than using a cartridge-razor. (Another “downside” is you’ll naturally want to get more out of your shave; you’ll care about your face more than you did before).</p>
<p>Wet-shaving has a strong online community, with plenty of advice / suggestions. – Though, pretty much everything is a matter of “whatever works; whatever is most comfortable for you”.</p>
<p>For Singapore, there’s an online community, sure. Buying supplies is a bit harder. Mustafa Centre sells cheap razors + cheap blades, as well as e.g. Tabac soaps, etc. – Though there’s less variety there now than there was.<br />
– A recommendation I saw was to order from <a href="http://connaughtshaving.com/">Connaught Shaving</a>; where apparently the shipping cost is free if you order enough (even though the website says this only applies to US, UK, CA). – When I ordered a couple of hundred blades from them, the shipping was 2GBP.<br />
– It’s prob’ly worth picking up a good DE razor. (For myself, I’ve got a Goodfella DE razor; albeit it’s prob’ly too expensive to get outside of NZ).</p>
<p>Of DEs vs Safety Razors, my impression is, the initial investment for SRs is much higher.. prob’ly the biggest difference in effort is maintenance of the blade. DEs take disposable blades; SRs need to be stropped before each shave, and as the blade blunts after some time, the blade then needs to be honed. – So not only is it a higher investment of money, there’re more skills required to use it. (This isn’t helped by that, apparently, outside the US it can be difficult to find a honemeister who can hone a SR for you).</p>
<p>– I think some people enjoy reading reviews about expensive products. (Like cameras or laptops, or fountain-pens or whatever). I’d think wet-shaving is perfect for such people, since there’re various pre-shave oils, soaps (and shaving creams), shaving brushes, DE razors &amp; DE blades, aftershave splashes, post-shave balms, etc.<br />
But even aside from the over-enthusiastic madness, I’d say that just for the (potentially) lower cost for wet-shaving, it’s worth trying.</p>
]]></summary>
</entry>
<entry>
    <title>RWBY's Arkos Ship is Adorable</title>
    <link href="http://www.rgoulter.com/blog//posts/romance/2016-08-24-rwbys-arkos-ship-is-adorable.html" />
    <id>http://www.rgoulter.com/blog//posts/romance/2016-08-24-rwbys-arkos-ship-is-adorable.html</id>
    <published>2016-08-24T00:00:00Z</published>
    <updated>2016-08-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 24, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/media.rwby.html">media.rwby</a>
    
</div>

<p>Recently I went back and re-watched <a href="https://www.youtube.com/watch?v=hq1lk-QWxNg">RWBY’s Volume 3, Chapter 12</a>.<br />
Spoilers (up to end of Season 3) below; although I reckon RWBY’s story is good enough that it wouldn’t be “spoiled” by lack of surprise.</p>
<p>I also had some fun watching some of the reaction videos for the episode.<br />
I’m not a big fan of reaction videos in general; nothing against them, it’s just I’d rather watch the video myself than see someone else watch it.<br />
– But V3C12 (or, S3E12) is so intense that it’s a lot of fun to share the reaction with them. – And, also, watching these videos, you can’t help but notice “wow, these people are geeks like me”. &lt;3 – The other benefit is the fans will each point out details of the episode I didn’t notice.</p>
<p>The episode’s first half concludes the combat which has been raging since Volume 3 Chapter 10. – For a show which’d previously been very skimpy on fighting scenes, it’s suffice to say this is an <em>intense</em> sequence.<br />
But chiefly, Pyrrha finally kisses Jaune, then she goes off to battle the big boss baddie and gets killed.</p>
<hr />
<p>I found it a delight to search “Arkos” on YouTube and come across <a href="https://www.youtube.com/watch?v=rECjoGkVz20">“The Shipping Corner: Arkos”</a> from Romance Scrooge.<br />
– The video does a great job discussing the ship between Jaune Ark and Pyrrha Nikos. (NiKos? … took me a long time to get that one).</p>
<p>Maybe worth mentioning, and not obvious to me, but together with the other two on their team (Nora and Ren, who are also shipped together, but currently not “together together”), the characters are loosely based upon cross-dressers: Ren is Mulan, Nora is Thor; Jaune Ark is … Joan of Arc, Pyrrha Nikos is Achilles.<br />
– Small touch, but Pyrrha is shot in the Achilles Heel before her death.</p>
<p>– Anyway, yeah, what I liked about the video is it did a good job of explaining why the relationship was mutually beneficial between Pyrrha and Jaune. Otherwise it’s quite clear that he’s certainly with a better person.<br />
In a way there’s a kind-of symmetry to them: Pyrrha recognises potential in Jaune that others fail to see it; Jaune recognises humanity in Pyrrha where others fail to see it. (&amp; Jaune’s potential increasingly becomes realised under Pyrrha’s mentorship; Pyrrha’s humanity increasingly comes to fore ’till she decides her duty/pursuit of destiny was more important).</p>
<p>(Personally my favourite AMV under the search is <a href="https://www.youtube.com/watch?v=E0uh49_S3X0">this one</a>. &lt;3 the fan art, n’awwwh).</p>
<hr />
<p>Even so, I’d like to keep track of some of the great moments for the Arkos ship. Forgiving out-of-order:</p>
<ul>
<li><p><a href="https://youtu.be/hq1lk-QWxNg?t=3m35s">V3C12</a> (from 3:35) they finally kiss. You can see the conflict in her eyes, which harkens to..</p></li>
<li><p><a href="https://youtu.be/u7uU_tKYHiM?t=9m33s">V3C8</a> (from 9:33), Jaune comes to comfort Pyrrha; seeing she’s got something on her mind.</p></li>
</ul>
<p>This in turn mirrors</p>
<ul>
<li><p><a href="https://youtu.be/i7wkw3yEbvQ?t=3m33s">V2C6</a> where Pyrrha encourages Jaune to have heart/courage for asking Weiss to the dance. – But just the way she walks as Nora admonishes her.</p></li>
<li><p>and <a href="https://youtu.be/nur1pCHD4hU?t=9m25s">V2C5</a> was where Jaune admits he’s interested in asking another girl to the dance.</p></li>
<li><p>V2C5 opens with an awesome combat sequence of Pyrrha fighting.</p></li>
<li><p>The dance itself, <a href="https://youtu.be/0-f-mGvOba8?t=2m27s">V2C7</a>, Pyrrha gives a heart-felt confession that the way others treat her makes her feel isolated; but that the way Jaune treats her has allowed her to make friends. (Jaune <a href="https://youtu.be/0-f-mGvOba8?t=6m55s">later following-through with his promise</a> to her).</p></li>
<li><p>V1C11-14, The <a href="https://youtu.be/N5D0NDAR8sU">Jaundice</a>, <a href="https://youtu.be/M_Loqu0jo7k">II</a>, <a href="https://youtu.be/h0QiT-GxN6k">Forever Fall</a>, <a href="https://youtu.be/PS9huFMmSoc">II</a> arc (total runtime around 25 mins) is culminates in the first/most <em>awesome</em> fight Jaune really shows himself in. – After being bullied by Cardin at the beginning of the arc, (&amp; pissing Pyrrha off by harshly rejecting her offer of help), Jaune stands up to fight this big Ursa monster.<br />
– Jaune then accepts Pyrrha’s mentorship.<br />
The parallels are cute here: Both Pyrrha and Jaune feel they have a duty to live up to something great; though Pyrrha’s actually good where Jaune isn’t (at least initially). At the beginning of the arc, Cardin stands over Jaune in victory, remarking that he hoped a monster in the wild would eat him; at the end of the arc, Jaune stands over Cardin, after having defeated the monster which was about to eat Cardin.</p></li>
<li><p>There’re various tidbits in how they come to meet early on in the first volume: V1C4-8 (<a href="https://www.youtube.com/watch?v=H09KTtyElWQ">The First Step</a>, <a href="https://www.youtube.com/watch?v=1JZgPfbKbU4">II</a>, <a href="https://www.youtube.com/watch?v=N1TJ5YA3jfw">The Emerald Forest</a>, <a href="https://www.youtube.com/watch?v=z8wPhihrzvU">II</a>, <a href="https://www.youtube.com/watch?v=ctiDu69kIho">Players and Pieces</a>),</p></li>
<li><ol start="4" style="list-style-type: decimal">
<li>Pyrrha’s first appearance; she meets Jaune as everyone is excited about which teams they’ll get to be on,</li>
</ol></li>
<li><ol start="5" style="list-style-type: decimal">
<li>Pyrrha chooses to team up with Jaune,</li>
</ol></li>
<li><ol start="6" style="list-style-type: decimal">
<li>Pyrrha unlocks Jaune’s aura after he suffers a cut to the face.</li>
</ol></li>
<li><ol start="7" style="list-style-type: decimal">
<li>They run away from a deathstalker,</li>
</ol></li>
<li><ol start="8" style="list-style-type: decimal">
<li>Jaune forms as team leader of JNPR, as they kill the deathstalker.<br />
Pyrrha is happy. (This is also, imho, the coolest fight in RWBY so far; “Red Like Roses” is such an awesome soundtrack to the fight).</li>
</ol></li>
</ul>
<p>That covers the highlights, for me; but some other tidbits:</p>
<ul>
<li><p><a href="https://youtu.be/-p4iS_p3b8E">V2C12</a>: The finale of Volume 2 features a brief incursion of evil monsters into the city. Pyrrha, from a distance, is glad to see Jaune improved in being able to take care of himself in combat.</p></li>
<li><p><a href="https://youtu.be/RzEo0F8thL4">V3C2</a> has them in a tournament fight.<br />
It’s a little cringe-worthy, but Jaune mentions that Ren and Nora are team “flower power”. This leads Pyrrha to ask “so what’s our ‘team name’?”. She’s less than enthused about the name “Arkos”.</p></li>
</ul>
<p>I guess the light-hearted RWBY-Chibi has a few more. <a href="https://youtu.be/WW3Pm5pdajw?t=1m45s">RWBY Chibi 9</a> features a game of tag, Pyrrha tags Jaune. (One of the fan-submitted subtitles, now sadly gone, was “You’re mine tonight”, ha).</p>
<h3 id="shoulder-love">Shoulder Love</h3>
<p>It’s also a bit strange, but it seems that shoulders play an important part of their relationship. Mostly in terms of touching-shoulder as encouragement.</p>
<ul>
<li><p>In the opening screen in Volume 1, Pyrrha touches Jaune on the shoulder. In Volume 2, Jaune touches Pyrrha on the shoulder.</p></li>
<li><p>V1C6 (Emerald Forest): Here she touches his cheek/chest, not his shoulder; <em>but</em> her line of dialogue features “by my shoulder, protect thee”.</p></li>
<li><p>V1C8 (Players and Pieces), Pyrrha affectionately hits Jaune on the arm as congratulations.</p></li>
<li><p>V1C12 (Jaundice II), she’s touches him on the shoulder, encouraging him (before he admits that he faked his way into the academy).</p></li>
<li><p>V2C5 (Extracurricular), as he admits he wants to ask another girl to the dance, she touches his shoulder in encouragement.</p></li>
<li><p>V2C7 (Dance Dance Infiltration), he reaches for her shoulder as she goes away, after she’s made her confession.</p></li>
<li><p>V3C8 (Destiny) Pyrrha rests her head on Jaune’s shoulder.</p></li>
</ul>
<p>If nothing else, I guess that highlights just how much of their relationship is mutual faith and encouragement.</p>
<hr />
<p>The other thing I noticed re-watching the above; Ruby and Weiss’s partnership improves dramatically. W. can’t stand R. at the beginning; W.’s pride tells her that <em>she</em> should have been leader, and R. isn’t so competent. – Yet by this latest episode, W. follows R.’s leadership as Ruby makes the heroic decision to go after their missing friends in the city devastated by monsters. – That character growth/development is a really nice touch.</p>
]]></summary>
</entry>
<entry>
    <title>On Revising in Programming and Blogging</title>
    <link href="http://www.rgoulter.com/blog//posts/meta/2016-08-16-on-revising-in-programming-and-blogging.html" />
    <id>http://www.rgoulter.com/blog//posts/meta/2016-08-16-on-revising-in-programming-and-blogging.html</id>
    <published>2016-08-16T00:00:00Z</published>
    <updated>2016-08-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 16, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.html">programming</a>, <a href="/tags/writing.html">writing</a>
    
</div>

<p>In one of the more fascinating sidebars in “The Cucumber Book”, Dan North discusses his first experience pair-programming with Martin Fowler; initially aghast that Fowler spent time re-arranging the test code (and at times, duplicating) snippets of code.. until realising the improvement the changes brought: the test code became a more readable story.<br />
(The principle “Don’t Repeat Yourself” was superseeded by – wait for it – Direct And Meaningful Phrases).</p>
<p>I mention that because it draws a connection between programming and writing.<br />
– Two areas which at first glance share much in common (both involve textual content), then not so much in common (computationally interpreted texts by computers vs naturally interpreted texts by people; so further connections are usually interesting to make.</p>
<p>Anyway. I bring that up because recently I’ve had fun tinkering with old side-projects of mine. (<a href="http://www.commitstrip.com/en/2014/11/25/west-side-project-story/">Obligatory commitstrip</a>). – Don’t be shocked, but such play-around side-projects tended to be in fairly unmaintainable conditions: a bad (or absent) README file; poor (or absent) documentation; poor (or absent) tests. (Let alone other things, like how easy the project is to get up and running, file organisation, etc.).</p>
<p>It’s kind of fun to do this tinkering, especially with the goal in mind of improving maintainability and/or how polished the project is, since there’s a feeling of bringing order where there was disorder.<br />
– In doing so, a lot of this involves re-reading code; code that was written a long time ago. I reckon this has helped me to value the importance of documenting things, and on commenting about subtle concepts which explain why things were written the way they were. (A counter-lesson of learning between bullshit documentation and good documentation probably needs me to neglect the side-project for another half-year or so before coming back to it).<br />
This maintenance also makes it clear that more time will be spent reading the code than is spent writing it. In the case of my side-projects, presumably I’m the only one even reading it.</p>
<p>But I find when I write blogposts, I usually hate re-reading what I’ve written. (The same applies for writing for schoolwork). – It’s not that I never hit the backspace key before I publish the post, though.</p>
<p>I know that for authors, writing a book involves not just putting words on the page, but a process of editing and re-writing.</p>
<p>My blog and my programming side-projects have similar standing: Neither are apparently wildly popular, but I still find value in writing them for my own sake.<br />
– However, by parallel, just as the code in my side-projects were in an abysmal state when unmaintained, it’s hardly a stretch to say that my blogposts (and my writing ability) .. would improve with attention.</p>
<p>– To be honest, I do feel bad about this neglected state for a handful of my blogposts: the ones which are found high-up in Google searches for particular keywords (particularly my SBT v Gradle, and OneNote v Org-Mode posts); there’s a clear difference between what I’d expect to read for the title, and what the post contains.<br />
For opinion-based posts, though, it’s disingenuous to silently make edits without notice. (On the other hand, if old opinions cannot be removed, that makes it possible to attack someone for an opinion they used to hold, and people can be silly enough to do that).</p>
]]></summary>
</entry>
<entry>
    <title>Cinematic Lego Games</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-08-11-cinematic-lego-games.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-08-11-cinematic-lego-games.html</id>
    <published>2016-08-11T00:00:00Z</published>
    <updated>2016-08-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 11, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/media.lego.html">media.lego</a>
    
</div>

<p>Lego Star Wars: The Complete Saga is a classic game worth having in your library. (Ironically, it’s not the <em>complete</em> saga of the Lego games).<br />
– Since then, there’ve been many other Lego games of the same style, like Lego Indiana Jones, Batman, Harry Potter, etc.; the most recent one being for Star Wars: The Force Awakens.</p>
<p>If you’ve played the more recent ones, I think LSW:TCS perhaps comes across as a bit archaic, but there’s something so charming about it.<br />
The gameplay is ‘simple’. Smash stuff in the world to get points, solve puzzles to get through the level or to get collectibles. – The ‘puzzle’ part comes in terms of, you need a Jedi character to do Jedi things, a droid to do droid things, etc. – Playing with the characters of movies in Lego form really is kindof adorable.</p>
<p>Part of what else is charming about the old classic is there’s no dialogue; so the story plays out (&amp; probably only makes sense) if you’ve seen the movie.<br />
Sometimes with jokes thrown in.<br />
The newer Lego games (I’m not sure since when, but I know Lego: Lord of the Rings has it) instead feature dialogue.</p>
<p>As well as voice-dialogue, Lego LOTR adjusts the “you need this character to unlock this puzzle” formula: it’s more item-based, so you need a fishing-rod to fish, a bow &amp; arrow to shoot targets, etc.; these are items which some characters will have (e.g. Legolas has bow &amp; arrow; Gimli has an axe), or which can be unlocked as a collectible.<br />
– The other cool thing about Lego LOTR is that, between chapters of the story, your characters get to freely roam around a small-scale Middle Earth. (So you can simply walk into M.. etc. etc.).</p>
<p>– After replaying through these two, I decided to pick up Lego Star Wars: The Force Awakens, for the PS Vita.<br />
It’s still a bunch of fun, but certainly feels more sophisticated than the aforementioned. – e.g., For situations when you need to interact with a particular puzzle with a particular character, LSW:TFA let’s you quickly switch to that character with the press of a button.<br />
LSW:TFA also adds on some cover-based shooting sections throughout the levels, which felt a bit gimmicky, but managed to still retain the essence of the action + puzzle-solving that the rest of the game has.</p>
<p>These are all still pretty fun to play. I’m not sure if it’s true for all the Lego games, but for these three at least, they get to borrow the music from their source films, and the music of Star Wars and Lord of the Rings is also pretty good.</p>
]]></summary>
</entry>
<entry>
    <title>Systems and Tools Have Limitations</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-07-31-systems-and-tools-have-limitations.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-07-31-systems-and-tools-have-limitations.html</id>
    <published>2016-07-31T00:00:00Z</published>
    <updated>2016-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 31, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.oop.html">programming.oop</a>, <a href="/tags/programming.fp.html">programming.fp</a>, <a href="/tags/programming.tools.html">programming.tools</a>
    
</div>

<p>So <a href="https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53">“Goodbye OOP”</a> is a piece which has been going around.<br />
I’ve no idea why. I wasn’t able to finish reading it. The author’s tone is amazingly cringe-worthy.<br />
After some time the of the clearly inexpert author (adopting a faux-foolish tone) bashing bad ways of OOP, the author concludes in a paragraph or two with “but, hey, Functional Programming looks pretty cool”.<br />
– I’m reminded of <a href="https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b#.ppia68wvo">“Farewell NodeJS”</a> with 1.4k likes. There the author spends time bashing the shortcomings of NodeJS, (inexpertly or not I can’t tell; at least the author’s tone isn’t as mockable), with a similar naivity of “but, hey, Go-lang looks pretty cool”.</p>
<p>I found in Undergrad there’s a politics about which tools are cool and which aren’t. PHP isn’t “cool”. (It’s also an abysmal language; I recall reading a great piece I liked, but can’t find it. There’re far too many articles on the topic). Java isn’t “cool”. – But in my experience, those that complain the loudest about how sucky these languages are rarely good programmers.<br />
(For signalling “good programmer”, admiration of either Erlang or Haskell will do the job. They’re Hipster Cool. – In Haskell’s case, you don’t even need to have written anything in Haskell to say you love the language).<br />
– What’s quite annoying about these posts, then, is that they try to make an evaluation/judgement (“OOP sucks, FP is cool”) without qualifications. – I like Scala; but I’m also aware there’s some <a href="https://nurkiewicz.github.io/talks/2014/scalar/#/">pretty complicated shit</a> going on. (The real downside you’ll find to Scala is it’s long compilation time, though). – I mean, praising a language/tool without also indicating it’s costs/downsides seems immature. In ComSci, almost everything is a tradeoff.</p>
<p>– What the post did get right, (from what I read of it, anyway), was that it highlighted ways of <em>misusing</em> OOP; ways which aren’t “obviously” wrong, or which sound like they’re keeping in line with OOP discipline. (By this point, or much earlier, PL purtians would’ve pointed out the distinction between Alan Kay’s “OOP is message-passing + late-binding” from “Java OOP”. – FWIW, the author of “Goodbye OOP” claims experience with Smalltalk and C++, but from the way the author writes, inexperience with each seems evident).<br />
– Steve Yegge’s <a href="https://sites.google.com/site/steveyegge2/when-polymorphism-fails">“When Polymorphism Fails”</a> is another piece which takes a stab at a problem OOP is unable to model.<br />
– But there’s a difference between “this tool can’t model this problem; don’t use it for that” (&amp; how to avoid such limitations), and “I’m misusing this tool; it sucks; everyone should use this other tool I just heard of instead”.</p>
<p>cf. Steve Yegge’s praise of Ruby <a href="http://steve-yegge.blogspot.sg/2006/09/bloggers-block-4-ruby-and-java-and.html">here</a>. Yegge’s a very talented writer, so the comparison is unfair on that front, but he qualifies his praise. (He doesn’t like Ruby, but he uses it; he doesn’t know Ruby, but he rarely needs to look at the docs, compared to languages he knows, where he does have to; it’s performance isn’t amazing, but that’s mostly ok anyway).</p>
<p>A blogpost from Robert C Martin, <a href="http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html">“The Churn”</a>, came up on my timeline. ‘The Churn’ referring to the naive programmer’s chase of all new things as “superior”. (Which makes for a fun comparison with <a href="https://quoderat.megginson.com/2006/03/06/programming-languages-of-distinction/">“the programming language cycle”</a>; these two pieces agree about new languages [which smart people like] lack in usable tools/libraries). – Martin makes good observations that OOP, FP are orthogonal; both tools used to solve problems. – I think in insinuation that FP isn’t worth learning/paying attention to drew ire from the FP kids.</p>
]]></summary>
</entry>
<entry>
    <title>C++ Object Copying</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-07-14-c-object-copying.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-07-14-c-object-copying.html</id>
    <published>2016-07-14T00:00:00Z</published>
    <updated>2016-07-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 14, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.c%2B%2B.html">programming.c++</a>
    
</div>

<p>C++ is quite a different beast of a language to, say, Java or Python.<br />
My early programming experience was in the latter, so I find my ‘mental model’ for reasoning about what C++ does with the code I write is sometimes wrong.</p>
<p>One area where I make mistakes is underestimating where C++ will make copies of objects.<br />
That Java/Python are (largely) pass-by-reference, and C++ is pass-by-value (unless otherwise specified) is prob’ly what drives that. – Another way of saying this is that when “passing objects around”, Java/Python tend to only copy <em>pointers to</em> objects, whereas C++ (by default) usually makes copies of objects.</p>
<p>It may be helpful to illustrate this, to see where C++ copies things. (Or, perhaps it may be easier to remember where C++ doesn’t copy things).</p>
<p><a href="https://gist.github.com/rgoulter/b33b54ecc6f17e454387234d941e229b">Here’s one I prepared earlier</a>. (The gist program contains a good output listing for the snippets below).</p>
<h2 id="a-custom-object">A Custom Object</h2>
<p>Consider a custom object <code>MyObj</code>:</p>
<pre><code>class MyObj {
 public:
     MyObj(int x) {
         cout &lt;&lt; &quot;    CONS MyObj(&quot; &lt;&lt; x &lt;&lt; &quot;)&quot; &lt;&lt; endl;
         x_ = x;
     }

     ~MyObj() {
         cout &lt;&lt; &quot;    DEST MyObj(&quot; &lt;&lt; x_ &lt;&lt; &quot;)&quot; &lt;&lt; endl;
     }

     MyObj(const MyObj&amp; other) {
         x_ = other.x();
         cout &lt;&lt; &quot;    CPY  Copying from &quot; &lt;&lt; x_&lt;&lt; endl;
     }

     MyObj&amp; operator=(const MyObj&amp; rhs) {
         cout &lt;&lt; &quot;    ASSG Assigning from &quot; &lt;&lt; rhs.x() &lt;&lt; &quot; to &quot; &lt;&lt; x_ &lt;&lt; endl;
         if (this == &amp;rhs) return *this;

         x_ = rhs.x();

         return *this;
     }

     void setX(int x) { x_ = x; }

     int x() const { return x_; }

 private:
    int x_;
};</code></pre>
<p><code>MyObj</code> is a straightforward class; we provide a constructor, destructor, copy-constructor and assignment operator which each output when they’re called.</p>
<h2 id="in-initialisation">In Initialisation</h2>
<pre><code>  MyObj x0 = MyObj(10);  // A1
  MyObj x1(5);           // A2
  MyObj x2(x1);          // A3
  MyObj x3 = x1;         // A4</code></pre>
<ul>
<li><p><code>A1</code> Only calls the constructor; not the copy-constructor or assignment operator.</p></li>
<li><p><code>A2</code> is the same as <code>A1</code>.</p></li>
<li><p><code>A3</code> is an explicit call to the copy-constructor.</p></li>
<li><p><code>A4</code> is also a call to the copy-constructor. (i.e. same as (<code>A3</code>)).</p></li>
</ul>
<h2 id="in-assignment">In Assignment</h2>
<pre><code>  x2 = x3;  // B1</code></pre>
<ul>
<li><code>B1</code> is a call to the assignment operator.<br />
The copy-constructor isn’t invoked in the assignment operator (in this example).</li>
</ul>
<h2 id="in-function-calls">In Function Calls</h2>
<p>Consider functions:</p>
<pre><code>void outp(MyObj o) {
    cout &lt;&lt; &quot;   Output MyObj(&quot; &lt;&lt; o.x() &lt;&lt; &quot;)&quot; &lt;&lt; endl;
}

void outpC(const MyObj&amp; o) {
    cout &lt;&lt; &quot;   Output MyObj(&quot; &lt;&lt; o.x() &lt;&lt; &quot;)&quot; &lt;&lt; endl;
}</code></pre>
<p>and the snippet:</p>
<pre><code>  outp(x1);   // C1
  outpC(x1);  // C2</code></pre>
<ul>
<li><p><code>C1</code>, a call to <code>outp</code> invokes a copy.</p></li>
<li><p><code>C2</code>, where <code>outpC</code> takes a constant-reference, does not invoke a copy.</p></li>
</ul>
<h2 id="assigning-to-references">Assigning to References</h2>
<pre><code>  const MyObj&amp; crx0 = x0;  // D1
  MyObj&amp; rx0 = x0;         // D2</code></pre>
<ul>
<li><p><code>D1</code> doesn’t invoke a copy.</p></li>
<li><p><code>D2</code> doesn’t invoke a copy.</p></li>
</ul>
<p>Assigning to references doesn’t invoke copies.</p>
<h2 id="results-of-functions">Results of Functions</h2>
<p>Consider the function:</p>
<pre><code>MyObj f1() {
    cout &lt;&lt; &quot;  f1():&quot; &lt;&lt; endl;
    return MyObj(7);
}</code></pre>
<p>and the snippet:</p>
<pre><code>  MyObj x4 = f1();          // E1
  const MyObj&amp; crx4 = f1(); // E2
  MyObj&amp; xr4 = f1();        // E3</code></pre>
<p>both CONS no cpy, except 3 which doesn’t compile</p>
<ul>
<li><p><code>E1</code> doesn’t invoke a copy.</p>
<ul>
<li>I think this is the compiler optimising a way a destruct of the value from the function, and a copy-constructor to the tmp value.</li>
</ul></li>
<li><p><code>E2</code> also doesn’t invoke a copy.</p></li>
<li><p><code>E3</code> doesn’t compile; that’s because a reference must point to an ‘lvalue’ (something which can be referred to by name).</p>
<ul>
<li>Apparently C++11 allows rvalue references (<code>&amp;&amp;</code>), which allows ‘move semantics’.</li>
</ul></li>
</ul>
<h2 id="pointer-dereferencing">Pointer Dereferencing</h2>
<pre><code>  MyObj* ptr = new MyObj(13);  // F1
  MyObj deref = *ptr;          // F2
  MyObj&amp; derefRef = *ptr;      // F3
  const MyObj&amp; constDeref = *ptr;  // F4
  delete ptr;                  // F5</code></pre>
<ul>
<li><p><code>F1</code> is a call to the constructor, (and <code>F5</code> to the destructor).</p></li>
<li><p><code>F2</code> <em>invokes the copy constructor</em>.</p></li>
<li><p><code>F3</code> doesn’t invoke a copy.</p>
<ul>
<li>Pointer dereferencing doesn’t necessarily demand a copy.<br />
The dereference of <code>*this</code> in <code>MyObj&amp; operator=(...)</code> also demonstrates that.</li>
</ul></li>
<li><p><code>F4</code> doesn’t invoke a copy, either.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Men of Valor Has Not Aged Well</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-07-09-men-of-valor-has-not-aged-well.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-07-09-men-of-valor-has-not-aged-well.html</id>
    <published>2016-07-09T00:00:00Z</published>
    <updated>2016-07-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July  9, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/games.men%20of%20valor.html">games.men of valor</a>, <a href="/tags/steam.html">steam</a>
    
</div>

<p>It’s kindof fun to see a game you’d seen on store shelves 10 years ago, available on Steam.</p>
<p>In this case, <a href="http://store.steampowered.com/app/411330/">Men of Valor</a>, with a usual-price of S$10.50, and at the time of writing, on sale for 75% off. – Look, I removed my payment details from Steam during the Summer Sale, but I can hardly feel bad about a single S$2.62 purchase.</p>
<p>– The other experience I’d had with ‘old shooters’ was “Shadow Ops: Red Mercury”, for S$1.05. Which, uh, wasn’t great.</p>
<p>I think in terms of “action/war shooters”, Call of Duty gets its fair share of complaints for being …. dumb, non-stop ADHD explosions and mayhem. (A lot of the criticism also focussed on the multiplayer experience in those games; though I only play the single-player campaigns).<br />
That’s a bit unfair, I’d say; since the older CoD games still hold up relatively well in contrast to the aforementioned.</p>
<p>“Shadow Ops: Red Mercury”’s gameplay felt a bit awkward to me. One game mechanic absent from gameplay was, you couldn’t pick up an enemy’s gun; which seems like something insignificant, but every other shooter I’ve played featured that. It also felt cheap, the gameplay felt tacky. (So I ended up getting the cheat codes and having a lot of fun with it that way; so I can hardly regret the purchase).</p>
<p>“Men of Valor”, while I’ve only played a handful of chapters, also feels a bit tacky in comparison. (MoH:AA was published <s>around the same time</s> in 2002, [2 years before SO:RM or MoV], CoD <s>not much later</s> in 2004; “Battlefield: Vietnam” in 2004;“Far Cry” in 2004!).<br />
MoV’s story &amp; cutscenes are cheap and tacky, fine. But the gameplay … MoV’s health system allows you to die pretty quickly. In typical modern shooters, this is counter-balanced by mechanics like a cover-system, or by e.g. health regeneration. MoV’s mitigation is some delay before enemies shoot at you, &amp; that you must ‘bandage’ the damage received. (i.e., damage you receive is essentially ‘potential damage’, so you ‘bandage’ it to heal the potential damage. But being shot completely will kill you; so the system has all the drawbacks of a CoD-style system and a Far Cry-style system, without the benefits of either).<br />
– It’s just not fun to play; every time I picked it up, my main motivation to keep playing the level was the thought of how fucking boring it would be to replay through the level (&amp; shitty cutscenes).</p>
<p>In a way, I kindof feel bad about it. (Or I did, before learning that these shitty games were released the same year “Far Cry” was).<br />
CoD’s gameplay style (frequent checkpoints, wherein checkpoints are free; quick/free recovery of health from behind cover, etc.) don’t particularly create high-stakes. The player is there for the ride, not for an experience which demands anything of them.<br />
I guess what CoD, and other good shooters (like <a href="https://upload.wikimedia.org/wikipedia/commons/6/63/Quake_-_family_tree.svg">those using a Quake engine</a>) 10 years ago established/relied on good game mechanics (&amp; so don’t age abysmally); which these shitty cheap ones I’ve mentioned earlier … didn’t.</p>
]]></summary>
</entry>
<entry>
    <title>Reflection on Maintaining a Toy C++ Project</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-07-05-reflection-on-maintaining-a-toy-c-project.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-07-05-reflection-on-maintaining-a-toy-c-project.html</id>
    <published>2016-07-05T00:00:00Z</published>
    <updated>2016-07-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July  5, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.c%2B%2B.html">programming.c++</a>, <a href="/tags/programming.github.html">programming.github</a>
    
</div>

<p>A few years ago, for a course on Computational Geometry, my team made a program aiming for a stain-glass effect using Voronoi Diagrams.</p>
<p>To quickly explain:<br />
Voronoi Diagrams show the regions which are closest to each point. e.g. for 2 points, you’d bisect the space between them. – By analogy, each ‘point’ would be pizza-delivery, and each region would be the region served by that store.<br />
We’d found a <a href="http://www.cs.swarthmore.edu/%7Eadanner/cs97/s08/papers/gorbach.pdf">cool paper</a> explaining how to create a “stained-glass effect” using Voronoi diagrams. (Roughly, since edges in a Voronoi diagram are equidistant to two points, you wanna make points which are equidistant to edges on some input image: using an edge-detection filter of the image, you can construct a probability-distribution defined as “0 for an edge or far away from an edge, but quite high for close to an edge”… etc. etc.).</p>
<p>But, uh, this was a school assignment.<br />
The original assignment was in four stages; the first three iterating towards a Delaunay Algorithm, using precise big-int computations. (Delaunay is the dual of Voronoi; where Voronoi shows the regions, a Delaunay Triangulation shows which points are closest to each other. Btw, besides stained-glass effects, there’re a bunch of practical applications to this). (Another fun fact: during this assignment, one of the teammates rage-quitted to go do a whole project by himself, which he never presented on. I had all the luck for getting teammates in uni).<br />
Part four was “do something cool”.<br />
The trouble with this being that the assignment was initially in C++. (I think ‘cause the module was taught by the same Professor who taught ’Intro to Computer Graphics’, which used OpenGL in C++). – Fun fact, the given code wasn’t “const correct” &amp; so wouldn’t compile with compilers not on Windows; oddly, Uni courses are one of the places where Windows is presumed. The trouble with C++ in University courses is, unless the code is monkey-see-monkey-do, or the students are <em>really</em> good at C++, then there’s just too much C++ lets you screw up with to be a good language to use. (I recall at the time a teammate included a hard-coded <code>include &quot;C:\\Users\\username\\....\\whatever.h&quot;</code>, because how the hell are you supposed to know that’s not The Right Thing to do?).<br />
(Besides that, it’s much more difficult to install/setup dependencies for a C++ than for other languages like Python or Java).<br />
Only for the most basic things can a programmer get away with blindly writing C++.</p>
<p>Somehow, we managed to get something which worked (ish) submitted. (When I presented it to the class, I said it was “<em>half</em> cool”; ’cause it was a really cool project but it was only half-working).</p>
<p>I put it on my GitHub.<br />
I’d tinkered with it a year ago, enough to fix some <code>SEGFAULT</code> I was somehow getting.<br />
– Going through job interviews at the moment, I can see that the places I apply to will at least look at my GitHub; and <a href="https://github.com/rgoulter/cs5237-VoronoiArt">this project</a> is my only C++ project. Fortunately, no one gives enough of a shit to actually try out the project (since, as I discovered tinkering with it again recently, the code had some other <code>SEGFAULT</code> issue in normal use),=; unfortunately, I’d reckon even at a glance the project was in pretty bad shape. (Maybe not ‘typical undergrad C++’ bad, but still).</p>
<p>– To be honest, most of what made me say that was superficial: poorly arranged files, inconsistently named files, and inconsistent coding conventions. Prob’ly my favourite being <code>halfcamelCase</code> which annoyed the hell out of me. – In fairness, there were a number of ‘bad’ C++ things (heavy use of <code>extern</code>/global variables, <em>really long</em> methods/functions, etc. – I did write down the things I reckoned were shit; it’s theraputic).<br />
People glancing at the repo (e.g. people I’m applying to for a job) can notice the former easily; and when the latter isn’t so egregious, it’s difficult to notice. – But that’s not really a good excuse. I feel it’s not insane to say “well-designed &gt; testable &gt; working &gt; not-working”. Software is fragile, so “working” is often going to become “not working”. Testable code lets you know this <em>quickly</em>. And well-designed code is easy to bring under test (and/or, a good design makes it really difficult to write bad code on top of it).</p>
<p>Btw, “legacy code” = any code which is untested. lol, most of aforementioned codebase is “legacy”.<br />
In fact, in the days after we presented, the others worked their arses off to get it somewhat working. – Looking at the code again, I came across comments written in Czech. Given that my teammates were Kazakhstani and Indian, I figure this means they “adapted” the code from somewhere else. (TBH, I don’t doubt that they worked hard). – Though, looking at the code we had from the parts one to three, I kinda don’t blame them. – I don’t excuse them, either; after tidying up the code to remove the egregious Bad Things (tm), the code still doesn’t work, but at least the shit is within-functions rather than at a project-level; which is testable.<br />
(For myself, the code I wrote was the Qt &amp; OpenGL code. The uni graphics courses are quite happy to use GLUT.. I wanted a “real GUI”. – I’d made mistakes in loading the image into OpenGL texture coordinates, so the rendering would sometimes [though not always] be wonky).</p>
<p>– One thing I’ll note is about ‘cognitive load’: Programmers tend to know about the immediate-term cognitive-load, where if interrupted from being “in the zone”, it takes time to get back to the task at hand. – I think the thing most undergrads miss out on by not maintaining projects over a long term is the experience of why documentation is important. Coming back to the codebase after 1-2 years without touching it, especially a not-well-designed codebase, it’s <em>really</em> not clear what a particular function is for. Documentation, like <em>good names</em>, as well as describing what a function does (and what it assumes) is surely useful. Or, rather, in its absence, it takes quite some time to read through <em>to remember</em> what things were for. (&amp; that’s with the advantage of having once before carried such a cognitive load).<br />
– As well, for non-trivial algorithms (like Delaunay Triangulation, or constructing a Voronoi Diagram using Fortune’s Algorithm), absence of high-level explanations is quite annoying.</p>
<p>C++ itself is pretty brutal for novice-codebases.<br />
Unlike Rust, C++ is quite happy to let you do stupid shit (but then yell at you about it at runtime). – “<code>NullPointerException</code> is for wimp languages” is what C++ must think. Apparently C++ also thinks “just wing it” when a function never returns a value (when it’s supposed to return a value), which led to some deal of “wtf, it’s not even possible to construct a value like that!”, before I realised this. (No, really, wtf C++?).<br />
Java &amp; JVM languages happily print a stacktrace indicating <em>where</em> an error occurred; “where” meaning not just which line-of-code, but the function calls leading to it. – With a “pretty bad undergrad” codebase, it can be pretty shitty to find where the sinner is.<br />
– I mean, Rust looks hard as hell (for the borrowing/lifetimes stuff), but at least it’s damned-hard to run into errors like this.</p>
<p>Anyway.<br />
The project isn’t <em>that bad</em> at the moment. (The older code for Delaunay Triangulation is, but the rest ain’t). – “Why not start from scratch?” is a nice temptation, but it’s usually better to iterate towards a good solution than to start from scratch.<br />
If I was so concerned about a blight in my GitHub profile, yeah, maybe it’d’ve been better to remove it. But as a “cool project which mostly works”, it’d’ve been a shame to lose.</p>
<p>Also, protip: if you go too far while climbing Ballmer’s Peak, coding becomes less interesting.</p>
]]></summary>
</entry>
<entry>
    <title>Thoughts on JRPGs</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-06-24-thoughts-on-jrpgs.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-06-24-thoughts-on-jrpgs.html</id>
    <published>2016-06-24T00:00:00Z</published>
    <updated>2016-06-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 24, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/game.final%20fantasy.html">game.final fantasy</a>, <a href="/tags/game.chrono%20trigger.html">game.chrono trigger</a>
    
</div>

<p>My friends told me the PlayStation Vita is a weaboo’s console. While I’d say Sony have badly mismanaged the console, focussing instead on their PS4, one advantage is a decent catalogue of JRPGs available. (Since the Vita is portable, you can play through these on the bus or the train or whatever).</p>
<p>So far, my experience in JRPGs consists of Final Fantasy IV, Chrono Trigger and Final Fantasy VII. (With “South Park: Stick of Truth” being the closest I’d otherwise experienced of the genre).</p>
<h3 id="combat">Combat</h3>
<p>“Western RPGs are for gameplay, Japanese RPGs are for story” is the rule of thumb I was told.<br />
In case you’ve not played (or seen) Final Fantasy’s combat in these games, it consists of turn-based-ish combat on a screen where the monsters are on the left, good guys on the right; each turn you pick an action (attack/cast magic/use item). (Then you get EXP, level up your characters, etc.). – Chrono Trigger’s combat is a bit more active/involved, but <em>roughly</em> follows the same format.</p>
<p>The character’s Health (HP) and Mana (MP) persist across battles; and can be replenished by resting at inns (which are few / far between), or by using items (like potions, which are relatively expensive). So the gameplay-dynamic becomes trying to gain experience / get to where you need to be without using too many resources, while being careful to not let HP get too low.<br />
– South Park’s system replenished HP/MP for each battle; with this rule, characters can simply use all their most powerful magic spells without concern for the cost to MP.</p>
<p>So. It’s fair to say these JRPGs combat system isn’t <em>trivial</em>. And FFIV does pull dick-moves in its boss fights, such as only being able to fight particular bosses with particular magic spells (or else the boss uses super-strong counter-attacks).</p>
<p>Yet, one main ‘drawback’ to the JRPGs is the ‘grinding’: since your characters have levels, as do the enemies, the game may demand that the player repeatedly fight through enemy encounters to level up the characters. It’s more monotonous than not. (FFIV even provides the option to automatically select the same move as previous turns; which alleviates the grinding by way of ‘not really playing the game’).</p>
<p>In a way, it’s rather twisted way of making gameplay ‘accessible’: Typically, if you’re not skilled at playing a game, you can’t proceed. With levelled-games, all you need to do is grind-through enough enemies until what was previously insurmountable becomes .. surmountable.</p>
<h3 id="referring-to-the-wiki">Referring to the Wiki</h3>
<p>Perhaps my preference for games is decidedly more linear, but, sure, I looked up the wiki for these games while playing through them.<br />
The biggest impact this has is you’ll find out about all the best items/weapons, many of which you’ll probably miss the opportunity to get on first try.</p>
<p>There were times I got quite lost/stuck as to where I should be headed, too, in these games. That could also be due to how old these games are.</p>
<h3 id="characters-and-story">Characters and Story</h3>
<p>I think what FFVII was significantly weaker than FFIV and Chrono Trigger in the “ludonarrative” aspect of characters: In the latter, you have specific characters with fixed magic abilities. This strictly dictates how you can fight. (Particularly, “do you have a healer?”). – FFVII lets you pick &amp; choose which characters have which magic spells, &amp; so as far as I can tell it’s all rather arbitrary.</p>
<p>I, uh, had quite a long hiatus during my playthrough of FFVII; so some aspects of the story confused me. (FFIV, Chrono Trigger were much more tractable).</p>
<p>It’d be fair to say that these games let the characters develop by way of sidequests; these would elaborate more on the back-story of the character. By exploring more, you’d get more story, and better weapons/etc. (hopefully).</p>
<h2 id="conclusion">Conclusion</h2>
<p>These games are certainly classics, although they do show their age. I can’t say I’d enthusiastically recommend them, but the artistic style is quite cute, &amp; I don’t feel I wasted my time playing them.</p>
]]></summary>
</entry>
<entry>
    <title>Brief Thoughts on Purpose of Writing, Arguing</title>
    <link href="http://www.rgoulter.com/blog//posts/meta/2016-06-20-brief-thoughts-on-purpose-of-writing-arguing.html" />
    <id>http://www.rgoulter.com/blog//posts/meta/2016-06-20-brief-thoughts-on-purpose-of-writing-arguing.html</id>
    <published>2016-06-20T00:00:00Z</published>
    <updated>2016-06-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 20, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/persuasion.html">persuasion</a>
    
</div>

<blockquote>
<p>There’re two kinds of argument-posts: preaching to the choir, or convincing the doubtful.</p>
</blockquote>
<p>I came across this remark on a blogpost, &amp; it’s kindof interesting, because <em>does the second kind actually exist?</em><br />
(The above remark was followed by “so don’t use these words when describing your opponent”; essentially, a call for civility, which is an interesting topic in itself).</p>
<p>I mean. Is it common for people to come across an article, and say “you know what, I was wrong”? I feel Haidt persuasively argues in his “Righteous Mind” book that humans are driven foremost by intuition, and reason post-hoc tries to make the reason look good.</p>
<p>– I do believe people can <em>evaluate</em> whether arguments make sense or not; at least in the case where it’s about something they’re not tribal about. (Implicitly, though, if an argument on your side is bad, it’ll disappear).<br />
There’s value in two people arguing publicly, even in absense of persuasion, though: while, yes, the truth each believes is made stronger/richer by contact with the opposition; globally, the audience gets to pick/choose the merits of each side. (The world is complicated, and having a nuanced understanding of things is more likely to fit better than a simplified ideological viewpoint).</p>
<p>And yet. I don’t think <em>persuasion</em> (of a disinterested audience) happens via the rational arguments, as such.<br />
– For an argumentative post to be reasonable is a high cost, though: It’s easy to preach to the choir by merely saying “our opponents are stupid, the world would be better without them”. It’s much harder to construct sound reasons which support this. (The easiest way to do this is to showcase the worst of your opponent. “Look, they’re bad”. But this is necessarily met with a showcase of the worst of ‘your side’, so). – Rather, if rationality has much to do with persuading the elephant, then the ‘side’ which is able to keep the strongest guise of rationality (for the longest) is more likely the ‘right’ side.<br />
(That all pre-supposes this is about arguments between tribes. I’d guess most people in whichever community are largely non-tribal; and if they pay attention to the argument at all, somewhat serve as the disinterested audience).</p>
<hr />
<p>Yeah, there’s a danger ‘danger’ in attention-rewarding metrics like Twitter’s Retweets/Favourites, Facebook’s Shares, etc. is that it incentivises content to seek-attention; if ‘attention to post’ isn’t related to ‘quality of post’, this disincentivises writing quality posts. – Rather, writing posts for the sake of writing posts is in defiance of the incentives of the social media.</p>
<p>There’s also a danger in ‘everything is an argument’, in a tribalistic viewpoint, where everything must be about politics all the time.. the goal becomes less about ‘finding truth’, having good discussion and asking questions, but instead asking “how do I win? how does our side win?”.<br />
– In that sense, it’s okay that some posts are written which don’t appeal to those outside the author’s in-group. (An echo-chamber, though, where the author &amp; audience never engage/read other viewpoints.. there’s also good cause to be concerned about that).</p>
]]></summary>
</entry>

</feed>
