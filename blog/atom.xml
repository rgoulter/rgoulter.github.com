<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2015-10-19T00:00:00Z</updated>
    <entry>
    <title>Custom Ex Command in Yi Editor</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2015-10-19-custom-ex-command-in-yi-editor.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2015-10-19-custom-ex-command-in-yi-editor.html</id>
    <published>2015-10-19T00:00:00Z</published>
    <updated>2015-10-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 19, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/yi.html">yi</a>, <a href="/tags/editors.html">editors</a>
    
</div>

<p>This is something I’ve <a href="../../yi.html">mentioned before</a>, but I see that I wasn’t entirely clear on how to achieve it.</p>
<p>In more detail, here are some notes on how to write a “Hello World” Ex-style command for the Yi editor.<br />
– The exciting thing about this is it’s easier to write such commands for Yi than for Vim.</p>
<p>The following has been checked with v0.12.2 of Yi.</p>
<p>Compare: <a href="https://github.com/yi-editor/yi/tree/v0.12.2/src/library/Yi/Keymap/Vim/Ex/Commands">Yi.Keymap.Vim.Ex.Commands</a> module. The ‘Reload’ command is the simplest. - This helps see how Ex commands for Vim-style Yi are parsed, and how they can map to an <code>ExCommand</code>, which is in turn responsible for an Action to execute.</p>
<p>See <a href="https://gist.github.com/rgoulter/1059c35844c5e471d9e9">this gist</a> for a full, working example, but for the code itself, the highlights would be:</p>
<ul>
<li>The transformation itself, adding “hello world” into the buffer:</li>
</ul>
<pre><code>helloWorld :: YiM ()
helloWorld = withCurrentBuffer $ insertN &quot;Hello, world!&quot;</code></pre>
<ul>
<li>The parser for the ex command, in the <code>HelloWorld</code> module, under the <code>lib/</code> folder (which is used by <code>dyre</code> for dependencies for the config) in <code>~/.config/yi</code>:</li>
</ul>
<pre><code>parse :: EventString -&gt; Maybe ExCommand
parse &quot;helloWorld&quot; = Just $ impureExCommand {
    cmdShow = &quot;helloWorld&quot;
  , cmdAction = YiA $ helloWorld
  }
parse _ = Nothing</code></pre>
<ul>
<li>The config in <code>yi.hs</code>, to make use of the above <code>parse</code> function:</li>
</ul>
<pre><code>import qualified HelloWorld as HelloWorld

...

main = yi $ defaultVimConfig {
    defaultKm = mkKeymapSet $ defVimConfig `override` \ super self -&gt; super
            { vimExCommandParsers = myExCmdParsers ++ vimExCommandParsers super }
 }

myExCmdParsers = [HelloWorld.parse]</code></pre>
<p>This is enough to get a “Hello World” example going.<br />
For more sophisticated efforts, I’m guessing one would want to:</p>
<ul>
<li><p>Look at parsing of Ex commands, using the extant parsers for inspiration.</p></li>
<li><p>A more sophisticated <code>Action</code> executed; this is where an understanding of <code>Buffer</code>/<code>Editor</code>/<code>Yi</code> <code>Action</code>/<code>Monad</code> would be necessary.<br />
 Resources at <a href="http://yi-editor.github.io">yi-editor.github.io</a> may or may not be helpful here; grokking parts of the code (e.g. in the keymaps) would be a good place to start.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>In Another's Shoes</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2015-10-16-in-anothers-shoes.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2015-10-16-in-anothers-shoes.html</id>
    <published>2015-10-16T00:00:00Z</published>
    <updated>2015-10-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 16, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/politics.html">politics</a>, <a href="/tags/diversity.html">diversity</a>
    
</div>

<p>As part of <a href="http://www.winstonchurchill.org/resources/speeches/89-a-disarmament-fable">a speech in 1928</a>, Churchill gave the following fable:</p>
<blockquote>
<p>Once upon a time all the animals in the Zoo decided that they would disarm, and they arranged to have a conference to arrange the matter. So the Rhinoceros said when he opened the proceedings that the use of teeth was barbarous and horrible and ought to be strictly prohibited by general consent. Horns, which were mainly defensive weapons, would, of course, have to be allowed. The Buffalo, the Stag, the Porcupine, and even the little Hedgehog all said they would vote with the Rhino, but the Lion and the Tiger took a different view. They defended teeth and even claws, which they described as honourable weapons of immemorial antiquity. The Panther, the Leopard, the Puma, and the whole tribe of small cats all supported the Lion and the Tiger.</p>
<p>Then the Bear spoke. He proposed that both teeth and horns should be banned and never used again for fighting by any animal. It would be quite enough if animals were allowed to give each other a good hug when they quarreled. No one could object to that. It was so fraternal, and that would be a great step towards peace. However, all the other animals were very offended with the Bear, and the Turkey fell into a perfect panic.</p>
<p>The discussion got so hot and angry, and all those animals began thinking so much about horns and teeth and hugging when they argued about the peaceful intentions that had brought them together that they began to look at one another in a very nasty way. Luckily the keepers were able to calm them down and persuade them to go back quietly to their cages, and they began to feel quite friendly with one another again.</p>
</blockquote>
<p>The context was (apparently) discussing why disarmament talks were ineffective. In that context, it’s not difficult to see how the fable’s metaphors of teeth and horns may map to air force, navy, etc.<br />
– A more concise way to describe this may be along the lines of <em>“Armament for me, but not for thee”</em>; or “self-interest”. But what’s striking about the fable is more subtle:<br />
– In terms of the fable, each agent tries to justify the value &amp; necessity in their own armaments, while pointing out the excess in their hostile’s. - More abstractly, in terms of “power”, each animal tries to keep its own power, and diminish the power of its opponent.</p>
<p>But I can’t help but be reminded of this analogy whenever anyone mentions “diversity” (and, more broadly, any use of identity politics).<br />
Just as the animals use ‘disarmament/to make the world a more peaceful place’ as a means to increase <em>their own</em> power, calls for diversity, etc. play out as increasing one’s own power.</p>
<p>In a piece, as scathing as any using the term “white feminism” can be expected to be, titled <a href="https://medium.com/this-is-hard/ffffff-diversity-1bd2b3421e8a">“#FFFFFF Diversity”</a>, the writer berates the tech community’s efforts as “diversity” being limited to “more women” rather than “more people of colour”.<br />
– The writer here shares my point, insofar as ‘white women calling for “diversity”, yet this benefit is only seen by white women’. - Writer then goes on to demonstrate my point, in that her lament is that ‘calls for diversity’ don’t extent to <em>black women</em>. (I’m not quite sure of the culture that’d use the terms “women of colour” <em>and</em> “person of colour”, but never “men of colour” when discussing diversity issues). The medium piece doesn’t mention with even so much as a comma the logical corollary: diversity efforts should (if we’re playing the <a href="http://www.checkmyprivilege.com/">privilege math</a> game) also pay heed to trans-, gays, etc.<br />
– i.e. for the <em>woman of colour</em> author, it’s a shame that diversity doesn’t promote <em>women of colour</em>.<br />
(There’re a number of points related to the issue in the post people can get pretty heated over. <a href="http://uberfeminist.blogspot.sg/2015/10/stop-giving-work-visas-to-men.html">For some perspectives</a>, yes, gender/sex diversity really is that much more important than ethnic diversity, which tech ostensibly has. – That Asian’s are over-represented somewhat complicates the notion of diversity beyond anything-but-straight-white-and-male. etc. etc.). – Some fun shit-stirring in the comments to that post was from an Asian offended to be so stereotyped as “model minority”, as if the job was handed to him without having to work his ass off to get to that point..</p>
<p>This perspective, that things are inherently about increasing one’s own power/status, also presents itself in the common and shrill point that the complaints about lack-of-diversity are always for positions of power. (Would tech still be under such focus if it weren’t perceived as some kind of gold rush?). There’re more complaints about lack of women in senior positions than lack of women in dangerous jobs.<br />
– In the context of education, it’s more common to see complaints about male-dominated fields, never about female-dominated fields. - Yet, both of these would be just as ‘diverse’ as the other.</p>
<p>The personal bone to pick is that calls for diversity rarely include ‘gross’ or unpopular opinions. ;-)</p>
<p>– Amongst the identity politics, the ‘ally-ship’ thing makes this a bit quaint. (And, no, “alliance” wasn’t the word I was looking for, kthx). Because, ostensibly, the ‘ally’ is the straight/white/male lookin’ out to help the little guy. (It’s common to see Twitter hashtags have a lot of fun over this). So, ostensibly, the ally is like the turkey defending the bear’s idea about hugging. - I’m sure this isn’t how it plays out, though, so-much-as the in-group/out-group dynamics are work don’t align over straight/white/male but over different lines. (e.g. ‘ally-ship’ belongs to the ‘progressives’).<br />
– Of course, this does play with this meta-game a bit, too; if the game is that you fight for your own team, then anyone ostensibly against their own team must be favouring justice/truth..</p>
<p>Mapping the other way, the analogy works the other way too: those who benefit from some “power” are unlikely to see that they benefit; those who don’t are likely to over-state/emphasise the benefits. Where a system of rules can be used to gain power, it will be (ab)used in such a way.<br />
– It’d perhaps be remiss to mention these things without mentioning <a href="https://en.wikipedia.org/wiki/Harrison_Bergeron">Harrison Bergeron</a>. But perhaps what’s frustrating about discussions on ‘privilege’/etc. is that the notion of “privilege means gains advantage, it doesn’t mean ‘is without disadvantage’” is at best acknowledged, but often left at the door. - So, e.g., this leads to situations where of course women want to be <a href="http://www.advicegoddess.com/archives/2010/12/13/equal_treatment.html">treated equally, just not treated like men</a>. What often gets lost in translation is that advantages don’t come without disadvantages. This doesn’t mean striving for equality is in vain. It does mean that it’s obnoxious, though, to complain about not having the advantages, without then complaining about not having the disadvantages.<br />
– Rather, when someone expresses a grievance, it’s polite to listen (&amp; impolite to dismiss); and the notion of ‘punching up’/‘punching down’, based upon ‘privilege math’ (explicitly or implicitly) seems a great way to be able to bypass having to listen, or reason.<br />
(As an example of how American-centric the discussion is, though, the fun-folk in Singapore play ‘privilege math’ where ‘not-white’ isn’t the bottom of the axis).</p>
<p>My point here isn’t “hey, people calling for ‘diversity’ just want more power, so it’s not worth listening to them”; and I do believe there’re those who genuinely believe equality-of-outcome is a necessary goal. But it’s a bias and an attitude entwined within the discussion.</p>
]]></summary>
</entry>
<entry>
    <title>Scala Development for Vim-loving Developers</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2015-10-06-scala-development-for-vim-loving-developers.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2015-10-06-scala-development-for-vim-loving-developers.html</id>
    <published>2015-10-06T00:00:00Z</published>
    <updated>2015-10-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October  6, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/vim.html">vim</a>, <a href="/tags/eclipse.html">eclipse</a>, <a href="/tags/scala.html">scala</a>
    
</div>

<p>So, I’ve blogged a bit about <a href="../../tags/vim.html">Vim</a>.<br />
Again, no, it’s not about “vim vs emacs”, so much as about “which features your text editing has”; and the vi-like modal editing fantastic for manipulating text.</p>
<p>Recently I’ve had the fortune of programming in Scala.<br />
The joke is that some programmers are happy to work in Scala because it’s not Java, the rest are sad to work in Scala because it’s not Haskell.<br />
Scala is by no means an excellent language. (Again, there are two kinds of languages; those people use, and those people complain about). But I like it well enough.</p>
<p>For the most part, I’ve done my Scala editing in Scala IDE, which is a plugin built upon the much-maligned Eclipse.<br />
– Overall, the biggest complaint to be had about Scala IDE, from my experience, is that ScalaTest can be a bit finicky, and will often refuse to “run all tests in package” or so.</p>
<p>– If I’m harping on about the benefits of Vim, why make use of Eclipse?<br />
Well, for one, I have the Vrapper plugin installed. This is a great stop-gap measure; it doesn’t have every binding (by default, at least), and occasionally messes up, but mostly does the job. (When I had to use XCode, XVim was also a nice plugin to have).<br />
Using Eclipse was the <em>pragmatic</em> best-of-what’s-available.</p>
<p>I’ve recently tried out making use of Vim proper for Scala editing:<br />
I love autocomplete; to get autocompletion for Scala in Vim, the easiest way is using some omnicomplete front-end (like YouCompleteMe), and plugging Eclim as a ‘back-end’ to it. – Eclim can communicate with Eclipse, and provide the autocompletion. – The <em>downside</em> to this is Vim becomes <em>heavy-weight</em>. Like, really heavy. I’m fairly sure you have to disable automatic project-building, also, otherwise there’s a huge lag every time you save. <em>That</em> isn’t great. (As it was for me, without the automatic building, there’s still noticeable/significant lag when saving, if using Eclim).</p>
<p>The benefit is you get to use all the customisations/plugins Vim proper has.<br />
e.g. vim-surround is quite useful for editing Scala.</p>
<p>My workstation setup in my lab has two monitors.<br />
For the most part, unless you’re using a keyboard-based window-manager like XMonad, I’m inclined to believe that two monitors isn’t all that enhancing to productivity: If you can, with your keyboard, switch between workspaces; within a terminal, use tmux to switch between tabs/panes, then your keyboard becomes your second monitor. The benefit of added screen real-estate is countered by the cost of moving your mouse to the other window (unless you’re using a keyboard-based window manager, where you can easily/quickly switch focus without use of mouse. Alt-Tab doesn’t suffice).<br />
– I’ve found a use for my second monitor:<br />
SBT has a feature (which can surely be scripted for other tools/environments) that will run a command any time the source-files change. I’ve found it useful to set up two panes on my alternate monitor: one pane will run this loop with the “not slow”-tests, the other pane will run whatever program I’m working on. – Benefits/drawbacks of the latter are, of course, “your mileage may vary”.</p>
<p>Also, make sure if you’re building a binary-search function, you don’t leave out the base case.</p>
<p>– Anyway, the benefit of setting up this is it’s, again, a stop-gap measure for “vim not showing me syntax errors”.<br />
Yes, vim <em>does</em> have that feature. Syntastic is nice enough; though (due to Vim’s age), doesn’t just-work as well as in Eclipse, and doesn’t do the red-squiggly-lines thing.<br />
Quickfix is the more ‘legacy’ equivalent. And Quickfix is really nice (I’ve used it for an OCaml project). But the equivalent “sbt compile” takes a <em>long</em> time to run. SBT itself compensates for this by providing a REPL/shell, which is quicker, but doesn’t fit the vim/makeprg model. – <a href="https://notes.pinboard.in/u:rgoulter/47e14b69d902db1e0146">There seem to be some Vim/SBT integrations</a>, but I’ve not tried any of them. (The general theme is <em>they</em> will integrate with quickfix).<br />
– If it’s not too distracting, it certainly is useful to have an at-a-glance view of “did I break anything?”, though, so it’s not strictly inferior in and of itself.</p>
<p>There are other things I more/less miss from Eclipse.<br />
e.g. Eclipse’s editing just has a more “solid” feel to it, like you’re editing building blocks. This is probably the whole press-enter-to-select-option.<br />
No doubt Vim can be customised to match this, but some of the auto-insertions are nice. (And, yes, provide nice inspirations for what an editor should have).<br />
Convenience features like automatically-import-a-class which wasn’t otherwise in scope is useful.<br />
– Particularly, though, and an example of “how good is your tooling” is “show type under cursor”. (These strongly typed languages, with type inference, like Scala, Haskell and OCaml, more/less demand editors with this feature).</p>
<p>– But another big difference between these is this:<br />
When I’m using Eclipse, I put up with any inefficiency.<br />
When I’m using Vim, I’m imagining what I could have to improve my tooling, what features would be nice to have to make things nicer.</p>
]]></summary>
</entry>
<entry>
    <title>Notes on Building a Live Coding Tool for C99</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2015-09-28-notes-on-building-a-live-coding-tool-for-c99.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2015-09-28-notes-on-building-a-live-coding-tool-for-c99.html</id>
    <published>2015-09-28T00:00:00Z</published>
    <updated>2015-09-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 28, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/fyp.html">fyp</a>, <a href="/tags/scala.html">scala</a>, <a href="/tags/c.html">c</a>, <a href="/tags/vim.html">vim</a>, <a href="/tags/presentation.html">presentation</a>
    
</div>

<p>I’ve been invited to talk at NUSHackers Friday Hacks on October 9th, about my FYP of building a ‘worksheet’/‘live coding’ environment for C.<br />
This post is to note down anything pertinent / thinking-out-loud as to what to say.</p>
<p>This is a draft. <a href="https://onedrive.live.com/redir?resid=D8B6217BE240272D!94399&amp;authkey=!AH692L5mL_TVLeo&amp;ithint=file%2cpptx">Here is a link to the presentation draft</a>.<br />
(Obviously, the colours need to change.).</p>
<h1 id="what-is-my-fyp">What is my FYP?</h1>
<p>Let’s have a GIF explain that:</p>
<div class="figure">
<img src="https://github.com/rgoulter/c-worksheet.vim/raw/master/demo.gif" alt="demo" />
<p class="caption">demo</p>
</div>
<p><a href="https://github.com/rgoulter/c-worksheet.vim/raw/master/demo-slow.gif">(Here is the same gif, slower speed).</a></p>
<p>i.e. show the results of the computation directly beside the C program itself, inside the editor. (This saves having to quit the editor, type <code>gcc &lt;whatever&gt;.c</code>, <code>./a.out</code>, then try and figure out what’s going on).<br />
Another way to describe this as a ‘REPL on steroids’.<br />
You might be aware of other such tools around:</p>
<ul>
<li>Scala IDE’s “worksheets” were the ‘inspiration’ for this. (EclipseFP copies this idea with what it calls a ‘worksheet’).</li>
<li>Apple’s Playground does a similar kindof thing for Objective-C and Swift.</li>
<li>LightTable (whose demo was very impressive, but the $300k KickStarter hasn’t given us the complete thing yet) is big on doing this for Clojure, and to a limited extent Python.</li>
<li>IPython notebooks are kinda-sorta similar.</li>
<li><a href="https://comealive.io/">‘Alive’</a> is bringing the same thing for C# in Visual Studio.</li>
<li><a href="https://github.com/jcartledge/sublime-worksheet">jcartledge/sublime-worksheet</a> is an example of an editor plugin which provides a ‘worksheet’ interface for any REPL language. (Easy to see ‘REPL on steroids’ here).</li>
<li>Apparently <a href="http://stackoverflow.com/questions/13059700/can-sublimetext2-execude-ruby-code-and-show-the-results-within-the-document-like">TextMate</a> can show results for Ruby.</li>
<li>TMux + Vim, with something like <a href="https://github.com/epeli/slimux">slimux</a> (‘send output to TMux shell’) kinda-sorta helps out with this, too. (‘slimux’ being inspired by Emacs’ SLIME).</li>
</ul>
<p>Loosely related is also, e.g. GDB/LLDB. A more sober way to describe my plugin is “auto-generated printf debugging”. – GDB/debuggers provide ‘inspect the value at some point in execution’ and ‘can easily evaluate expressions’ functionality. (GDB is known to be easy-to-use, widely used by the CS1010 kids, etc.).</p>
<p>My project on GitHub: <a href="https://github.com/rgoulter/c-worksheet-instrumentor">rgoulter/c-worksheet-instrumentor</a> (the main logic), and <a href="https://github.com/rgoulter/c-worksheet.vim">rgoulter/c-worksheet.vim</a> (a plugin for Vim).<br />
(It’s got a handful of stars on GitHub. You just know I’m amazing at publicity.).</p>
<h1 id="goals-for-presentation-meta">Goals for Presentation (Meta)</h1>
<p>Hopefully, (esp. if you play around with it yourself), you’ll think that’s kinda cool.<br />
I’ll know if I did a good job with my talk if you walk out thinking “that’s it, huh? I was expecting something complicated.” / “<em>I</em> could do that, chump.”. (I’ll’ve done an even better job if some of you go out and try and make this kindof stuff).</p>
<p>It’s kinda lame, for me, to say “hey, what I did for my FYP is quite simple”. (“If you can’t explain it simply, you don’t understand” / “it’s only simple if we simplify out the details” aside). The fortunate thing for this is that C has relatively few features. (e.g. No closures / functions within functions). But it’s not a sit-down-and-finish-it-in-an-hour kindof project. It is a <em>lot</em> of fun. (How many kids continue working on their FYP after they’ve presented in their free time?). You’ll also get <em>very</em> good at the language; I got somewhat familiar with the C99 language standard, and certainly stumbled upon the more esoteric aspects of (simple) C99, my favourite being:</p>
<pre><code>int isWhitespace[256] = { [&#39; &#39;] = 1, [&#39;\t&#39;] = 1, [&#39;\n&#39;] = 1 };
isWhitespace[&#39;a&#39;];  //&gt; 0
isWhitespace[&#39; &#39;];  //&gt; 1
isWhitespace[&#39;\t&#39;]; //&gt; 1</code></pre>
<h2 id="whats-in-it-for-you-motivation-for-caring-about-the-presentation">“What’s In It For You” / Motivation For Caring About the Presentation</h2>
<p>Something like ‘Example of a cool Programming-Language Application project you can make, once you have knowledge of how to make a parser &amp; roughly you could implement it’, esp. if the inspiration is ‘I want that for <em>my favourite language</em>’.</p>
<p>On the other hand, PL applications needn’t be like this, and can be more modest, like, ‘organise imports’ or ‘indent properly’ or so.</p>
<h1 id="parsers-and-pl-applications">Parsers and PL Applications</h1>
<p>– It can become clear by the terminology, the way someone talks, how much they know or don’t know about a subject. “Parsers” is one of these areas I don’t know all that much about. (I never took the compilers/parser course.).</p>
<p>But in terms of “writing a worksheetify program”, roughly formula for this is:</p>
<ol style="list-style-type: decimal">
<li>Parse the source code.</li>
<li>???</li>
<li>Profit.</li>
</ol>
<p>(Which applies to writing any PL application in general.).<br />
There are different ways to do it. (And of course, there are trade-offs for different approaches.).</p>
<p>But a key point I learned is, if you want to show results within functions / nested scopes / control structures, it’s not enough to just pass it off to a REPL. You must be able to parse the source code.</p>
<h2 id="making-use-of-the-ast">Making Use of the AST</h2>
<p>In situations where you’re writing programs whose data is other programs, you’re going to want to make use of techniques a level abstracted from directly traversing the AST.</p>
<div class="figure">
<img src="http://i.imgur.com/12f7qEm.png" alt="AST" />
<p class="caption">AST</p>
</div>
<p>ANTLR (see below) provides two ways to handle this: Tree Listeners, Tree Visitors.<br />
With Tree Listeners, you implement listener methods which get called as the AST is walked.<br />
With Tree Visitors, you implement methods which then control which parts of the tree are ‘visited’; the intent is to evaluate the AST to some value. (e.g. Numeric expression to a number, like in the simple math expression grammar example).</p>
<p>– The Tree Visitor is kindof more FP-ish, except having to explicitly call ‘visit’ on the children nodes of the AST is also a bit tedious. - This can be abstracted another level, where you have e.g. <code>AST -&gt; Option[T]</code>, and some <code>combine :: [T] -&gt; T</code>, then it’s possible to write a general <code>fold_ast :: AST -&gt; (AST -&gt; Option[T]) -&gt; ([T] -&gt; T) -&gt; T</code> function for the AST. (The <code>AST -&gt; Option[T]</code> means “maybe extract value from this AST node; if this node returns Some thing, use that, otherwise keep looking.”.). - Manipulation of AST could be done in a similar way.</p>
<p>Anyway. The dynamic (in ANTLR) is usually that the Tree Listeners can be used to ‘grab what you want’ out of the AST, Tree Visitor is better at ‘evaluating’ some part of the AST to a value.</p>
<h2 id="my-choice-of-parser-technique">My Choice of Parser / Technique</h2>
<p>For the ‘parser’, I made use of ANTLR parser-generator (like flex/yacc; just give it a BNF-esque grammar, and it generates the lexer/parser for you). Mostly because this can generate a parser in Java, and I was using Scala for the project (as specified by FYP description – Though I think since FP/‘strongly-typed’ languages are kinda nicer to write parsers in, I think the hope was I’d hand-write the parser..)</p>
<p>(See my adapted <a href="https://github.com/rgoulter/c-worksheet-instrumentor/blob/master/src/main/antlr4/edu/nus/worksheet/instrumentor/C.g4">C.g4</a>).</p>
<p>Making use of gccxml, or an LLVM/Clang pass might’ve also had it’s advantages, ‘but’, then I’d have to write in C++ (for the latter), it makes the executable size for my program <em>much</em> larger (which is fine if your plugin is like YouCompleteMe), and I more/less wanted to keep the approach ‘general’, rather than tied to a specific language.<br />
[Note: a disadvantage of not using gcc/clang is that there may be divergence between what <em>they</em> parse and what <em>I</em> parse; I mitigate this in my project by first compiling the given input C file. i.e. anything I can parse, they can parse (better?)].</p>
<p>In terms of “in my case”:<br />
One approach might be to just pass the code of to some C interpreter anyway. (Cling is a C++ interpreter developed by the folk at CERN, a successor of an older CInt (C Interpreter) project of theirs. ‘Cling’ because it’s built upon LLVM/Clang.). This’d require potentially renaming variables so that everything is unique, and ‘unfolding’ control structures (like loops, etc.). – Quite a messy way of doing things.</p>
<p>Another approach (which I never investigated) would be to generate a sequence of commands to give to GDB/LLDB so as to get the information (i.e. values of variables at some point in execution). (I did investigate using GDB/LLDB insofar as ‘will this let me avoid having to learn about the PL stuff?’; it’s not suffice because you still need to know for a statement e.g. <code>x = y = 4</code> <em>what</em> information you’d like to get from GDB/LLDB). – This isn’t necessarily a bad approach.</p>
<div class="figure">
<img src="http://i.imgur.com/i2WKSkH.png" alt="" />

</div>
<h3 id="instrumenting">Instrumenting</h3>
<p>The approach I <em>did</em> take was to ‘instrument’ (or ‘augment’) the code.<br />
i.e. insert statements into the C program so that I can run the program to get the output.</p>
<div class="figure">
<img src="http://i.imgur.com/P3KHZzK.png" alt="" />

</div>
<p>Roughly like:</p>
<pre><code>int main() {
  int x;
  x = 3;
}</code></pre>
<p>becomes</p>
<pre><code>int main() {
  int x;
  x = 3;
  OUTPUT(x, STRING_OF(3))
}</code></pre>
<p>and as-if compiled with a pre-processor which handles <code>OUTPUT</code>, <code>STRING_OF</code>. <code>OUTPUT</code> outputs in a format my Scala program intercepts. (I just use <code>STDOUT</code>; it could also be done using, say, sockets, or using something like Apache Thrift / or some other IPC/RPC framework – With C, this is a bit annoying, e.g. becomes more difficult to compile on Windows. [My tool, &amp; the Vim plugin, work on Windows, btw]).</p>
<p>The pseudocode for the instrumentor is more/less:</p>
<pre><code>def instrument(source):
  ast &lt;- parse source
  types &lt;- ctypes from declarations in AST

  for each declaration:
    insert(output declaration.toEnglish)

  for each expression statement:
    // n.b. assignments are expressions
    insert(output declaration.toString)</code></pre>
<p>Aside from ANTLR-specific stuff (e.g. ‘inserting’ into a token stream), the key challenge here is getting the ctype from a declaration. Furthermore, you need to be able to get the ctype of an expression, and from the ctype be able to generate ‘toString’ output for it.</p>
<h1 id="considerations-made-when-doing-this-for-c">Considerations Made When Doing This For C</h1>
<p>Specifically for C, my program basically outputs for declarations (like cdecl), and outputs values for expression statements.</p>
<h3 id="representing-c-kinds">Representing C Kinds</h3>
<p>A C variable/expression will be of some type: * a primitive type (e.g. int, float, char), * a pointer to some C type, * an array of some C type, * a struct/union (consisting of a sequence of identifiers, each of some C type) type, * an enum type, * a function (consisting of a return value of some C type, and a sequence of parameters each of some C type).</p>
<p>If you can see how the above might be represented as an ‘Algebraic Data Type’, congratulations. (If not, you probably haven’t heard of ADTs.).</p>
<p>e.g. in ML languages like OCaml/Haskell, you might write it something like:</p>
<pre><code>type CType = Primitive of String * String
           | Pointer   of String * CType
           | Array     of String * CType
           | Struct    of String * String * ((String, CType) List)
           | Function  of String * CType * ((String, CType) List)</code></pre>
<p>In Scala, the code (simplified) is something like:</p>
<pre><code>sealed trait CType;
case class PrimitiveType(id: String, type: String) extends CType;
case class PointerType(id: String, to: CType) extends CType;
case class ArrayType(id: String, of: CType) extends CType;
case class StructType(id: String, tag: String, members: List[(String, CType)]) extends CType;
case class FunctionType(id: String, rtnType: CType, params: List[(String, CType)]) extends CType;</code></pre>
<p>(See <a href="https://github.com/rgoulter/c-worksheet-instrumentor/blob/master/src/main/scala/edu/nus/worksheet/instrumentor/CType.scala">CType.scala</a>).</p>
<p>In Java … ha ha ha, just kidding. (Just because you <em>can</em>, doesn’t mean you <em>should</em>.).</p>
<h4 id="making-use-of-this-adt">Making use of this ADT</h4>
<p>Again, often in FP programming, once you have the types, the rest is fairly straight-forward. In my case: * I want this ‘CType’ from the AST. (kinda because C99 doesn’t have <code>typeof(x)</code>). * I want to output e.g. string-of some ‘CType’. (because C99 doesn’t have <code>stringof(x)</code>).</p>
<h2 id="declarations">Declarations</h2>
<div class="figure">
<img src="http://i.imgur.com/93zni61.png" alt="" />

</div>
<p>The devil is in the detail, but (in terms of ANTLR): * You can use a TreeVisitor to evaluate a declaration statement to a list of CType(s). * You can then use a TreeListener to traverse the AST and pick up the declarations.</p>
<p>The main complication here is that the listener has to care about scope.<br />
There’s also things like forward declarations, types declared in header files, &amp; typedefs.</p>
<p>It can be a bit tedious to figure this out, since you have to care about <em>all</em> occurrences of whatever AST node you’re working with. e.g. <code>declaration</code> can appear in the global scope, outside of functions; the identifiers of a struct’s members will look the same as a ‘normal’ declaration, etc.<br />
– What helps here is comparing the ASTs of declarations which are quite similar. <code>int *(*a)[5];</code>, <code>int **b[5];</code>, <code>int (**c)[5]</code> have similar-ish trees, but very different semantics.</p>
<h3 id="the-adts-make-it-easier">The ADTs make it easier</h3>
<p>In case the above diagram doesn’t make that obvious, then it’s roughly “collect the type specifiers and any point-to-(type-specifier) info; this is passed to the declarator as the AST is traversed. Something something recursion, and that’s how simple it is.<br />
Again, roughly, since each alternative for the declarator corresponds to some alternative of the above ADT, it does help write the program logic.</p>
<h3 id="cdecl">CDecl</h3>
<p>The actual cdecl (e.g. at cdecl.org, or as a programming exercise in the “Expert C Programming” book) is more/less a heuristic, doesn’t actually take care of all C declarations.<br />
But going from (String -&gt;) AST -&gt; CType, it’s not so hard to go CType -&gt; String to ‘explain’ what a C declaration is.<br />
Figuring it out takes the same kindof logic as figuring out how to do AST -&gt; CType stuff.</p>
<h2 id="expressions">Expressions</h2>
<p>This is more/less straightforward, following the CType ADT.</p>
<p>In particular, I use StringTemplate as a template rendering engine. (Like Python’s Jinja). So you have a <code>string_of_primitive</code>, <code>string_of_pointer</code>, <code>string_of_array</code>, etc. etc. and pass values to StringTemplate such that it can recursively generate the C code for you.</p>
<h3 id="the-adts-make-it-easier-1">The ADTs make it easier</h3>
<p>Since what’s instrumented is C code, the goal is to come up with C code which constructs a String for some ctype. Again, since it’s recursive, then the code to generate this C code is going to involve recursion. So it’s just a matter of writing code to construct a string for a primitive type, and array of ctype, etc.</p>
<p>See <a href="https://github.com/rgoulter/c-worksheet-instrumentor/blob/master/src/main/resources/edu/nus/worksheet/instrumentor/templates/constructs.stg">constructs.stg</a> See</p>
<h3 id="instrumenting-putting-it-all-together">Instrumenting: Putting it All Together</h3>
<p>I don’t reconstruct the AST directly, but just inject the instrumenting C code into a TokenStreamRewriter (one of ANTLR’s things, for a stream of the lexed tokens).</p>
<h2 id="cool-stuff-segfault-handling">Cool stuff: Segfault Handling</h2>
<p>That’s all ‘nice’, but something I’m quite proud of (&amp; in terms of ‘useful for a C beginner’) is it catches <code>SEGFAULT</code>s, and marks the output there:</p>
<pre><code>  int *px;     //&gt; px is pointer to int
  px = 0;      //&gt; px = (nil)
  *px = 5;     //&gt; SEGFAULT</code></pre>
<p>‘How’ involves a bit of knowledge about C99:</p>
<ul>
<li><p><code>setjmp</code>/<code>longjmp</code> are kinda like a <code>GOTO</code> statement, can be used to simulate exception handling in C.</p></li>
<li><p><code>signal</code> let’s you ‘catch’ thrown signals.</p></li>
</ul>
<p>So, to catch a segfault, you instrument each expression-statement (includes assignments &amp; function calls, excludes declaration statements) with the <code>setjmp</code> (like <code>try { }</code>); if a <code>SEGFAULT</code> signal is thrown, catch that in <code>signal</code>, and then use <code>longjmp</code> (like <code>throw ..</code>); in the place you jump to (like <code>catch { }</code>), output <code>SEGFAULT</code> to STDOUT, then exit.<br />
– Of course, the instrumented C code then becomes something no sane human would ever write.</p>
<h2 id="cool-stuff-type-inference-on-arbitrary-c-expressions">Cool stuff: Type Inference on Arbitrary C Expressions</h2>
<p>Being able to infer the type of arbitrary expressions e.g. <code>4*12</code> or <code>p[q]</code> enhances the usability of the tool/plugin; the use case becomes “want to show the value of an expression at some point? Simply write that expression.”.</p>
<p>The Type Inference takes a bit of thought, e.g. in <code>p[q]</code>, it can either be an array lookup, or a pointer offset.<br />
But, again, while the logic is somewhat tedious, the code to do this inference straightforwardly follows the grammar/AST for expressions; and I’m not sure how you’d do that without an ADT like the one above.</p>
<h1 id="limitations">Limitations</h1>
<p>As discussed on the repository:</p>
<ul>
<li><p>No I don’t do squat with regards to <code>malloc</code>, etc. (Particularly since there’re other ways to allocate memory, e.g. <code>calloc</code>, <code>alloca</code>, not to mention custom ones like <code>xalloc</code>.).</p></li>
<li><p>Obviously I don’t do squat with regards to concurrency, threads, etc.</p></li>
<li><p>The tool doesn’t necessarily play nicely with C PreProcessor stuff.<br />
 It’s easy to come up with examples which show how tricky it could be to deal with that.</p></li>
</ul>
<h1 id="contributors-wanted">‘Contributors Wanted’</h1>
<p>If you find any bugs, I’d be delighted for you to file an issue.<br />
– Keep in mind, though, that the Scala Worksheets tool doesn’t work when the program uses semicolons to delimit statements. - So I think I’ve not done a bad job.</p>
<p>– For selfish reasons, of course I’d love to see plugins for other editors like Emacs, Sublime Text, Atom, LightTable, etc. (and it’s a bit brutal to try and learn the APIs if you don’t use the editors).<br />
The vim plugin is fairly lightweight, since all it needs to do is communicate over a socket to the Scala server.<br />
– Certainly it’d be interesting to see, in terms of UX, how the tool / plugin could be improved.</p>
<p>– Originally it was supposed to be an Eclipse plugin.<br />
I scrapped that since dealing with dependency-jars within OSGi is not straight-forward to the uninitiated. - Particularly frustrating is that the plugin would work in the dev environment, but wouldn’t work when exported (due to e.g. classpath issues.).<br />
– Either dealing with OSGi stuff, or just imitating the ‘lightweight’ approach of tool-as-external-dependency would fix that.</p>
<p>But of course, I’d be much happier to see people try and do some PL project with the language of their choice. (Doesn’t have to be a worksheet.).</p>
<h1 id="now-that-i-have-your-attention---project-note-taking">Now That I Have Your Attention - Project Note Taking</h1>
<p>I think it’s fair to say no particular bit there is all that ‘hard’, but I can see that altogether it’s not exactly trivial.<br />
FWIW, I had like half a year to make it. (Half, because who does most of their work in the first half of their FYP?, and because I didn’t know squat about PL in the first half..).</p>
<p>I really like tools. (This doesn’t really sound like a ‘cool’ FYP to do unless you’ve at least some love for tools.). – e.g. Not ‘vim vs emacs’ so much as ‘your editor should be able to do these things’.</p>
<p>For note-taking, I kinda-sorta made use of OneNote.<br />
Briefly, OneNote is nice for collecting details/links on a topic (it has a nice hierarchy of sections -&gt; pages -&gt; bullet points). [These days, if I’m thinking hierarchically with a keyboard, I kinda-sorta make use of Emacs’ Org-Mode. – In the hands of a power user, Org-Mode is something to behold. I am not such a user.].</p>
<p>Physical pen &amp; paper is king, though. (or queen, whatever).<br />
Pens, use colours: e.g. black for thoughts, green for questions, red for “wtf, shit’s not working”, blue for facts (&amp; purple for ‘todo’, if you’ve a purple pen). YMMV, but I find this useful. (esp. if you’re using one of those Bic 4-in-one); compared to monocolour, I reckon 1. helps thinking (like de Bono’s thinking hats?) 2. quicker to ‘parse’ the page 3. can write <em>much</em> more densely on the paper.<br />
Overall, I keep a ‘programming journal’. I’ve heard “if you’re not writing, you’re not thinking”. – “how many pages I filled” makes for quite a nice metric for “how much work you’ve done”. (e.g. -if- when you encounter bugs, or other problems, you’re going to write down that you had this trouble, and alternatives as to how to overcome it.). – As an example, the “CType from arbitrary expression” system was 10 double-sided refill pages worth of work; the loop visualisation was 4 double-sided refill pages.</p>
<p>For this project, I kept a folder full of notes. It’d have things like:</p>
<ul>
<li>Example C program printouts (so, e.g. figuring out what kindof instrumenting would be needed),</li>
<li>Printout of the C BNF, (both ANTLR’s file, and from the C99 standard).</li>
<li>Reference sheets for GDB/LLDB, Thrift, etc.</li>
</ul>
<p>– Point is, printed out, you can write on these, highlight things and in the <em>margins</em> ask questions. (“marginal notes” or “marginal questions”, as such).</p>
]]></summary>
</entry>
<entry>
    <title>Black Ops 2</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2015-09-26-black-ops-2.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2015-09-26-black-ops-2.html</id>
    <published>2015-09-26T00:00:00Z</published>
    <updated>2015-09-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 26, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/call%20of%20duty.html">call of duty</a>
    
</div>

<p>I play CoD for the single player. (Since my computer is usually too bad for the latest, and my internet connection can be sporadic at times).</p>
<p>Since CoD 4, (CoD:MW2, CoD:BLOPS, CoD:MW3) the series has really loved its ‘one-trick-pony’ mechanics. Explosions-and-gunfire-everywhere-omg-intense-action (to the point where you can’t tell what’s going on), and way-too-many-helicopters, etc. have also been staples of the series. – But, I mean like: MW2 iconically begins with climbing up a cliff-face, click-this-button-then-that-button; BLOPS features a section where you control a helicopter gunship; CoD4 ends with quick-time-event cutscene. – These kinds of things, where the action isn’t the “point a gun at enemies, shoot” mechanic.<br />
BLOPS 2 continues many of the same tropes. (Stealth missions, view from a gunship, etc.). But, significantly, it adds on a bunch of things: ‘strikeforce missions’ kindof feel like a ‘one-trick-pony’ thing; customising loadout into a mission (even on first playthrough) / unlocking weapons/perks; a branching storyline.</p>
<p>I’m not a big fan of branching storylines. I hate to feel like I missed out on anything if it wasn’t particularly obvious to find. (Yeah, RPGs aren’t my thing).<br />
And CoD: BLOPS 2 is particularly obnoxious about its storyline; cutscenes are unskippable (even if you’ve seen them before), and can last several minutes before the action starts. – This <em>severely</em> limits the replayability of the campaign/story missions, unfortunately. (But, hey, I guess people buy BLOPS for the zombies mode, anyway).<br />
– The story carries on with characters from the first BLOPS game. (Who cares?). But also has some levels which take place in the future.</p>
<p>Customising weapon loadout is something I do adore.<br />
I liked Crysis’ style better, where you can customise on-the-fly. I guess that’s more reminiscent of the old-school shooters where you could carry more than two guns, so you end up a walking arsenal.<br />
CoD’s gameplay (at least, on the easier levels) doesn’t demand too much strategy from this, though. Weapons/Attachments unlock anyway, so it’s never a scavenger hunt to “find weapon X with attachments Y, Z”. And it’s rarely a question of “should I carry around a bazooka?”, since anytime you encounter a tank, the level design provides such heavy weaponry for you.<br />
But having the <em>choice</em> is fun: choose up-to 3 attachments for a weapon. (Fast reload? Laser sight? Fore-grip? Some kind of scope/sight?); sub-machinegun? assault rifle? sniper rifle? etc.</p>
<p>I was initially confused by the strikeforce missions; I quit the game, which counted as a ‘mission fail’, and so the story progress as a failure. (I didn’t, for some time, figure out <em>how</em> to then ‘select’ the strikeforce mission after ‘rewinding’ the story).<br />
The idea is <em>kinda</em> cool: you play as a soldier who isn’t as invincible as the main character of the story. But, the AI isn’t all that competent, and the RTS-ish controls aren’t all that great. – It certainly doesn’t ‘stand’ as a game in its own right.</p>
]]></summary>
</entry>
<entry>
    <title>An Exercise in Hate-Reading</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2015-09-26-an-exercise-in-hate-reading.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2015-09-26-an-exercise-in-hate-reading.html</id>
    <published>2015-09-26T00:00:00Z</published>
    <updated>2015-09-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 26, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/hate-reading.html">hate-reading</a>
    
</div>

<p>I understand ‘Hate-Reading’ to mean reading something prejudicially / with fore-knowledge that you’re going to dislike it.<br />
You’re not reading it to build-bridges, but to bolster your own attitudes; you’re picking an example of what is condemnable about some group/idea you don’t like, and laughing at it in a “hey, look how <em>stupid</em> this is” kind of way.<br />
Certainly, in terms of rhetoric, saying <em>“look at <em>X</em>, can you <em>believe</em> anyone thinks that?”</em> is a great way to give the impression of stupidity to anyone who does think <em>X</em> isn’t such a bad idea.<br />
– So while I’m not unaware this isn’t constructive, allow me to. - If we <em>do</em> want to be constructive, we ought to try to interpret ‘the best’ out of the piece, rather than just pointing out all that’s wrong with it.</p>
<p>With that out of the way,<br />
this showed up on my timeline:<br />
<a href="http://www.newstatesman.com/culture/music-theatre/2015/09/ryan-adams-s-1989-and-mansplaining-taylor-swift">“Ryan Adams’s 1989 and the mansplaining of Taylor Swift”</a>.<br />
I just know this is gonna be a good one.</p>
<p>The title. The goddamn <em>title</em> includes the word ‘mansplaining’.<br />
If you read through the rest of the article, you’ll also find the keywords: ‘gendered’, ‘appropriated’, ‘patriarchal’, ‘man-baby’.<br />
It even links to <a href="http://www.independent.co.uk/voices/comment/in-her-response-to-nicki-minaj-taylor-swift-has-just-proved-how-shes-white-feminisms-off-beat-bambi-10408320.html">some article pointing out Swift is the patronus of ‘white feminism’</a> (with regards to Swift’s reply to Nicki Minaj).<br />
I’m astounded that the author didn’t use the words ‘straight white male’, also.</p>
<p>To <em>try</em> and be constructive, the opening paragraph at least seems to understand the situation the article describes: ‘not liking pop/mainstream music’ is ‘cool’, and ‘Adams is more indie than Swift’, modus ponens. – <em>That</em> much does make sense, and sufficiently explains what’s going on.<br />
Author’s suggestion of “takes vibrant pop music and makes it blandly meloncholic in an indie way” sounds like it’s accurate, also.<br />
But the author then goes on to point out, rather than this being “media loving ‘indie’ artist covering ‘mainstream’ artist’s music”, it’s instead “media loving ‘male’ artist covering ‘female’ artist’s music”. (For what it’s worth, I’ve not heard of Adams. Presumably he’s popular. And as lazy as “if the genders were swapped” is, I can totally see any author that would use the word ‘mansplaining’ would also see ‘sexism’ in having-heard-of a mainstream male artist &amp; not an indie female artist).</p>
<p>But <em>are</em> the other sites all positive?<br />
A quick search shows <a href="http://mic.com/articles/123530/ryan-adams-is-covering-taylor-swift-s-entire-1989-in-the-style-of-the-smiths">Mic</a>, <a href="http://themuse.jezebel.com/ryan-adams-full-rerecording-of-taylor-swifts-1989-is-he-1732084233">Jezebel</a> both 1) like the album well enough and 2) point out that Swift enthusiastically endorses the idea. – I mean, if <em>Jezebel</em> isn’t ‘calling out’ the sexism of it, right?<br />
– Oh, wait, <a href="http://www.themarysue.com/taylor-swift-and-ryan-adams-respect-for-the-feminine/">The Mary Sue</a> takes the same stance as OP. “people hate pop + idolise indie … which equals gendered sexism” or so. - The Mary Sue goes one further and points out ‘feminine’ things aren’t taken seriously. (Mary Sue then links to some call-out on The Guardian. Oh, internet, don’t stop being so reliable).</p>
<p>– The newstatesman piece also suggests that this instance of ‘mansplaining’ evokes other instances (a woman’s joke not being found funny, only to be laughed at when a man says it; a woman’s idea not being endorsed only to have it be a good idea when a man says it); but given the indie-is-cool dynamic going on, author really does seem to be crying wolf. (If clearly Swift herself likes music, but Adams’ covering it is sexist, then</p>
<p>That said, while I don’t particularly doubt the author’s sincerity in their writing,<br />
at ‘best’ this kind of reaching comes about from some ‘quest to find sexism under every rock’ or so; like wearing shit-tainted glasses.<br />
More cynically, this kind of sexism-under-every-rock garners clicks from 1) people who strive to call out sexism 2) people annoyed at the ‘cry wolf’ call outs. – And since the passionate in either of these groups are likely to dislike the other, it’s likely to be shared emphatically.<br />
And have people write about it on their blog.</p>
<p>Or it could be something else entirely: an indie-lover who sees that some music is ‘too mainstream’. (And liking Swift’s mainstream music is a non-mainstream opinion). – But the idea of something as .. uninspiring as an album review trying to stir shit is fun.</p>
]]></summary>
</entry>
<entry>
    <title>Harnessing the Outrage Machine</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2015-09-19-harnessing-the-outrage-machine.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2015-09-19-harnessing-the-outrage-machine.html</id>
    <published>2015-09-19T00:00:00Z</published>
    <updated>2015-09-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 19, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/outrage.html">outrage</a>, <a href="/tags/south%20park.html">south park</a>, <a href="/tags/media.html">media</a>, <a href="/tags/sjws.html">sjws</a>
    
</div>

<p>South Park’s S19E1 episode, introducing the ‘PC Principal’, seemed to have upset some people. (e.g. <a href="https://twitter.com/thewtfmagazine/status/644391652354879488">this tweet</a>, <a href="https://twitter.com/94_jasy/status/645026598488555520">this tweet</a>.<br />
– For what it’s worth, the episode doesn’t say ‘political correctness is bad’, nor ‘social justice is bad’, and it certainly isn’t pandering to say these things are great. - The episode clearly attacks the disproportionate, abusive, bullying endorsed by the “social justice bullies” (as <a href="https://medium.com/@aristoNYC/social-justice-bullies-the-authoritarianism-of-millennial-social-justice-6bdb5ad3c9d3">aristoNYC’s piece</a> termed it).<br />
The term “Social Justice Warrior” is itself.. fun, since many who endorse its characteristics don’t see it as pejorative: ‘Warrior for Social Justice? How could that be a bad thing?’. (Even aristoNYC’s piece, a pretty good article criticising SJWs, likes the term. Thus, “SJ Bullies”).<br />
– South Parks’ contribution to the lexicon here is ‘great’: <a href="https://twitter.com/SouthPark/status/644377482129371136">“You PC bro?”</a>, <a href="https://twitter.com/SouthPark/status/644377056021602304">“It’s not BRUCE fucking Jenner, it’s Caitlyn and she’s a fucking stunning woman!”</a>, <a href="https://twitter.com/SouthPark/status/644331288426483713">“WOO WOO WOO! You hear that!? That’s the sound of 2015 pulling you over people!”</a> are all sure to be copy-pasted over as height-of-wit when people see someone being a bully. (I do like that last one, it captures the tone of ‘call out’ amazingly well).</p>
<p>Prominent YouTube account GameTheory recently released <a href="https://www.youtube.com/watch?v=tPpBlDaKM_o">this video</a>, pointing out that when the media calls gamers “12 year old losers”, it garners a reaction of outrage. (e.g. Jimmy Kimmell managed to get 3x videos in a row, with very little creativity, each getting more views than his channel usually gets, just calling gamers “12 year old losers”).<br />
The video also features the cliche quote of “first they ignore you, then they ridicule you, then they fight you, then you win” or so. YMMV.<br />
– But the interesting part of the video was from ~10:30ff, when it was pointed out media sensationalism over ‘shark attacks’ were able to create widespread fear of sharks. Such a fear is irrational and unfounded. Another example it pointed out was the media as the chief culprit of the downfall-into-obscurity of some presidential candidate. – I’m not sure how accurate these examples are of how powerful the media can be, but “media’s lens on insignificant issues has an impact on public perception” is somewhat disconcerting.</p>
<p>Surely there’s room for some level of introspection, to be able to say “hey, I’m outraged by this.” then “does it matter?”, and calm down or so?</p>
<p>I’m not quite talking about <a href="https://medium.com/@julien/the-complete-guide-to-not-giving-a-fuck-52bc4be9e7c1">“not giving a fuck”</a>.<br />
– Certainly “let’s ignore all negative feedback, because there’s NOTHING I can do about it” sounds like a terrible idea. (It’s not what the author <em>means</em>, but it’s a conclusion which could be <em>read</em> from it all the same).</p>
<p>– For what it’s worth, I also think “calming down” by way of cat pictures &amp; other cute things in between bouts of outrage seems a technique to make ‘online bezerkers’: if the outrage is never discussed-through, doesn’t that make it easier to increase tensions?</p>
<p>Anyway.<br />
It seems to me some of the common ways to get an affiliate (of whatever) enraged at a speaker/article:</p>
<ol style="list-style-type: decimal">
<li>Unflattering misrepresentation</li>
<li>Unflattering accurate representation</li>
<li>Unflattering reality (for the affiliate)</li>
</ol>
<p>I’m just pulling this out of my ass, so. (Another good way to get an affiliate aroused is some anecdote/story which supports their view of reality: “something bad happened, but if people like me were in charge, it wouldn’t have happened”).<br />
– ‘Being outraged’ is not a particularly sensible response to <em>any</em> of these things. But I suppose if they ‘hurt’ you, you gotta ‘hurt’ them back, right?</p>
<p>– Since being abstract is awful, let me try the above in the context of the South Park episode: it’s upsetting to fans of Social Justice that the ‘PC Bros’ are the ‘bad guys’ (unflatting misrepresentation of ‘social justice’), but also hits close-to-home the vicious nature of SJ bullying online (unflattering accurate representation). – I’ve also seen comments along the lines of how ‘transphobic’ the episode was; perhaps the bullies find it upsetting that not everyone things Jenner is a hero?</p>
<p>Issues which polarise are polarising further than they have before, it seems to me.</p>
]]></summary>
</entry>
<entry>
    <title>Thoughts on Facebook Dislike Button</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2015-09-17-thoughts-on-facebook-dislike-button.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2015-09-17-thoughts-on-facebook-dislike-button.html</id>
    <published>2015-09-17T00:00:00Z</published>
    <updated>2015-09-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 17, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/facebook.html">facebook</a>, <a href="/tags/social%20media.html">social media</a>
    
</div>

<p>So, recently it hit my newsfeed that Facebook was working on a ‘dislike button’.<br />
Except it’s <em>not</em> going to be a ‘dislike’ button, so much as a ‘condolences’ button; for giving one’s regards if a post isn’t appropriate to ‘like’.<br />
– This subtlety didn’t particularly reach the many who failed to read past a headline title. (That is, pretty much everyone on my newsfeed who shared it).<br />
Which leads to reactions like “finally” or “about time” from some,<br />
and from the gentler parts of the internet reactions like “oh no, the <em>trolls</em> are going to ruin Facebook!”.</p>
<p>It’s a little frustrating.</p>
<p>“<em>finally</em>” is a classic reaction to this; I’m pretty sure I’ve seen “if only Facebook had a dislike button” snark from the time I started using Facebook.<br />
But Facebook doesn’t exactly work that way.<br />
You’re ‘friends’ with the people on Facebook, with some kind of connection to the contacts In-Real-Life. That’s quite different to other online sites where you can upvote/downvote posts. – It’s reasonable to ‘like’, or to comment “I love this!” for posts you like, much less reasonable to leave a comment “who cares?” or “you’re stupid” for content you don’t like.</p>
<p>Those concerned about “<em>trolls</em>” or about filling the site with negativity are also misguided. (I mean, even if they were right about it being a “dislike” button).<br />
Partly because friend-to-friend ‘dislikes’ wouldn’t be all that high (though, say, advertising posts or posts on unpopular brands would get quite ‘disliked’).<br />
But also, even the idea of trying to construct a filtered community, constrained in thought by the linguistic allowances of Facebook just sounds really concerning to me. (Let’s not say “bad”, let’s say “double plus un-good”, anyone?).<br />
– Fortunately, <a href="http://www.ted.com/talks/mark_forsyth_what_s_a_snollygoster_a_short_lesson_in_political_speak">the words we speak don’t shape reality</a> (it’s the other way around), but the desire is still unsettling. (Although, admittedly, that’s getting rather alarmist about Facebook, as well as making an Orwell analogy, so, whatever).</p>
<p>But the problem of ‘people not being nice to each other’ isn’t only present in (nor encouraged by) forums which feature dislike buttons, and other negative feedback.<br />
– Both Facebook and Twitter are vaguely similar in feedback mechanisms: a post/tweet can be liked/favourited, or replied-to, or shared. These are all “constructive”, positive things. The ‘negative’ feedback for each is more passive: you can unfollow/mute an account you don’t like, or you can unfriend/block an account you really don’t like, but these indications aren’t explicit on a newsfeed/timeline. – Facebook/Twitter differ in terms of visibility of posts: Facebook’s profiles are private-by-default, Twitter’s are public-by-default. This affects discussion.<br />
The point, is, though, even absent of ‘negative’ feedback like a ‘dislike’ button, these social media sites are <a href="http://www.ted.com/talks/jon_ronson_what_happens_when_online_shaming_spirals_out_of_control">capable of awful harassment</a>. People see something they don’t like, it angers them, people share it with their network, who then also get angry and share it, etc.<br />
– Online shaming is awful, it’s people treating other people like they’re not people, and its presence isn’t dictated by a fucking ‘dislike’ button.</p>
<p>Worse, though, is that.. even short of ‘online shaming’, there’s nothing amazing about users of social media only being in a network with people whom they like.<br />
It’s remarkable, concerning to see <a href="http://www.technologyreview.com/view/539856/this-is-what-controversies-look-like-in-the-twittersphere/">what controversies on Twitter look like</a>. (Hint: They’re the ones where people on each side of the discussion only interact with the people who agree with them, and there’s little discussion between each side).<br />
I’m a big fan of <a href="https://www.youtube.com/watch?v=b86dzTFJbkc">Jonathon Haidt’s talk here</a>, discussing is ‘Righteous Mind’ book. And my thinking is, if people limit their interaction online to those they like, you won’t have folk who only share posts from Fox news being ‘friends’ with folk who only share their posts from Al-Jazeera America (or whatever). – And emphasis on “warm, fuzzy, no negativity” is more likely to lend to a close-minded, homogeneous community than a community which people disagree with each other.</p>
<p>Doom &amp; gloom aside, is there a way to have some discussion forum which’d encourage diversity, encourage people to be able to respectfully disagree with one another?<br />
Because I can’t think up incentive for folk to visit a site for people to tell each other “hey, you’re wrong about whatever”.</p>
]]></summary>
</entry>
<entry>
    <title>Can We Play a Little Nicer?</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2015-09-09-can-we-play-a-little-nicer.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2015-09-09-can-we-play-a-little-nicer.html</id>
    <published>2015-09-09T00:00:00Z</published>
    <updated>2015-09-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  9, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/conflict.html">conflict</a>
    
</div>

<p>It’d be nice if we could raise the level of public discourse.<br />
Or, rather, can we talk to each other less stupidly? D’you think it’s reasonable that we can come together and talk about complicated issues without treating the people we disagree with as idiots?</p>
<p>– Is there a country wherein political discussions are exchanges/arguments of the best ideas from different perspectives; wherein it’s not automatically assumed that those disagreeing are idiots/imbeciles?<br />
If not, I probably shouldn’t complain about how people discuss politics in whatever country. Such discussions are fated to be shit.<br />
But a man can dream.<br />
And for now, surely it’s not too much to be annoyed at seeing shit-flinging on my social media newsfeeds.</p>
<p>I don’t hope for everyone to go around using big poncy words. I rather hope everyone doesn’t.<br />
I also don’t hope for discussion to descent to pedantic finger-pointing out of “logical fallacy!”.</p>
<p>But how bad does your political viewpoint have to be for you to see <a href="https://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt">FUD tactics</a> as a reasonable way to argue?</p>
<p>I wouldn’t mind all this so much if the foolery were settled on one side,<br />
(Or if I weren’t Facebook-friends with these kindof people, damnit),<br />
but wouldn’t some “marketplace of ideas”, to misuse the analogy, be better off if I wanted to buy from everyone selling?</p>
<p>– There’s a reason why pictures of cats (or funny posts about Harry Potter) aren’t so annoying. You’re unlikely to sound like you’ve no clue what you’re speaking about when you share pictures of cats. (Though, speaking about … these things people get righteously uppity about … it ain’t so).<br />
It’s also much harder to be funny or snarky in an elegant way than people tend to think. Most of what counts as “satire” is someone mocking a mis-representation of their opponents viewpoint. – Which is great if you think “ha, they’re calling the people I don’t like stupid/wrong” is a good form of humour, but insufferable otherwise.</p>
<p>Also, yes, merely discussing how people discuss these things, over just discussing ‘these things’ isn’t necessarily any more fun, and can probably also fall into righteous hob-nobbery, but oh well.</p>
]]></summary>
</entry>
<entry>
    <title>Watching Videogames</title>
    <link href="http://www.rgoulter.com/blog//posts/narrative/2015-08-28-watching-videogames.html" />
    <id>http://www.rgoulter.com/blog//posts/narrative/2015-08-28-watching-videogames.html</id>
    <published>2015-08-28T00:00:00Z</published>
    <updated>2015-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 28, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/videogames.html">videogames</a>, <a href="/tags/action.html">action</a>
    
</div>

<p>I kinda think action movies are boring.<br />
I recently watched Fast &amp; Furious 7. I loved it! It wasn’t as quite as stupid or bad as I’d heard it might be. It was good fun, despite being more “Furious” (gunplay/fights) than “Fast” (cars &amp; such). – But despite my love for the absurdly-cool Saturday-morning-cartoon-ish idea of a bus which has 3x automatic miniguns coming from hidden panels.. the plot constrains expectations: the bad guy will be amazingly powerful and untouchable at the start, until the climax, where the good guys will beat the odds and save the day.<br />
I feel the same way about the good parts of Salvatore’s fantasy novels: the violence &amp; action is fun in itself, and the whole “good guy vs bad guy” traditional arc is satisfying.. but kinda ‘boring’ in that it’s extremely hard to make tension/suspense when the outcome is set.</p>
<p>Action <em>videogames</em>, on the other hand, don’t <em>exactly</em> suffer this. - In terms of <em>plot</em>, maybe, since outside of ‘RPGs’, the plot is going to be pretty much the same. So, “good guy wins, bad guy loses” holds true.<br />
But with <em>videogames</em>, there’s no guarantee the player gets to see the whole plot: if you can’t play the game well enough, you don’t get to complete the story. – It’s for things like that why gamers are probably more passionate about things than readers.</p>
<p>But even the hobby of <em>watching</em> videogames <a href="http://blog.semilshah.com/2015/08/23/the-confluence-of-trends-making-esports-go-mainstream/">is becoming more popular these days</a>.<br />
– This is quite understandable with eSports - you can watch people who are very good at a game (whether you understand the game or not), and there’s no reason why this’d be any less fun to watch than sports which demand athleticism.<br />
This also makes sense to watch someone play through a game you can’t play yourself, if you don’t have the console it’s on, or don’t have the money to play.. e.g. I can understand people watching playthroughs of GTA:V if they don’t have a console.<br />
– Or if the game is too scary (or hard, or require too much investment of time to learn); I’d watch a playthrough of someone playing “Outlast”, but wouldn’t play it myself. – The streamer’s reactions can be fun.<br />
And, yeah, it can be entertaining to watch people like Rooster Teeth’s Achievement Hunters, or Yogscast Sips play through games.</p>
<p>What I feel makes no sense is watching someone play a game you could play yourself.<br />
– Besides being passionate about games, the other thing about gamers is their tenacity.. it’s good for games to be a bit challenging. Gamers have the cliche that if you’re fighting bad guys / struggles, then you know you’re on the right path. And by <em>watching</em>, you miss out on that.</p>
<p>– That said, I’m happy enough to play Call of Duty campaigns. It’s popular to hate on CoD as garbage. Certainly the campaigns have always been .. loud, and with enough gunplay and stupid action to make F&amp;F7 look like a case study of physics. – It’d be fair to call CoD “boring”. (If everything in the game is explosions and gunfire, there’s no contrast for the narrative to be able to emphasise any particular part as dangerous or impressive.). But like action movies, it can be fun, too.</p>
]]></summary>
</entry>

</feed>
