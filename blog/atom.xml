<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        
        <email>richard.goulter+blog@gmail.com</email>
        
    </author>
    <updated>2024-05-18T00:00:00Z</updated>
    <entry>
    <title>Experience Updating the C Worksheet Project</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2024-05-18-experience-updating-the-c-worksheet-project.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2024-05-18-experience-updating-the-c-worksheet-project.html</id>
    <published>2024-05-18T00:00:00Z</published>
    <updated>2024-05-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Around a decade ago, I made a <a href="https://github.com/rgoulter/c-worksheet.vim">pretty neat project</a>:
a “worksheet” user interface for simple C programs. – By executing the worksheet, you get to see the program’s
output annotated alongside the source code.</p>
<p>An illustrative example:</p>
<pre><code>int main(int argc, char* argv) {
  int x = 5;                                      //&gt; x is int
  int *px;                                        //&gt; px is pointer to int
  px = &amp;x;                                        //&gt; px = 0x7ffc365efd5c = 5
  *px = 3;                                        //&gt; (*px) = 3
  x;                                              //&gt; 3
  px = 0;                                         //&gt; px = (nil)
  *px = 5;                                        //&gt; SEGFAULT
  x;
  printf(&quot;done.\n&quot;);
}</code></pre>
<p>The <code>//&gt;</code> comments are automatically generated by the worksheet program.</p>
<p><a href="https://github.com/rgoulter/c-worksheet-instrumentor/?tab=readme-ov-file#worksheet-examples">More examples on the c-worksheet-instrumentor readme</a>.</p>
<p>The project consists of a “c-worksheet” program which does all the heavy lifting of computing the C worksheet annotations, and a vim plugin which provides a nice UI for using the worksheet functionality.</p>
<p>I recently performed some maintenance on it to bring it up to scratch, &amp; to check that it’s in working condition.</p>
<p>You’d hope untouched code would stay working. – Nothing changed, so nothing should have broken.<br />
In reality, since the project dependencies constantly get updated (e.g. library dependencies, and system tools), some code needed to change in order to build the code from source.</p>
<p>Logging some thoughts here:</p>
<h2 id="updating-the-c-worksheet-instrumentor-scala-project">Updating the C Worksheet Instrumentor (Scala Project)</h2>
<p>The “C Worksheet Instrumentor” is the Scala part of the project which does the heavy work.</p>
<p>Overall, the changes I made involved:</p>
<ul>
<li><p>Getting the project to build again:</p>
<ul>
<li><p>Updating the <code>build.gradle</code> file to work with recent gradle releases.</p></li>
<li><p>Updating the dependency library versions from Scala 2.11 to Scala 2.12.</p></li>
</ul></li>
<li><p>Updating CI: Fixing mistakes in AppVeyor, removing TravisCI, and adding GitHub Actions support.</p></li>
<li><p>Upon this foundation, some more minor polishing:</p>
<ul>
<li><p>Adding files to work with the Nix package manager.</p></li>
<li><p>Tree-wide automated formatting of the codebase.</p></li>
</ul></li>
</ul>
<p>Most of the project was written in 2015 as part of my undergraduate dissertation.<br />
Since then, I did add CI/CD jobs to the project in 2018.</p>
<p>Implementation-wise:<br />
This “C worksheet instrumentor” project was implemented using Scala, &amp; a parser written with Antlr (which generates Java code from a grammar definition file). The tests were written using ScalaTest.</p>
<p>This tech stack is different-enough from “only Scala files” so as to make setting up the build files annoying.</p>
<p>For building this, I used gradle.</p>
<p>For Scala, I think the SBT (Scala Build Tool) is more common. <a href="../programming/2015-01-19-gradle-or-sbt.html">I wrote about my frustrations trying to set up the project with either back then</a>. (Since then, I moved to use gradle; I think because I was able to add a ProGuard configuration to gradle, but didn’t for SBT).<br />
– I wish I could say my conclusion of “they both suck” was sophomoric. Perhaps “they’re both painful to set up” would be a more precise and tactful way of expressing it.</p>
<h3 id="updating-gradle">Updating Gradle</h3>
<p>In this case, where the <a href="https://github.com/rgoulter/c-worksheet-instrumentor/commits/master/build.gradle">build.gradle file was written in mid-2015</a>, the up to date release of gradle <a href="https://gradle.org/releases/">would have been v2.3; whereas at the time of writing, it’s Gradle 8.7</a>.<br />
– I wasn’t able to use gradle 8.7 to run this old gradle file.</p>
<p>I’ve since learned Gradle tooling itself does have solutions for “different projects depend on different gradle versions”: gradle supports generating a <a href="https://docs.gradle.org/current/userguide/gradle_wrapper_basics.html">“gradle wrapper” script</a>. This wrapper script will download &amp; invoke the appropriate gradle version.<br />
However, for my codebase, using a gradle wrapper generated by gradle 2.3 still ran into some problems:<br />
I couldn’t successfully run the gradle 2.3 wrapper using jdk 21. Not a big deal.<br />
Using jdk 8, I managed to at least build the project; but the tests failed due to a classpath error. (Presumably a transitive dependency updated with a requirement for a more recent Gradle version. – There wasn’t a lockfile of versions used; although <a href="https://docs.gradle.org/6.8/release-notes.html#dependency-management-improvements">Gradle apparently introduced this feature in Gradle 6.8</a>).</p>
<p>Anyway.<br />
Since the code didn’t build, I stripped the <code>build.gradle</code> file down to its basics in order to get <em>something</em> to build.<br />
Previously, I had added code to the <code>build.gradle</code> related to shadowjar and proguard. (shadowjar would help to bundle dependency JARs all into one JAR file, and proguard could assemble a small JAR with stripped down dependencies). I recall adding these partly because I was frustrated with how slow the internet took to download a 20MiB JAR from GitHub Releases. And partly because I liked the idea of the distributed <code>lib/</code> dir having a single JAR.<br />
– Distributing software is hard. I knew less about that back then than I do now, I feel.</p>
<p>I was then able to get an LLM chatbot to help advise me on the changes I’d need to make to the <code>build.gradle</code> file for a more recent gradle.<br />
e.g. it was able to explain to me to change from <code>jcenter()</code> to <code>mavenCentral()</code>, and syntax changes to the <code>dependencies {}</code> and <code>jar {}</code> blocks. This saves several minutes of time &amp; a search or two.</p>
<p>And since Scala 2.11 didn’t run with a recent Java Runtime Environment, I updated the code (and matching dependencies) to Scala 2.12.</p>
<p>In the end: <a href="https://github.com/rgoulter/c-worksheet-instrumentor/compare/cdd47b185df9690f9f5dde78d8f596b5c2af2296..74ceb4c1558450355488431bafe126641c0c480b">diff of changes to get the code to build</a>.</p>
<h3 id="updating-ci">Updating CI</h3>
<p>One thing I did do well with this project was to have a fairly good test suite.</p>
<p>I’d left the project in a state where it had CI jobs running on Travis CI, and on Appveyor.</p>
<p>I do appreciate that these CI services often will let you run jobs for free, if your repository is public.</p>
<p>The CI jobs I have for this project are almost trivial: install dependencies &amp; check that <code>gradle build</code> runs.</p>
<p>In the years since, Travis CI stopped running my jobs. So, I moved the builds for Linux/macOS to GitHub Actions.</p>
<p>The builds failed AppVeyor due to Java version issues.<br />
I got stuck for a moment since AppVeyor wasn’t reading the <code>appveyor.yml</code> file for build details. Deleting/recreating the AppVeyor sorted things out. (It had been something to do with AppVeyor’s behaviour for arbitrary git projects vs for GitHub-linked projects).</p>
<h3 id="adding-nix">Adding Nix</h3>
<p>The <a href="https://nixos.org/">nix package manager</a> has been a valuable tool to learn. It’s got a steep learning curve, but it’s very good at dealing with problems related to packaging. (Which, for developers, turns out to be <em>a lot</em>).</p>
<p>One of the ways that writing CI/CD can be frustrating is for cases where something works locally, but figuring out how to run it on a fresh host can be frustrating.<br />
With nix, this isn’t an issue. – Indeed, the CI/CD job I added which used nix really is trivial: it installs nix, and then runs <code>nix build .</code>.</p>
<p>Another advantage with Nix is easy setup for isolated development environments. I remember reading blogposts like “my development setup for <lang>”. These days, it’s pretty much “a formatter, a linter, a language server”. Using a <code>shell.nix</code> means it’s easy to make these tools available (i.e. installed) when working on the project.</p>
<p>The difficulty I ran into adding Nix support for the project was due to differences between how gradle wants to manage dependencies, vs how nix wants to. Searching through the nixpkgs codebase, a common approach is to use some kind of <a href="https://nixos.org/manual/nixpkgs/stable/#maven">Fixed Output Derivation deps pattern</a> in order to deal with the idiosyncracies of each. (Also, gradle uses <code>~/.gradle</code>, and nix builds its packages with <code>HOME</code> set to a non-existant directory, so the <code>gradle.user.home</code> had to be explicitly set to avoid issues).</p>
<h3 id="minor-polishing">Minor Polishing</h3>
<p>With the code building from source, and CI/CD in working state so as to run the build/tests for each commit, changes can be made with the confidence that if anything breaks, CI/CD will be able to catch problems.</p>
<p>I spent time to add an “End to End” integration test: a test which called the command line program, and checked the results of the output. This was an improvement over the existing test suite, which ran the Scala code in-process.</p>
<p>I also noticed that some tests failed when running on macOS where <code>cc</code> defaults to <code>clang</code>.<br />
Turns out, some of the Worksheet functionality works with GCC but not Clang.<br />
So, I refactored the tests so that the relevant parts of the test suite could be run with either GCC or with Clang.</p>
<p>Another polish to add to the project was using <code>scalafmt</code> to ensure consistent code formatting across the project.</p>
<h3 id="chatbot-llms-often-useful">Chatbot LLMs Often Useful</h3>
<p>As mentioned, I found a chatbot LLM to be useful for helping to update the code.</p>
<p>To be honest, tasks like “update CI/CD” or “update the build file” are not glamorous: they might require knowing a fair amount about the tools, but the tools provide limited value.<br />
(Whereas e.g. Nix is a powerful tool which lends itself to use cases outside of just “build this project”, and so is worth taking the time to learn).<br />
– For these tasks, using chatbot LLMs helps make progress without having to spend a long time learning the tool.</p>
<p>e.g. Since gradle files are written with the Groovy language (a Ruby-ish JVM language), and this is the only use of Groovy I have, it’s quicker to ask a chatbot “please write the Groovy code to…” than to spend time looking up Groovy syntax, and what methods Groovy lists have.</p>
<p>Where I found it limited, with the LLM I was chatting with, was when I was asking a dumb question (trying something that goes against the grain of a tool’s approach), the chatbot was more inclined to give me an answer that sounded helpful, than to push back and say “no, it doesn’t work that way”.</p>
<h3 id="lost-context-and-knowledge">Lost Context and Knowledge</h3>
<p>Working on a project so intermittently means you suffer from losing context/knowledge of various parts of it.</p>
<p>Phrasing this in terms of risk and change: using something more unusual means there’s a higher risk that it’s more difficult to change if you need to.</p>
<p>The more implicit and magical something is, the harder it is to identify.</p>
<p>Scala is a complex language with a wide variety of sophisticated features.<br />
I haven’t had to change the Scala codebase all that much. However, I do appreciate its ‘sophisticated’ features, such as the pattern matching, and named arguments.</p>
<h2 id="updating-the-vim-plugin">Updating the Vim Plugin</h2>
<p>The C Worksheet is a neat idea, but it only really sense for the UI to be part of a text editor (rather than just listing annotated output on the command line).</p>
<p>I had written <a href="https://github.com/rgoulter/c-worksheet.vim">c-worksheet.vim</a> back in 2015.</p>
<p>Implementation-wise:<br />
The meat of the code was fairly straightforward: rather than leaning on vimscript, I used vim’s python commands in order to invoke Python code; and that Python code managed the interface between the Vim source and the c-worksheet output.</p>
<p>The upside to using vim’s python integration was not having to wrangle with vimscript to figure out how to interface it with the Scala program.<br />
The downside was that it was affected by Python’s less-than-smooth transition from Python 2 to Python 3.</p>
<p>In 2015, it was fine to use the python2 <code>pyeval</code>. In 2024, I needed to use the python3 <code>py3eval</code>.</p>
<p>Other than updating the Python code, the rest of the vimscript fortunately still worked. +1 to vim’s support backwards compatability.</p>
<p>I saw that Vim has a new native package management functionality, with commands like <code>:packadd</code>.<br />
However, I was using the <code>autoload</code> feature to defer loading much of my plugin’s loading, and using <code>ftplugin/c/</code> in order to provide my plugin functionality to C files.. – Using <code>:packadd</code> is also a way of deferring when code gets loaded; but by loading the package when opening a C file, it wouldn’t then also load my plugin.<br />
– The intricacies of how vim loads its vimscript is something I didn’t entirely recall. (Albeit, I’ve moved on to using Doom Emacs as my primary editor).</p>
<p>After updating the code, I took the time to write a few tests for the code.<br />
In this case, integration tests that checked the plugin could run <code>c-worksheet</code> against a “Hello World” source file. (And some non-functional tests to check that the plugin behaves if the <code>c-worksheet</code> program isn’t available).</p>
<p>The main trouble I had with this was trying to setup CI/CD with Windows.<br />
The computer I use for day to day things is Linux. I happen to have Windows installed on another partition; but, I’m not very familiar with the Windows command line.<br />
(And also, Vim’s batch mode didn’t behave well on Windows; I was able to set up the tests using Neovim, but not Vim).</p>
<p>With hindsight, there are things I wish I’d done better. The code could have been written more defensively: e.g. <code>pyeval</code> is gated behind vim’s <code>python2</code> option. My code doesn’t guard against this. Nor does it guard against whether the <code>c-worksheet</code> command can be run. And its ‘service management’ is naive/sloppy; the interface with the C Worksheet Instrumentor is also naive/sloppy. – The code was clearly thrown together to the level of “it’s at least useful in some cases”, rather than “it’s cleanly and robustly useful in as many cases as it can be”.</p>]]></summary>
</entry>
<entry>
    <title>Finally Playing Medal of Honor Airborne</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2024-05-17-finally-playing-medal-of-honor-airborne.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2024-05-17-finally-playing-medal-of-honor-airborne.html</id>
    <published>2024-05-17T00:00:00Z</published>
    <updated>2024-05-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’d bought “Medal of Honor Airborne” on Steam many years ago, but had been unable to play it. Something about compatibility with my graphics card.<br />
My desktop runs Linux these days; Valve’s Proton works pretty well for Windows games, and ProtonDB said that MoHA ran just fine. So, I was able to give it a go.<br />
It more/less worked! Albeit, the game was frequently laggy (and occasionally crashed).</p>
<p>Mostly I didn’t like the game. Here’s what I thought of it:</p>
<h2 id="parachuting-and-its-effect-on-level-design">Parachuting and its Effect on Level Design</h2>
<p>The game is set during WW2, and you play as an American paratrooper.<br />
This enables the game’s key ‘gimmick’: when you start the mission, you parachute into the mission.</p>
<p>The levels are then designed in two parts: the first half is a somewhat open map you parachute into, and the second half is a more traditional/linear experience.<br />
Optimistically, this is a nice way to hedge a potentially risky game design choice: since the second half of each mission reverts to the traditional linear gameplay style, then at least there’s that if the parachuting mechanics don’t work well. (Pessimistically, it’s a conflict of design vision).</p>
<p>The “parachute into the level” still feels relatively unique for mission-focused single-player shooter games.<br />
e.g. multiplayer games like Battlefield feature parachuting.. and it’s a strategic aspect of the “battle royale” games like PUBG or Fortnite, etc.<br />
The Just Cause series features the player being able to fly around; but Just Cause is an open world game through to its heart, and its missions are a light layer on top.</p>
<p>To an extent, “well crafted experience” conflicts with “open world sandbox”.<br />
Medal of Honor generally prefers to aim for the cinematic former.</p>
<p>In MoHA, the level design ends up having a very open start, which branches off into more linear chunks where the player completes each objective. (e.g. “destroy the ammo cache” will be its own linear segment of a level; and “clear the anti air defenses” will be a separate linear segment).</p>
<p>In some cases, the player can parachute right to the end of one of these segments; but, the mission objectives are heavily defended, and then you don’t get to parachute into the next objective either.</p>
<p>Overall.. I thought this was a pretty neat game mechanic.<br />
I don’t think it adds enough to the game to be worth implementing.</p>
<h2 id="downsides-to-the-parachuting-as-implemented-checkpoints-and-progress">Downsides to the Parachuting as Implemented: Checkpoints and Progress</h2>
<p>As it’s implemented in MoHA, the parachuting did lead to some frustrating gameplay, or at least how it interacted with checkpoints.</p>
<p>Checkpoints are based on completing objectives.<br />
If you die before completing the (initial) objectives, you’ll parachute into the level again.<br />
And all the enemies on the map respawn.<br />
AFAICT, enemies continuously spawn (up to a limit), based on ‘morale’.<br />
– This wasn’t immediately clear to me, but it did frustrate me a bit. It meant that I might spend a significant amount of time killing enemies and making progress, only to have that all undone if I died before reaching an objective. (In contrast, if there are two objectives close together, you can get checkpoints very quickly).</p>
<p>If there were a finite number of enemies, then this wouldn’t run into the same frustration. As is, it means that “turtling” is just the wrong way to play the game.<br />
If checkpoints were more frequent, this wouldn’t run into the same frustration.</p>
<h2 id="shooter-mechanics">Shooter Mechanics</h2>
<p>These felt a bit clunky to me.</p>
<p>The first thing that seemed clunky was the ammo.<br />
In the earlier Medal of Honor Allied Assault, enemies drop ammo for the guns they use. An enemy with a rifle drops rifle ammo, an enemy with a submachine gun drops submachine gun ammo. You didn’t get to swap to use <em>their</em> rifle.<br />
In MoHA, the drops from enemies seem random. They might drop their weapon, in which case you can swap to use that. You don’t pick up ammo for your rifle from their rifle. They might drop health. They probably don’t drop anything at all.</p>
<p>But since the enemies continuously spawn (until pushed back), this meant my initial experience with the game was running out of ammo shooting at the enemies, and not being able to find ammo pickups.</p>
<p>The game does compensate for this by giving your pistol infinite ammunition.</p>
<p>You avoid these problems by taking a somewhat more aggressive approach:<br />
By pushing up, the enemies will ‘retreat’; once pushed back to the objective, the enemies stop respawning.</p>
<p>The most strikingly clunky thing about the game (compared to shooters since) is the “aim down sights” mechanic.. the intended use is for the player to use this behind cover, and then peek around cover to shoot enemies. For this, the game keeps the player standing, and the movement keys are used for ‘peek’.<br />
In practice, players will want to move about while using this ADS. MoHA supports this, but it’s not the default, so it feels clunky.</p>
<h2 id="the-flow-when-it-worked">The Flow, When it Worked</h2>
<p>Once I figured out the idiosyncrasies.. the gameplay loop that ended up mostly working was reasonable: rush up to cover near an enemy (or ideally, to a position which flanks the enemy), do the shooting while trying to not get shot, rinse &amp; repeat.</p>
<h2 id="rocket-spam-from-enemies-got-tiring-quickly">Rocket Spam from Enemies Got Tiring Quickly</h2>
<p>There are enemies with rocket launchers.<br />
These would spam rockets, which I found annoying.<br />
I found this particularly obnoxious because there was such a high duration between checkpoints.</p>
<h2 id="story">Story</h2>
<p>The game has a weird mix of tone.</p>
<p>Videogames are supposed to be fun. (Except maybe the pretentious artsy bullshit ones). War and history is horrible.<br />
So, games with historical parts aren’t going to be fully realistic. Some games aim to be simulations, some aim to be more arcade-like.</p>
<p>I reckon the game series that had a great balance between arcade and realistic is “Brothers in Arms”.<br />
BiA’s is a tactical shooter.. in the sense that you can’t just run up and shoot the enemies; it’s ‘tactical’ in the sense that the levels are designed around the idea of using your squad’s fire team and assault teams to suppress and flank enemy positions.<br />
Rather than “1 man vs 100 soldiers”, it’s closer to “6 soldiers vs 5 soldiers; then another 5 soldiers; and another 5 soldiers”.<br />
Regarding history, the level design mimicks the after-action reports from the fight themselves. So reading the AAR feels familiar.<br />
Regarding story.. by being very <em>subtle</em>, the game is much more impactful about your squadmates dying.</p>
<p>The story of MoHA is very “cheesy war movie” in its tone.<br />
It has no weight because the gameplay is so unrelated.<br />
At the start of every mission, the plane you fly in gets shot and its engines are on fire. Because that’s what happens in war movies.<br />
But there’s never any consequence to this.. so you get this “ludo-narrative dissonance”. The conflict between the game (where there’s no risk) vs the story (where it’s super risky).<br />
– Whereas, there are ways to ‘marry’ the gameplay and the story. e.g. in Far Cry 5, as you progress through the story, you get kidnapped by the henchmen of the boss in each region. For the boss with the theme “illusion of control”, the gameplay allows you to (temporarily) defer the kidnapping; giving you the illusion that you have more control than you really have.</p>
<p>MoHA’s battlefield is constantly filled with noisy combat; dozens of soldiers in every direction. NPC allies constantly getting gunned down, in game and in cutscenes.<br />
It has no weight at all.<br />
NPC allies just feel like “progress markers” more than anything else.</p>
<p>I guess some would say MoHA is realistic in the sense that you can’t just run and gun here, either.<br />
But, say, your pistol has infinite ammo, you can start missions with a loadout of German weapons, there are enemies which spam an endless stream of rockets at you, and enemies who carry MG42s and have ‘bulletproof’ gas masks or something.</p>]]></summary>
</entry>
<entry>
    <title>The Three Difficult Things about Nix</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2024-05-09-the-three-difficult-things-about-nix.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2024-05-09-the-three-difficult-things-about-nix.html</id>
    <published>2024-05-09T00:00:00Z</published>
    <updated>2024-05-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://nixos.org/">Nix</a> is a fancy package manager, with a bunch of powerful features.</p>
<p>One thing it’s notorious for is its steep learning curve.</p>
<p>Although generally, learning to write Nix code is difficult for the same reasons a lot of other tech is difficult (e.g. you have to be aware of what’s possible, and unfamiliar things are always going to be have friction compared to what’s familiar), I reckon there are a bit more specifically three reasons why Nix is difficult.</p>
<p>Any difficulty someone is having when trying to use Nix almost always falls into one of:</p>
<ol type="1">
<li><p>difficulty with the Nix package manager itself.</p></li>
<li><p>difficulty with the Nixpkgs codebase.</p></li>
<li><p>difficulty with software and how it mixes with Nix’s approach.</p></li>
</ol>
<p>Discussing this a bit more:</p>
<h2 id="three-difficulties">Three Difficulties</h2>
<h3 id="difficulty-with-the-nix-package-manager-itself">Difficulty with the Nix Package Manager Itself</h3>
<p>When learning about Docker, you’ll need to learn about the difference between an “image” and a “container”.</p>
<p>Or when learning Terraform, you need to build an intuition for how the providers model and manipulate the resources being declared.</p>
<p>With the Nix package manager, there are also a bunch of concepts to learn.</p>
<p>Nix’s approach to package management is quite different to how traditional package managers have done things. So, with Nix, you end up bumping into weird terms like “derivation”, “instantiate”, “realise”.</p>
<p>I disagree with many who say things like “I like the idea of Nix, but wish I could write it in JavaScript”. The Nix expression language is <em>essentially</em> a “JSON + function (+ imports)”, similar to languages like Jsonnet (which I don’t hear the same complaints about).<br />
But, I agree it’s fair to say that the Nix expression language’s laziness can lead to code that’s very “clever” (and hard to read). And concepts like “partially applying a function” are common in functional programming, and unusual/exotic otherwise.<br />
And e.g. it took me some time to wrap my head around why many Nix files would open with <code>{ pkgs ? import &lt;nixpkgs&gt; {} }:</code>.</p>
<p>Much of the community has adopted use of Nix Flakes.<br />
There are several things about flakes that are not very ergonomic, and not all that intuitive, although overall I think they’re not too difficult to understand, and using flakes comes with more benefits than disadvantages.</p>
<h3 id="difficulty-with-the-nixpkgs-codebase">Difficulty with the Nixpkgs Codebase</h3>
<p>Nixpkgs is somewhat comparable to the “standard library” of Nix.</p>
<p>A lot of Nix code will typically use common functions in nixpkgs. e.g. functions like <code>pkgs.mkShell</code> or <code>buildPythonPackage</code> <a href="https://wiki.nixos.org/wiki/Python">on the NixOS wiki page for Python</a> are a part of the nixpkgs codebase.</p>
<p>Nixpkgs is a large codebase. It’s not immediately clear what’s useful and available. As you dive deeper into Nixpkgs, you quickly see it’s filled with a mixture of similar-but-different and often “clever” solutions to similar problems.</p>
<p>I think this is responsible for a lot of difficulty with <em>writing</em> Nix code. (Although I think e.g. <a href="https://nix.dev/">nix.dev</a> now does a lot to ease over the rough edges of getting started).</p>
<p>If you provided <code>pkgs.mkShell</code> in JavaScript, it would still be confusing to use.</p>
<p>It can be difficult to figure out how to properly access and manipulate code in nixpkgs.</p>
<p>The <code>lib.customisation</code> <a href="https://nixos.org/manual/nixpkgs/stable/#sec-functions-library-customisation">lib functions</a> are both confusing to understand and related to <code>.override</code> and <code>.callPackage</code> functions which are extremely common when dealing with Nix packages.</p>
<h3 id="difficulty-with-software-and-how-it-mixes-with-nixs-approach">Difficulty with Software and How it Mixes with Nix’s Approach</h3>
<p>This sorta applies more to NixOS than to Nix. (If someone runs into problems with Nix on non-NixOS, they can always just do things without touching Nix).</p>
<p>One of the reasons Nix is difficult is that when something goes wrong, it often requires a deeper and broader understanding of what’s going, compared to other Linux systems. – You might need to understand what nix is doing, what the nixpkgs code in use is doing, or what the system-under-nix is doing.</p>
<p>As a novice programmer, I could get by with copying and pasting snippets from StackOverflow (after searching for whatever error message I encountered). – Not so if you run into problems when on NixOS!</p>
<p>Nix doesn’t <em>replace</em> other Linux things (like <code>make</code>), so much as it uses them in an uncommon way. – I recall reading a comment where someone’s cold shower against Nix hype was that it was “just” using <code>make</code> &amp; symlinks. – Nix and NixOS mean an additional layer that may need to be understood.</p>
<p>Probably the most common example of this problem is that it’s difficult to run pre-built binaries on NixOS, unlike on most other Linux distributions. On other Linux systems, shared libraries get installed into a global location, and pre-built binaries are able to find these. Whereas NixOS puts shared libraries in isolated locations, so pre-built binaries don’t run without some massaging.</p>
<p>It can be extra frustrating that something is easy on other Linux distributions but may be difficult with Nix/NixOS.</p>
<h2 id="other-remarks">Other Remarks</h2>
<p>There are sometimes difficulties people run into with Nix that don’t really fit into these categories. e.g. sometimes a tool takes an approach which doesn’t map well to how Nix wants things done. But, if someone has the above difficulties covered (they’ve got a good understanding of Nix, the relevant parts of Nixpkgs, and of what the program is doing), then the problem is more likely to feel tractable.</p>
<p>Another way of putting the above difficulties is “you gotta know what you’re doing (if something goes wrong)”.<br />
And for many developers, there’s an expectation of being able to get pretty far without needing to spend a long time learning all the details. (Often this is a pretty good strategy!).</p>
<p>I think to some extent, some of that difficulty is fundamental.<br />
Nix provides benefits like “will work the same way next time you run it”, and this demands it comes with a level of strictness.</p>]]></summary>
</entry>
<entry>
    <title>A Wish for More Accessible Classic Tomb Raider-ish Games</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2024-05-06-a-wish-for-more-accessible-classic-tomb-raider-ish-games.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2024-05-06-a-wish-for-more-accessible-classic-tomb-raider-ish-games.html</id>
    <published>2024-05-06T00:00:00Z</published>
    <updated>2024-05-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve been playing through the Tomb Raider I-III Remastered collection of games.</p>
<h2 id="yay-remasters-of-old-games">Yay, Remasters of Old Games</h2>
<p>The remaster fits in with a loose trend of some classic games being remade or remastered, and re-released.</p>
<p>e.g. to my mind, the Age of Empires series did a good job with this: Age of Empires 2 got an HD re-release. After that succeeded, much effort was put into remastering Age of Empires 1, which got a “Definitive Edition” re-release. Then Age of Empires 2 got a subsequent “Definitive Edition” re-re-release, followed by several DLC expansions. Some of the changes to the game have been “Quality of Life” changes which have reduced the skill for for playing the game. (e.g. showing the build queue in the UI).<br />
The publisher Nightdive Studios are an outstanding example of quality stewardship for remastering games. I played through Turok 1 and 2 that they remastered, and they did a good job polishing these games up so they can be played on modern systems.</p>
<p>“Boomer shooters” have seen a resurgence in popularity in the last few years. The game “Cultic” is an absolutely <em>excellent</em> example of a new title which enhances the title. I think the YouTuber Civie described games like this as both respecting what made the genre popular, while also including enough to surprise and delight experienced fans of the genre.</p>
<h2 id="the-tr-remastered-collection-is-faithful-to-a-fault">The TR Remastered Collection is Faithful to a Fault</h2>
<p>Anyway.<br />
Tomb Raider Remastered.<br />
This polishes up the game so it can run on modern systems.<br />
Although most of these changes could be described as superficial (e.g. Lara’s model now looks as gorgeous as she does in the marketing materials; and the game has many Achievements to get), the Remastered game did have some changes to improve quality of life: icons will show up to indicate when Lara can interact with an item, and the game supports using a more ‘modern’ control scheme, rather than the classic ‘tank’ controls.</p>
<p>The classic Tomb Raider games are quite notorious for being hard.<br />
Well, many classic games are. (e.g. some of the Turok 2 levels are convoluted mazes to navigate through, despite the gameplay otherwise mostly focusing on shooting).<br />
But, certainly for the Tomb Raider games, I think pretty much everyone who collects all the secrets would have looked up a walkthrough at some point.</p>
<p>It’s kindof a shame that the Remaster is <em>so</em> faithful to the original so as to not add <em>more</em> quality-of-life features. I suspect that’s mostly about time/budget constraints.<br />
But, say, in the same way that there are games inspired by classic games which have good quality-of-life improvements, maybe there’s room for a similar treatment for classic Tomb Raider.</p>
<p>What I mean is:</p>
<ul>
<li><p>Gameplay with the same <em>dynamic</em> as the original.</p></li>
<li><p>Quality of life improvements.</p></li>
<li><p>Ways of lowering the skill floor, so that the game has a friendlier introduction for beginners.</p></li>
</ul>
<h2 id="definitively-tomb-raider">Definitively Tomb Raider</h2>
<p>The classic Tomb Raider games are a mix of adventure and action.<br />
The classic games also get quite scary at times.<br />
I guess different players are going to prefer different mixes of each of these.</p>
<p>e.g. The Myst games are pure adventure: there’s no combat, and it’s pretty much exploring exotic locations and solving (sometimes purely) puzzles. – If you just put Lara Croft as the protagonist in these, it still wouldn’t be “Tomb Raider”.<br />
There are some “Lara Croft” spin-off games which have twin-stick top-down shooter gameplay. These involve a lot of combat, and some puzzles. But, the level design is so smooth that you’re never going to feel lost or confused about how to make progress.</p>
<p>I think a key dynamic of the adventuring is building an understanding of the map, and engaging the player’s understanding of that.<br />
An example is TR2’s Venice level. The final half of the level involves the player having to figure out how to clear the mines to the exit, how to open the exit door, and how to raise two gates so as to be able to race from the “open exit” button to the exit. – When playing, if you’re missing any of these, you have to explore around and try different things.</p>
<p>The most antiquated yet defining part of the classic Tomb Raider games is the grid-based level design, which pairs with the “tank” controls.<br />
“Tank” controls are “pressing up moves the Player Character in the direction the Player Character is facing”. Whereas “modern” controls are more intuitive with twin-stick controllers: one stick controls the camera, the other directs the player character relative to the camera.<br />
The grid-based levels is so antiquated because it feels like the level is made out of boxes.<br />
But.. it allows for a clear set of navigation rules: Lara can reach so-and-so far by doing a standing jump, or further with a running jump. – In “modern” games like the Tomb Raider games after 2006, navigation is restricted to ledges which have been specially added onto the finely-crafted levels. These ledges stick out as relatively “shiny”, in contrast to uninteractable background details. I think that’s a step-down, since it limits the player having to reason about where to go.</p>
<p>Though, I’d also heard the difference put as: the classic TR games have a protagonist who is exaggerated; in gameplay, she’s going to die a lot as the player experiments as to how to get through the level. (TR2’s the ultimate Floating Islands is very easy to die on!). Whereas, the modern TR games are big budget, and need to be mass appeal, so can’t be as frustrating; the player is encouraged to “protect” the protagonist, and take care to prevent the protagonist from dying.</p>
<h2 id="that-sounds-like-itd-be-cool-wishlist">“That Sounds Like it’d be Cool” Wishlist</h2>
<p>I reckon it’d be neat to see some things like this; either to bring the same gameplay of the classic Tomb Raider to more modern standards, or for making the game easier (for those who need that).</p>
<p>For suggestions of things that’d make the game easier, I mostly mean in terms of “it’d be good to have an easier difficulty option”.</p>
<h3 id="pickups-and-secrets">Pickups and Secrets</h3>
<p>Some help-me quality of life features could be added to collectibles:</p>
<p>In Just Cause 3, one gameplay mechanic involves having to destroy <em>all</em> the red-painted infrastructure in a military base. At the start, this is really easy; but as you destroy more of the infrastructure, it becomes harder to find the rest of what you need to destroy. The game map compensates for this: as you destroy more, then the remaining things progressively fade in on the map.. so by the time you’ve destroyed 95% of the infrastructure, the remaining few things to destroy are clearly marked on the map.</p>
<p>Doom Eternal has several kinds of secrets and upgrades to collect.<br />
You can even upgrade your character to make it easier to find secrets!<br />
This enhances the replayability of the game: finding extra secrets makes you more powerful; and you can use that power to make it easier to get more secrets.<br />
This included “cheat codes”.. which, while they couldn’t be used when playing through the levels for progressing through the story, could make for some cathartic replays of levels.</p>
<p>In the playthroughs I’ve seen of the newer Resident Evil games, the map will colour-code whether an area has had all items picked up or not. This seems like a really neat way to guide the player.</p>
<p>I reckon ideas like this would suit classic Tomb Raider gameplay.</p>
<h3 id="combat">Combat</h3>
<p>As I see it, classic Tomb Raider’s combat is .. clunky.<br />
It works best when Lara is fighting animals (where the main ‘skill’ involves jumping around to avoid being hurt, while shooting back), and is more clumsy against armed opponents (there’s a large RNG element that dictates whether they shoot Lara or not; jumping around the level barely helps).<br />
Meshing with this is the trade-off of whether to use the weak pistols which have unlimited ammo, or use a more powerful weapon (where you might need to preserve ammo).</p>
<p>The “modern” Tomb Raider games got rid of tank controls and made the combat a somewhat typical third-person shooter; and it didn’t mix well with the rest of the game.</p>
<p>For the classic Tomb Raider style combat, I reckon some ideas that’d fit with the rest of the gameplay:</p>
<p>Halo does a good job of presenting other tradeoffs/constraints: limiting the player to choosing only two weapons, and having multiple kinds of enemies: laser guns are good vs the shields (that the enemies have), but bullet guns are better vs unshielded enemies.<br />
– I mean, this makes the choice of weapon more tactical than just “use uzis until I run out of ammo”.</p>
<p>Doom Eternal does an even better job at “action-puzzle gameplay”: you could replenish your ammo by using a chainsaw on enemies, and replenish health using ‘finisher’ moves on weak enemies. The notorious Marauder enemy would block shots, and require timing to take down.<br />
– Again, here it adds a level of engagement to combat beyond “use the shotgun until the enemy disappears”.</p>
<p>– Mechanics like these don’t coherently mesh with fighting wolves, tigers, and henchmen.. sure.<br />
But, they might make sense if fighting robots or zombies or mythical creatures.</p>
<h3 id="scares-and-horror">Scares and Horror</h3>
<p>I don’t really like scary things!</p>
<p>But on the other hand.. scary parts can be quite memorable in the Tomb Raider games.<br />
There are parts of TR2’s “Ice Palace” level that are quite scary: there’s a pitch black room, and you can hear the growls of yeti monsters. – Yet, the Remaster ‘toned down’ how scary this part was, by using lighting which illuminated the room; that undermined the point of “scary because you can’t see the room”.</p>
<p>There are parts of TR that are (deliberately) unpleasant to play because of this: threats like sharks in water sections, or there’s a dark cave full of spiders in the Temple of Xian level.</p>
<p>I think it’d be kinda neat to have the option to ‘disable’ some of those scary parts.. or, an easier modes, give the player decent tools to couch the scary parts. – e.g. Make the player stronger in water combat (&amp; without the tension-building limited ammo), or give the player a decent flashlight.</p>
<h3 id="adventure-and-puzzles">Adventure and Puzzles</h3>
<p>In terms of adventure and puzzles:<br />
IIRC, most of classic TR’s puzzles are more about ‘finding’ a key item (and so the level design ought to take you to the key and back), or are about <em>timing</em> / navigation.</p>
<p>There are few puzzles that are ‘puzzles’ to the same degree of adventure games like Myst. (Albeit, in the recent TR games, there are side-quests/dungeons which feature fairly sophisticated puzzles in this sense).</p>
<p>I think TR2’s first “Great Wall” level is a good demonstration of typical TR puzzles: the ‘challenge’ in the first area is to figure out where you’re supposed to go (&amp; the challenge of executing the jumps). The next challenge is how to get through a locked door: you dive into a small pond, find the key, get ambushed by a tiger, then make your way back up to the lock. There are secrets slightly off the main path that you can take the time to find.</p>
<p>I think the best designed TR levels are those that appear to be non-linear, but allows for a somewhat linear flow. – e.g. TR2’s “Opera House” is a daunting maze where it can be confusing to know how to progress.. kindof like a hub-and-spoke; and each spoke is a small section that unlocks access to the next spoke of the hub.</p>
<p>One of the reasons I think the grid-based level design is so central to the gameplay is you’ve got a clear, predictible, tangible logic for what the player can try to explore vs not.<br />
At the lowest level, “can I make that jump?”;
at a higher level, “have I exhausted all options in this area?”.</p>
<p>One way to make this style of gameplay easier would be to have maps that ‘hint’ at navigatable areas the player hasn’t visited.<br />
So, if a player is stuck, then looking at the map could hint at places the player can reach.<br />
Mainly I’m thinking of cases where I got stuck, and how this might have helped:<br />
e.g. one place I got stuck was TR2’s “Venice” level, where it wasn’t obvious to me that I was supposed to jump onto the bridge. The player has access to a big area, so it was easy to overlook. – I’m imagining that I could have opened a map, and seen the bridge with some kind of colour indication of “seen &amp; reachable, but not visited”.<br />
Similarly, I got stuck in TR2’s “The Deck” in the big underwater lake, by forgetting about a corridor back to the deck that I had overlooked.<br />
Or when I got stuck in TR3’s “Crash Site” by not figuring out how to get on top of the plane…
etc.</p>
<p>I mean.. sure, getting stuck is part of the experience; but “looking it up in a walthrough” is kindof a lame way of getting through, too.</p>
<p>One quality-of-life suggestion, IMO, is that level design should be almost entirely ‘reversible’.<br />
In TR, when you’re first playing a level, you’re never quite sure whether a path takes you to where you’re supposed to go, or to a secret, or to a pickup. Often in TR’s levels, once you go past some part, you can’t navigate back, which means you’d need to replay a level to get all the secrets.</p>
<p>e.g. in Doom Eternal, each map is similar to a bunch of combat arenas with platforming sections in between. It’s always possible to get back to the start from the end; and once you’ve beaten the enemies, you can also “fast travel” around the map.</p>
<h2 id="remarks">Remarks</h2>
<p>I think, if you squint, the games from Crystal Dynamics do implement some of these things.<br />
e.g. Rise of the Tomb Raider leaned into its combat, and had alternate modes which enhanced replayability.<br />
Or the TRL/TRA had cheat codes.<br />
e.g. TRU had a “Treasure Hunt” mode where you could explore through a level, after killing enemies.</p>
<p>But, as I recall, it’s more about what they add that takes away from having the same feeling as classic TR.<br />
e.g. by having a headset and chatting with others.. it detracts from “player mastering the level”, or really “player vs the environment”.<br />
e.g. by having combat and navigation be such disparate systems, the player gets a feeling of when they’ll be fighting vs when they’ll be navigating ledges.<br />
e.g. RotTR, SotTR were semi-open-world-ish at times, “as was the style at the time”.
e.g. levels are linear enough that you rarely feel “stuck” in a large enough arena.</p>
<p>Seems like the TRLE community has worked to keep the classic games alive.</p>
<p>I also remember playing Indiana Jones and the Infernal Machine, which had gameplay kinda-sorta similar to the classic Tomb Raider games.</p>]]></summary>
</entry>
<entry>
    <title>Using Terraform to Manage an Object Stored in OpenStack Swift</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2024-04-09-using-terraform-to-manage-an-object-stored-in-openstack-swift.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2024-04-09-using-terraform-to-manage-an-object-stored-in-openstack-swift.html</id>
    <published>2024-04-09T00:00:00Z</published>
    <updated>2024-04-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="technologies">Technologies</h2>
<p><a href="https://www.openstack.org/">OpenStack</a> is a set of software that infrastructure providers can use to give users a user-experience similar to that of AWS or other cloud providers. e.g. <a href="https://cleura.com/">Cleura</a> provides a public cloud service which can be managed with OpenStack APIs. – I think the idea for OpenStack was to enable infrastructure providers to serve as a substitute for AWS.. albeit, even amongst OpenStack public clouds, there remain idiosyncracies such that a deployment in one OpenStack cloud might require effort to deploy to another OpenStack cloud.</p>
<p><a href="https://docs.openstack.org/swift/latest/">OpenStack’s Swift</a> is an ‘object storage’ service. More/less the same thing as AWS’ S3 (or Google Cloud’s cloud storage).</p>
<p><a href="https://www.terraform.io/">Terraform</a>, or its open source fork <a href="https://opentofu.org/">OpenTofu</a>, is a tool for managing declarations of cloud resources. There’s a <a href="https://registry.terraform.io/providers/terraform-provider-openstack/openstack/latest/docs">Terraform Provider for OpenStack</a>, so that Terraform can be used to work with OpenStack resources.</p>
<h2 id="task">Task</h2>
<p>Here are notes on using Terraform to manage an object in a ‘container’ on OpenStack Swift (‘bucket’ in AWS terms), and to create a (temporary) URL to access that object.</p>
<p>The main advantage of this approach is reyling on Terraform to manage the setup/teardown, as opposed to having to use the web console to manage this, or use the CLI client to manage these. I prefer being able to run <code>terraform apply</code> to ensure things are there; and <code>terraform destroy</code> to ensure things are gone.</p>
<h2 id="terraform-code-for-container-and-bucket">Terraform Code for Container and Bucket</h2>
<p>Some boilerplate, using the openstack provider for Terraform:</p>
<pre class="terraform"><code>terraform {
  required_version = &quot;&gt;= 0.14.0&quot;
  required_providers {
    openstack = {
      source  = &quot;terraform-provider-openstack/openstack&quot;
      version = &quot;~&gt; 1.49.0&quot;
    }
  }
}</code></pre>
<p>As the provider documentation mentions, the Terraform OpenStack provider can pick up authentication credentials from <code>OS_</code> environment variables. I used the Cleura public OpenStack cloud, and downloaded an ‘rc’ file with the credentials for an OpenStack user to use with a project there.</p>
<p>Then the Terraform code for creating a container <code>rgoulter-storage</code>, and an object named <code>test</code> in that container:</p>
<pre class="terraform"><code>resource &quot;openstack_objectstorage_container_v1&quot; &quot;self&quot; {
  name = &quot;rgoulter-storage&quot;
  metadata = {
    Temp-URL-Key = &quot;some-secret-value&quot;
  }
}

resource &quot;openstack_objectstorage_object_v1&quot; &quot;self&quot; {
  container_name = openstack_objectstorage_container_v1.self.name
  name           = &quot;test&quot;
  content        = &quot;Hello, world!&quot;
}</code></pre>
<p>Resources are named <code>self</code> out of convention. (There aren’t multiple containers, objects in this Terraform codebase).</p>
<p>In this case, the content of the object is set with the <code>content</code> attribute to the object resource. The <code>source</code> attribute is more suitable when you want some file to be uploaded. (c.f. <a href="https://registry.terraform.io/providers/terraform-provider-openstack/openstack/latest/docs/resources/objectstorage_object_v1">the terraform provider documentation</a>).</p>
<p><code>Temp-URL-Key</code> is set on the container’s metadata to allow creating temporary URLs to provide access. (c.f. <a href="https://docs.openstack.org/swift/latest/api/temporary_url_middleware.html">Swift’s temporary url middleware documentation</a>). – This value should be kept secret; this value is used to create temporary URLs to access objects in the container.</p>
<h2 id="creating-temporary-urls-with-terraform">Creating Temporary URLs: with Terraform</h2>
<pre class="terraform"><code>resource &quot;openstack_objectstorage_tempurl_v1&quot; &quot;self&quot; {
  container  = openstack_objectstorage_container_v1.self.name
  object     = openstack_objectstorage_object_v1.self.name
  method     = &quot;get&quot;
  ttl        = 900
  regenerate = true
}

output &quot;tempurl&quot; {
  value     = openstack_objectstorage_tempurl_v1.self.url
  sensitive = true
}</code></pre>
<p>It’s possible to also use the Terraform OpenStack provider to manage tempurls.</p>
<p>On the one hand, you might as well, if you’re using Terraform for the other parts.
On the other hand, I think it smells a bit too much to ‘declare’ the existance of a tempurl with a time-to-live of 900 seconds.</p>
<p>One nice thing about this approach is the output URL value is simple/easy to figure out. i.e. running <code>terraform output -raw tempurl</code> outputs something like:</p>
<pre><code>https://swift-fra1.citycloud.com:8080/swift/v1/AUTH_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/rgoulter-storage/test?temp_url_sig=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;temp_url_expires=1999999999</code></pre>
<h2 id="creating-temporary-urls-with-command-line-client">Creating Temporary URLs: with Command Line Client</h2>
<p>The <a href="https://docs.openstack.org/swift/latest/api/temporary_url_middleware.html">documentation about temporary url middleware</a> gives instructions on using the OpenStack Swift client to create a temporary URL.</p>
<p>There are various ways to come up with the OpenStack Storage URL (<code>https://swift-cluster.example.com/v1/my_account/</code>), but here’s what I came up with for the container, object, and temp URL key above:</p>
<pre class="sh"><code>OS_STORAGE_URL=$(openstack catalog show object-store --format=json | jq -r .endpoints[2].url)
swift tempurl --digest=sha1 GET 900 ${OS_STORAGE_URL}/rgoulter-storage/test some-secret-value</code></pre>
<p>The <code>jq</code> expression isn’t the cleanest. (The <code>[2]</code> is the index the “public” object-store endpoint happened to be in the output of <code>openstack catalog show object-store</code>; albeit, all the endpoints had the same URL).</p>
<p>The URL from <code>swift tempurl</code> can be used for GET requests to access the storage.</p>]]></summary>
</entry>
<entry>
    <title>Six Months of Going to the Gym</title>
    <link href="http://www.rgoulter.com/blog//posts/2024-03-23-six-months-of-going-to-the-gym.html" />
    <id>http://www.rgoulter.com/blog//posts/2024-03-23-six-months-of-going-to-the-gym.html</id>
    <published>2024-03-23T00:00:00Z</published>
    <updated>2024-03-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’ve been going to the gym consistently for the last six months or so.</p>
<p>Some thoughts:</p>
<h2 id="goals">Goals</h2>
<p>I started going to the gym to improve my health; especially to lose fat.</p>
<p>Alongside going to the gym, I’ve restricted the amount of soft drink I drink, &amp; limited the amount of fried food I eat.<br />
Those changes alone had a significant impact on the progress I made.<br />
– “Restriction” is an unhappy word. Perhaps “control” would be better. By my estimate, the effort it’d take to burn the calories from soft drinks far outweighs the reward from drinking them.</p>
<p>The gym I attend has a fancy bioelectrical impedance analysis machine. This helps assess body composition; i.e. can be used to measure weight, muscle mass (sorta), and fat. – This makes it easier to track “fat loss” as a target, as distinct from “weight loss”. Without that distinction, building muscle (as a gym beginner) somewhat confounds the goal of losing weight; since it’s good to build muscle, but building muscle increases weight. (Although, sure, it’s easier to burn fat with a calorie deficit, and to build muscle with a calorie surplus[1]).</p>
<p>I also recently started keeping a workout journal. It’s easy enough to keep track of progress when using a treadmill (e.g. “Last week I ran 5km. This week I ran 5.2km. Improvement!”). But, I found it difficult to keep track of progress when using weight machines (&amp; weights). I wanted to write down what I’d done, so then I’d have a reference point to compare against for the next session.</p>
<p>In terms of progress?<br />
Shorts which used to tightly hug my bum will now fall off if I don’t wear a belt.<br />
My chess rating has improved online, which I mainly attribute to improved physical fitness.</p>
<h2 id="start-small-then-work-up">Start Small then Work Up</h2>
<p>When I first started going to the gym, I would go two or three times each week. Starting out, I focused exclusively on using the treadmill.</p>
<p>Since starting out, I’ve increased the pace at which I run at, and increased the amount of time I run for.</p>
<p>After developing that to a level I was happy with, I was then able to use the days between running to do whatever else at the gym.</p>
<h2 id="regarding-initial-anxiety-and-such">Regarding Initial Anxiety and Such</h2>
<p>I certainly felt anxious about going to the gym when I started going. I think pretty much everyone feels that way.</p>
<p>I think what I was initially most anxious about was looking silly.. or feeling like some kind of imposter that didn’t belong at the gym.</p>
<p>Part of that was surely thinking “oh, I don’t know what exercises to do; I don’t know how to use the weights or machines”.<br />
There are ways to figure these things out, though.<br />
For one.. since my goal has been ‘fat loss’, it wasn’t so bad to just focus on using the treadmill. For another, the weight machines at the gym are beginner friendly. There are plenty of videos on YouTube which demonstrate how each machine is used. – Though, I’ve seen some pretty compelling arguments that beginners should also make use of free weights.</p>
<p>I think part of gym anxiety is fear of being judged.<br />
Some people who go to the gym are fitter than others; it’d be silly (and rude) for the fitter people to judge others for being less fit at the gym, since by exercising at the gym is a reasonable way to improve fitness.<br />
But, really I can take pride in putting in the effort to show up to the gym, and make each workout a good one that made progress towards my goals. (It takes a long time to lose a bunch of weight; it’s much quicker to change how many times you go to the gym. It’s easier to hit the target of “go to the gym twice a week” and improve that to “three times a week” than it is to hit the target “lose 10kg of fat”).</p>
<p>People do look at what other people are doing in the gym.<br />
Partly this is comparison.<br />
But another reason is curiousity. I know that I’ll want to see what others are doing.<br />
– I reckon not everyone knows everything. I often see the damper on the rowing machines set to a 10. I’m inclined to believe people set it to a 10 thinking “intense workout”, rather than “slow boat”[2].<br />
– The gym I go to has a SkiErg machine. In my months of attending the gym, I hadn’t seen anyone use it. (Although after I used it, I saw PTs advise gym-goers to use it, where the Personal Trainer’s technique diverged unusually/weirdly from the recommended technique[3]).</p>
<p>It varies from gym to gym, but my experience has been that the Personal Trainers are typically unpleasant to interact with. Ideally, PTs would be knowledgeable, friendly, supportive and encouraging. Somehow, commission-based incentives don’t necessarily lead to this. – I mean, dealing with these PTs is an unpleasant part of gym going.</p>
<p>Positively: If you go to the gym routinely, you’ll recognise other people who follow an overlapping routine.</p>
<h2 id="going-to-the-gym-can-be-fun">Going to the Gym Can be Fun</h2>
<p>I became a gym member in order to improve my health, not for the fun of it. And I’m not always excited to go to the gym, and the gym isn’t always fun. Sure.<br />
But I do think it’s kind of a shame that exercise is thought of as a burdensome chore, rather than something fun.</p>
<p>I reckon in the same way that a dog likes going to the park, your body ought to appreciate the chance to exercise.</p>
<p>For losing fat.. I think running at a high intensity for a long period of time is fun. I do get that “runner’s high”.<br />
Some other things help:<br />
While running, I listen to music. I use the Aftershokz headphones, they’re great, and well suited to exercise. (They don’t cover up the ears). – It’s <em>very</em> fun to listen to an upbeat song, and to be running at high speed to that song.<br />
For endurance activities, part of what I find fun is demonstrating a consistent, high level of effort. <em>Of course</em> it’s boring to finish if a run is too easy. And giving up before the end is also not <em>fun</em>. But enduring to the point where you want to give up while still finishing is relieving.</p>
<p>Some of the exercises that gym equipment allows can be pretty fun:</p>
<p>The gym I go to has a ‘curved motorless treadmill’.<br />
This is kinda like a hamster wheel, but for humans.<br />
Since the machine’s tread goes as fast as you go, it allows you to speed up or slow down as you like. This is friendlier than on a motorised treadmill, which maintains whatever pace you set it, and so has very limited allowance for running slower (or faster) than that pace. It also provides instant feedback as to what pace you’re running. This makes it easy enough to try and keep to a certain pace. And, same as a motorised treadmill, you don’t have to worry about traffic or other obstacles.<br />
By letting you run at whatever speed, this helps you get familiar with what running faster feels like, and is a friendlier way for feeling whether you can maintain a certain pace for some time.</p>
<p>I also enjoy using the rowing machine.<br />
At the gym I go to, the rowing machines are often unused. I think that’s a shame, since it’s a versatile piece of equipment: it can be useful for burning calories, or for building strength. Compared to the treadmill, a rowing machine will exercise more of the body (legs, core muscles, and arms); and unlike running, it’s low-impact. Compared to most weight machines, it engages a variety of muscles. Compared to free weights, it’s friendlier for beginners.<br />
I recently found out there are metronome apps for rowing that give useful cues for stroke rate. These make it much easier to do a workout which aims for maintaining a stroke rate for some period of time.</p>
<p>I recently started attending BodyPump group sessions.<br />
I’ve found these to be pretty fun. It’s a good way of getting a good workout in a good amount of time. This is also a neat way to get familiar with free weights and some free weight exercises.</p>
<h2 id="using-chatgpt-for-learning-basic-things">Using ChatGPT for Learning Basic Things</h2>
<p>In addition to seeing demonstations in YouTube videos, I found it useful to ask ChatGPT about fitness things.<br />
Of course, ChatGPT isn’t completely reliable; but.. it’s probably not worse than the blogposts that come up in search engine results (and not worse than a bad PT).
Perhaps it’s comparable to what people say about Wikipedia: you ought to not rely too heavily on it, but it makes for a good starting point.</p>
<p>One of the main faults (or ‘characteristics’?) with ChatGPT is these chatbots are decidedly unopinionated. – I mostly find this preferable over being told an unqualified opinion.<br />
Similarly, the public chat-based LLMs are <em>pathologically</em> positive.<br />
– Whereas, when reading articles or blogposts or watching videos, often these will include strong opinions that you have to evaluate.</p>
<p>Another limitation is as the topic of discussion gets more precise, ChatGPT tends to be less useful.</p>
<h2 id="footnotes">Footnotes</h2>
<p>[1] <a href="https://www.youtube.com/watch?v=8QpjX2K-JY0">Dr. Mike Israetel’s discussion about ‘losing fat while building muscle’</a> seems coherent to me.</p>
<p>[2] <a href="https://www.concept2.com/indoor-rowers/training/tips-and-general-info/damper-setting-101" class="uri">https://www.concept2.com/indoor-rowers/training/tips-and-general-info/damper-setting-101</a></p>
<p>[3] <a href="https://www.youtube.com/watch?v=B0lIgT5PHc8">Concept2’s SkiErg technique demonstration</a></p>]]></summary>
</entry>
<entry>
    <title>Another Factorio Post-Game Ramble</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2024-02-14-another-factorio-post-game-ramble.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2024-02-14-another-factorio-post-game-ramble.html</id>
    <published>2024-02-14T00:00:00Z</published>
    <updated>2024-02-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Factorio is such an enthralling game to play.</p>
<p>If you’ve somehow found this post but don’t know Factorio:
It’s a 2D game which starts out similar to many ‘survival’ games (e.g. you chop wood, mine stone and iron, etc.), but progressively build up ways to automate these tasks away. The eventual goal is to build and launch a rocket; although many players find fun in seeing how big a factory they can build.<br />
Ultimately, the whole ‘challenge’ of Factorio is finding a way to arrange the factory so that all the inputs can get to the right places.. so it’s encouraged to do a first playthrough ‘blind’.</p>
<p>I had been meaning to play some other games on my Nintendo Switch, but after starting a new Factorio playthrough, ended up spending a lot of time on that.</p>
<p>This time, I played on a “ribbon world”. I also set the resource patches to be more frequent and richer (although didn’t change them to be bigger than normal). I decided to play on non-peaceful; but, disabled enemy expansion.</p>
<p>“Ribbon world” limits the height of the map. – This adds some challenge to laying out the base. e.g. the limited vertical space constrains how ‘vertical’ any part of the factory can be; whereas horizontal space has to be cleared (especially on non-peaceful, where enemies have to be cleared), and inputs will end up <em>really far</em> from where they need to be.<br />
On the flipside, the limited height makes defending from the enemies trivial: the enemies can only come from the left or the right, so you only need to worry about defending a tiny perimeter to the left and to the right.</p>
<h2 id="compared-to-previous-playthroughs">Compared to Previous Playthroughs</h2>
<p>On my previous Factorio runs: I mostly stuck to peaceful, and have tried out different strategies for organising the factory.<br />
I did complete a game of non-peaceful.. I’d say that the enemy attacks add some pushback and constraints. e.g. you need to supply defenses, and in order to expand the factory, you somewhat need to clear enemy bases.<br />
In terms of strategies I’ve tried: I’ve tried the game without trains or even bots(!), I tried the game where I used trains to augment a ‘main bus’. I tried a game where I had the whole factory covered with the same bot network, and used this to supplement a main bus (albeit, resource patches were frequent, rich, and big).</p>
<p>Recall.. the “main bus” idea is to put a bunch of common resources on belts in parallel. This makes the “gather inputs” part of the equation much simpler: to assemble an item with inputs “steel, copper, green circuits”, you just branch these resources off from the main bus.<br />
One inevitable problem is that the input requirements for your inputs might be larger than the bandwidth of the bus. (e.g. you’d ideally consume 1000 resources from the bus, but the bus only supplies 500).</p>
<p>Having a factory covered with bots “solves” the problem of getting uncommon items around; and also makes it easy to build up parts of the factory without needing the player around.<br />
I’d hoped for a ‘stacking’ design which automatically could build itself (since the roboports from one part would be able to then build more roboports and other buildings, expanding the factory).<br />
In hindsight, it was excessive to build roboports that covered the whole of the map. It didn’t really help with moving resources around great distances.</p>
<p>For this ribbon world, for moving resources great distances, I opted to go for a train-based approach.</p>
<h3 id="overview-of-the-strategy">Overview of the Strategy</h3>
<p>Generally the strategy I wanted to take for this factory was: use trains to move resources around.</p>
<p>I aimed to have four lanes of rails at the edge of the map: two on the top, two on the bottom. The idea being, train stations can branch-off from the inner pair of rails, whereas the outer pair of rails only ever has junctions to/from the inner pair of rails; trains need to slow down in order to stop, so hopefully this would reduce the need for trains to slow down before reaching their destination.</p>
<p>Using trains then means: have train stations which load resources from mines, and then have groups of train stations which consume those resources (and provide more complex resources in turn).</p>
<p>I hadn’t been against the idea of then using train stations to start off a “main bus”. However, I never ended up doing this. (I did build the same “mall” that I’d used in previous builds, which uses a bus of inputs). – It would take a lot of horizontal space to gather so many inputs, and would take a lot of horizontal space to extend the bus, and there’s not much vertical space to build off of the bus.</p>
<p>Militarily, the game was quite straightforward.<br />
In the early game, the enemy bases are quite far away. The enemy AI is passive, and only attacks in reaction to pollution from your factory reaching their base. It was easy for pace of conquest to outspeed pace of pollution, since the height of the map is limited.<br />
However, it doesn’t take too long until conquering enemy bases become too formidable for the player to take on by themselves. Enemy defenses get so strong that it takes a lot of effort to make incremental progress against them. (Although part of the problem is the tank doesn’t control so well on the Nintendo Switch, I reckon).<br />
In the late game, artillery outreaches the enemy.. so expanding the factory involves building up a wall &amp; some turrets, building out the railway to the wall, then using an artillery train to blast the enemy bases. – Notably, construction bots can be used to build out these, so it can be done without needing the player nearby.</p>
<h3 id="what-went-well-scale">What Went Well: Scale</h3>
<p>One of the challenges of Factorio’s late game is that high-tier items are really expensive, requiring many inputs.<br />
e.g. The simple green circuits require a few iron and copper pieces. The more advanced red circuits then require a few green circuits, a few copper pieces, and a few bits of plastic. The most advanced blue circuits require <em>twenty</em> green circuits, and some red circuits, and some sulfuric acid. – Many of the late game items require hundreds of blue circuits to build.<br />
As noted above, even if it’s not difficult to get inputs connected to a system, one of the problems using belts is hitting bandwidth limits.</p>
<p>Using trains to move resources around allows for huge scale.<br />
I suppose there must be a bandwidth limit on how many resources a rail allows, too. But, with trains only using rails when carrying a bulk of resources at great speed, it’s not really an easy limit to hit.</p>
<p>Trains then allow for ‘decoupling’ where an input is gathered from where it’s consumed.<br />
– With belts, you need a belt that runs all the way from a particular input to where it’s consumed. More resources can be fed into the belt, but resources need to be fed into the belt <em>before</em> where they’re consumed from a belt.<br />
With rail, there’s not this constraint. Resources loaded anywhere on a rail network will find their way to where they need to be unloaded in the rail network.</p>
<p>This ends up making “scaling” relatively straightforward: getting more resources essentially either involves building up how many resources are produced at a particular location (e.g. adding more miners to an ore patch) i.e. “scaling vertically”, or by adding more stations to the rail network which produce that resource i.e. “scaling horizontally”.</p>
<h3 id="practical-differences-between-belt-based-and-rail-based">Practical Differences Between Belt-Based and Rail-Based</h3>
<p>I did run into some practical problems trying a rail-based factory.</p>
<p>There is some edge case stuff.<br />
In rare cases, maybe a train runs out of fuel.<br />
When I tried to be fancy and programatically enable/disable a train station (e.g. “disable this stationn, because it has enough resources”), sometimes a train might stop in the middle of the rail because it suddenly gets disallowed from visiting its destination.<br />
etc.</p>
<p>One downside to the rail-based approach is there is additional overhead to deal with.</p>
<p>One overhead cost is that there may be a longer lead time between when an input is added to a network, and when it can be consumed by the network.<br />
e.g. A simple approach to take is to have a cargo train wait at a loading station until it is full, and then move to a deposit station until it is empty. (Anything more frequent than this would be an ‘inefficiency’). – This means opting to wait the full length of time for a cargo train’s worth of resources to be produced before it meaningfully enters the network. (This increases the delay in the feedback loop for how much some resource is demanded, for better and for worse).</p>
<p>Compared to belts, distribution of resources is more of a problem whenever inputs don’t fully saturate demand.<br />
With belts, splitting resources off of a belt does so in a 50-50 manner. So for a factory with 1000 units of some resource needed by A, B, and C.. 500 will reach A, 250 will reach B, 125 will reach C, leaving 125 to continue to be available on the bus (splitting off into 64, 32, etc.). – Eventually, at least <em>some</em> of the resource will reach even the end of the bus, even before inputs at the start are saturated.<br />
With rails, by default, you don’t get this behaviour. A train will go to the closest station that it can visit. – So while it’s still true that “producing more inputs than is consumed” <em>eventually</em> satiates demand, it takes more care to get expensive resources where they need to be before all inputs are satiated.</p>
<p>I’d say one mistake I made was using big buffers at resource unloading stations for expensive resources. – i.e. Each unloading station would have a buffer which could receive six or seven trains’ worth of cargo. For simple resources, this isn’t much of an issue, since it’s easy to build more stations which provide that resource. For more complex resources, since the time to produce the resource is greater than the time to load the resource onto the train, this meant that a significant amount of time was spent depositing the resource into filling up a buffer, when that resource was starved in other parts of the rail network.</p>
<p>Another overhead cost is space. This perhaps is “different” rather than “worse” than belts.<br />
With belts, moving resources over a long distance is tedious but possible. Moving rare/expensive resources long distances (at worst) involves snaking the belt through the rest of your factory.<br />
With trains, building a ‘block’ of stations for a resource which takes 5 inputs requires taking up a reasonable chunk of horizontal space on the map. (This is mostly more annoying with frequent resource patches, since you might want to avoid building on top of a resource patch).</p>
<p>One decision to make is “what resources to put on the rail network”.<br />
If building up the rail network before electric smelting, then coal is required to turn the ore into plates that get used by most recipes. (Which is why it’s a bad idea to build up a rail network before getting electric smelting).<br />
Yellow Science in particular has complex input requirements, and there are different trade-offs for putting its intermediate input requirements on the bus or assembling them in the same block.</p>
<h3 id="new-to-me-circuit-network-combinators">New to Me: Circuit Network Combinators</h3>
<p>The circuit network allows for programmability with Factorio’s machines.</p>
<p>I had used it before for simple things like “if ammo below certain amount, send an alarm signal” or “only take stuff out from this storage if there are at least 1000 items”.</p>
<p>The circuit network logic complements the rail network nicely.</p>
<p>I was able to use the circuit network to describe a couple of things:</p>
<ul>
<li><p>Dynamically set how many trains are allowed to visit a station, based on how much remaining capacity the storage buffer for the station had. (e.g. if it would only take two trains to fill the storage buffer, limit the number of trains that would visit the station to two).</p></li>
<li><p>Dynamically enable or disable the station based on how full the buffer was. Once the buffer was less than 20% (or whatever) full, then enable the station so that resources would be unloaded there; but once it reached 90% or so, then disable the station until the buffer was back down to only 20% full.</p></li>
</ul>
<p>The problem above of “starving stations not being filled, while buffers elsewhere were being filled” surely could have been mitigated using the circuit network. (The logic is a bit ‘come-from’: rather than saying where trains go <em>to</em>, you’d say which destinations should receive resources. I’m guessing something like: if any stations are ‘starved’, then limit or disable any stations which have at least some resources in their buffer).</p>
<h3 id="what-went-less-than-well-slow-progress-to-reach-late-game">What Went Less Than Well: Slow Progress to Reach Late Game</h3>
<p>Kinda like how playing Sudoku can be fun even though Sudoku solvers exist, playing Factorio can be fun even if you’re not building the best factory ever.<br />
Factorio is essentially just a toy.. and the game’s goal of ‘launch a rocket’ is a decent objective to aim for with Factorio’s systems.</p>
<p>It’d obviously be less fun if I just used console commands to provide infinite resources, or to instantly provide the rocket silo &amp; launch the rocket effortlessly.</p>
<p>I imagine it’d be less fun if I only used blueprints other people created.</p>
<p>I find Factorio fun even without the enemies, or with non-aggressive enemies.</p>
<p>Unfortunately, in this ribbon world playthrough on the Nintendo Switch, I took a long time before getting to the late game.<br />
What I ‘should’ have done was to aim to quickly build a factory which would (even at a trickle’s pace) research towards the late game technologies.<br />
Instead, I meandered and did things I thought were more interesting. Which is fine, but it meant it took a long time before I reached the late game.</p>
<p>The friction is that the problems you face in the early game get solved by the late game:<br />
Routing train rails is difficult when the map has cliffs and water. The cliffs can be blown up, and the water can be filled with later technology.<br />
A busy factory will use a lot of electricity. Nuclear power provides an abundance of electricity.<br />
Enemies block expansion.. and late game artillery ‘solves’ this, and laser turrets ‘solve’ the problem of supplying the defence.<br />
Building the same pattern of buildings repeatedly is slow; bots trivialise this.<br />
– But in order to use these technologies, you have to have researched them.<br />
Aiming to use a train-based factory before the late game ultimately ends up being a bad idea. You don’t have the capacity to expand the factory fast enough to meet the input requirements for the kind of scale that a train-based factory needs.</p>
<h3 id="a-follow-up-playthrough">A Follow-Up Playthrough</h3>
<p>As I was writing the above up, I just <em>had to</em> try again to see if I could do better.</p>
<p>I took time to pre-plan the ‘blocks’ of train stations that I would use. I used the sandbox mode so that this could be done in a safe way.</p>
<p>On the PC, I played using the default ribbon-world settings. (So, compared to my Nintendo Switch playthrough, resources were less frequent, and not quite as rich; plus, enemy expansion was enabled).</p>
<p>Overall, from a second playthrough:</p>
<ul>
<li><p>The gameplay was significantly more difficult with enemy expansion enabled than disabled. With enemy expansion, I very quickly hit a point where clearing enemy bases was impractical without artillery.</p></li>
<li><p>I used a much more compact approach when designing the blocks of train stations. This meant I was better able to utilise space.</p></li>
<li><p>In my first playthrough, I had opted to have each station allow for ‘stacking’ trains. This wasn’t really necessary for the scale I was operating at. (It would be useful if the factory were so large that “time to consume all of trains input” was shorter than “time for another train to arrive”).</p></li>
<li><p>I took the time to ensure my blueprints for “use roboports to expand the factory’s frontier” (place laser turrets, place rail so the artillery train can move further out) could more easily snap-to a course grid. This made it much easier to instruct the bots when expanding the frontier.</p></li>
<li><p>I <em>really</em> felt the contrast between ‘mid game’ and ‘late game’. With ‘mid game’, I was essentially boxed in until I could research artillery. I wasn’t able to easily expand in order to acquire more resource inputs. (Hence.. using a rail-based factory has more disadvantages than advantages). – Probably, though, the lategame alone wouldn’t feel so satisfying without having faced the obstacles in the mid-game.</p></li>
</ul>
<p>For now, that’s enough Factorio, though.</p>]]></summary>
</entry>
<entry>
    <title>Tomb Raider 3</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2024-01-13-tomb-raider-3.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2024-01-13-tomb-raider-3.html</id>
    <published>2024-01-13T00:00:00Z</published>
    <updated>2024-01-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I just finished re-playing Tomb Raider 3.</p>
<p>I’d played it many years ago, but almost certainly with cheats, as well as closely following a walkthrough.</p>
<p>This time, I didn’t lean so hard on the walkthrough, and at least gave an honest try through most areas before looking up the walkthrough.</p>
<p>Overall, I think I can stand by my opinion that Tomb Raider 2 is the better game. TR2’s challenging levels at the end are demanding but not over the top. It’s satisfying to complete the TR2 levels.</p>
<p>I rate TR3 a bit lower since at its worst it’s more obnoxious and less fun than the bad bits of TR2.</p>
<p>Overall, the stuff I found really-not-fun was where the game is unreasonably difficult.</p>
<p>To give a couple of examples of where TR3 was really-not-fun:</p>
<ul>
<li><p>The level “Lud’s Gate” features an obnoxious underwater segment with obfuscated navigation steps. There’s an underwater vehicle, but it’s clunky to control, and your air supply is limited. – The difficulty is obnoxious without being rewarding to complete.</p></li>
<li><p>One part where I got stuck was in the London level “Aldwych”. Aldwych is wonderfully themed, taking place in an abandoned tube station. But.. I recall I was stuck because I couldn’t find two keys.. I had found the old penny (a key item), but to use the old penny, I had been unable to figure out that I was supposed to use it in one of the ticket machines. (The ticket machines all looked the same, and the first few I interacted with did nothing). – Another contributing cause, I had overlooked and gone past an area to get one of the keys. The level was a bit too non-linear.</p></li>
<li><p>I recall being stuck on the level “Crash Site” due to being unable to figure out how to climb on top of the airplane. You can only get up from one spot, and that spot looks very similar to nearby spots where you can’t climb up from.</p></li>
<li><p>On the penultimate level, there are some enemy spawns which seem infinite. (They’re infinite spawners on the Playstation version, and spawn over one or two dozen enemies on PC). That’s .. just lame.</p></li>
</ul>
<p>“Getting stuck” is part of a good adventure game. – In an action game, the obstacles you have to overcome are the enemies you face. In adventure games, you have to figure out how the level you’re exploring “works” (where you’re allowed to go, what ‘locked doors’ are preventing you from reaching other places, how you might get the keys for these), and work your way through the puzzles.</p>
<p>But, whereas, say, I recall in the TR2 level “Living Quarters” when I was stuck.. the area I was stuck in was limited enough that by re-treading all the locations, I was able to find which places I had overlooked. The same is true for many parts of TR3’s levels.</p>
<p>In terms of what the game does well? Kinda the opposite: being challenging enough that you feel good for solving it, but still being easy enough to solve. Some examples of what I liked:</p>
<ul>
<li><p>The training level that is Lara’s Home is great. There’s a surprising amount to do here. You get to have fun with the mechanics in an environment without hostiles or traps. The indoor gym area has a step-by-step introduction to the game’s somewhat idiosyncratic grid-system that the game’s “tank controls” are built around. – I saw someone say that one sample to see how good a shooter game will be is to try just taking a gun and shooting at a wall. If that’s satisfying, the game will be fun to play. Lara’s Home is like that: the area lacks plot or hostile challenges, so you know that since the bare-bones of the game is fun to play with, the game itself ought to be fun.</p></li>
<li><p>The iconic ‘Shiva statues’ in the second level are excellent. There’s tension building up to the fights. The fight isn’t trivial, but it’s also not too difficult. (The animated statues block your bullets when you point your guns at them, so you have to figure out how to defeat them while also not getting killed by them).</p></li>
<li><p>As an example of a puzzle I liked: in the level “Thames Wharf”, there’s a room where there’s some kind of cleaning robot going around the floor. It will kill you if it runs over you, but otherwise isn’t an active threat. You also see there’s a movable block, and a spot in the middle of the room with some kind of console. – There aren’t too many things to try out here, it’s not too difficult to execute any plan you might have. It feels non-trivial, but it’s also not too difficult.</p></li>
<li><p>e.g. The level “Antarctica” is a well design adventure level. It’s non-linear enough that you’ll sometimes be wondering where to go next, but not so non-linear as to be obnoxiously confusing.</p></li>
<li><p>Boss fights: I think these work well. They’re threatening enough that it takes time to figure out what you’re supposed to do.. you can either use your powerful weapons, but the fights aren’t completely obnoxious with pistols, either.</p>
<ul>
<li>The London boss fight in “City” is really short and sweet. You’re kinda rushing through the level under fire from the enemy boss, but it’s not so obnoxious.</li>
</ul></li>
<li><p>The additional platforming elements (ducking/crawling, and monkey-swinging) feel like natural additions to the grid-based navigation.</p></li>
</ul>
<p>Any long-running series is going to have an identity.. things which work with that identity or things which maybe didn’t work so well.</p>
<p>Tomb Raider was the definitive action adventure game of the 90’s, with its gameplay built upon its tank-controls and its grid system, with all sorts of platforming, exploration, puzzles, traps, and combat.<br />
Of these, the combat of the classic games is what feels most archaic. Tank controls are unpopular in the era of twin-stick controllers and WASD+mouse gameplay. And while removing all friction/difficulty from games would ruin the fun.. that the classic Tomb Raider games don’t allow Lara to strafe-around a target she’s locked onto feels limited. – For me, a lot of the combat involved flipping around to get behind where the enemy is. Strafing would make that much easier, and wouldn’t feel out of place.</p>
<p>That said.. the combat itself was never quite the strongest part of Tomb Raider’s gameplay. It provides good pushback so that there’s tangible benefits for exploring: you explore and you find ammo for the good weapons you have, so then you can use the good weapons and take care of enemies easily. And it keeps you on your toes: you’ve gotta be prepared to fight an enemy when you enter a new area (or re-enter an area after solving a puzzle!).<br />
The recent and related-only-in-name Tomb Raider games opted for third person combat … but also lacks an identity. I think the combat in the classic Tomb Raider games at least fits with the rest of the game’s over-the-top acrobatics. I don’t think the classic games’ combat is inherently boring; but I think an extra feature or two could go a long way to making it more dynamic. (e.g. like how Halo at least has energy weapons vs bullet weapons, or how Doom 2016 has the idea of getting health/ammo from enemies directly).</p>
<p>Tomb Raider 3’s Story?<br />
I’d say it doesn’t do much, but that it doesn’t need to do much.<br />
Lara’s exploring for some artifacts. Gets told that there’s more/similar artifacts. Surprise twist that the guy asking her to collect the artifacts has turned crazy. Boss fight. The end.<br />
The game does feature some cutscenes with dialogue, otherwise it’d maybe be a bit too bland.<br />
I guess the story archetype to compare to is Indiana Jones.. “hey, there’s this powerful mystical artefact; let’s find it, and stop the bad guys from finding it”.<br />
The recent big budget games with the title “Tomb Raider” have put much more emphasis on the story (although notably without having such a kickass Lara Croft).. but, focused on drama and relatability, that just didn’t seem all that interesting. – In contrast, I think TR3’s story is simple.<br />
I’m not sure what it’d take to make such a game story “good”. Interesting lore? Compelling villains? Compelling side characters? Stories which really drive the setting? Interesting settings?</p>]]></summary>
</entry>
<entry>
    <title>Experience Writing Firmware with the CH582 Port of QMK</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2023-12-27-experience-writing-firmware-with-the-ch582-port-of-qmk.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2023-12-27-experience-writing-firmware-with-the-ch582-port-of-qmk.html</id>
    <published>2023-12-27T00:00:00Z</published>
    <updated>2023-12-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="../../posts/programming/2023-12-21-notes-on-building-wch-ble-ch592-evt-exam-with-bare-makefile.html">As noted previously</a>,
WeAct Studio have a BLE devboard that costs about $2 (which is MUCH cheaper than the BLE devboards popular in custom mechanical keyboard designs), but there isn’t much community attention for this board; there aren’t many (any?) keyboards designed to use this devboard, and there aren’t many people using firmware for it. There is a port of QMK to use the CH582.</p>
<p>And it’s been announced that <a href="https://www.reddit.com/r/ErgoMechKeyboards/comments/18p99d9/fak_firmware_adds_macros_sticky_mods_mouse_keys/">FAK support for the CH58x/CH59x is planned</a>.</p>
<p>I designed a keyboard to use WeAct Studio’s BLE devboard.<br />
In a sense, this somewhat puts the cart before the horse, since I hadn’t tried proper keyboard firmware with the devboard before designing the keyboard.</p>
<p>The good news is, I was able to get working keyboard firmware for my keyboard using the <a href="https://github.com/O-H-M2/qmk_port_ch582">QMK port for CH582</a>.</p>
<p>Unfortunately, this wasn’t without frustration.</p>
<h2 id="initial-impression">Initial Impression</h2>
<p>I have experience writing keyboard firmware, by way of making use of what others have written.
e.g. I’ve written keyboard definitions for QMK (including before the move to data-driven configuration), implemented the game Snake using QMK’s RGB Matrix effects system; I’ve written keyboard firmware in Rust; I’ve implemented CapsWord functionality for FAK.</p>
<p>My initial impression of the CH582 port of QMK is it feels fragile and finicky.</p>
<p>The structure of the repo wraps CMake lists around the QMK codebase. – To me, this seems like additional effort, for marginal benefit. It’s not clear to me that it’s necessary, either. – This leads to (as noted below) requiring additional effort to use features which QMK implements, &amp; it took significant additional effort to figure out how to re-use the keymap code I had written in QMK.</p>
<p>In terms of QMK, it felt like writing qmk before the data driven configuration. (In order to make use of QMK’s data driven configuration, more CMake code would need to be added to support using the autogenerated keymap code).</p>
<h2 id="obstacles">Obstacles</h2>
<h3 id="didnt-produce-working-firmware-with-the-open-source-risc-v-toolchain">Didn’t Produce Working Firmware with the Open-Source Risc-V Toolchain</h3>
<p>When I build the EVT examples for the CH592, I was able to build and run the examples with either the ‘public’ risc-v gcc distributed by xpack, or the toolchain distributed by MounRiver Studio.</p>
<p>Although I noticed I <a href="https://github.com/O-H-M2/qmk_port_ch582/commit/9f1aa898a913b1bc0af873443c75abc0083fa98e">had to make changes to the CMake lists</a> in order to build the QMK fork for CH582 with the ‘public’ xpack toolchain, I had been able to <em>build</em> the firmware.</p>
<p>Unfortunately, when I was finally able to try running this firmware on a CH582 devboard, only the firmware built by the MounRiver toolchain worked when I ran it.<br />
I don’t know why.</p>
<h3 id="ble-is-still-wip">BLE is Still WIP</h3>
<p>The README currently has the line: “Support wired, Bluetooth, and triple mode 2.4G (WIP)”. I understood this to mean “Supports wired, Bluetooth” and “triple mode 2.4G” is WIP.</p>
<p>But, <a href="https://github.com/O-H-M2/qmk_port_ch582/issues/154">as others have observed</a>, e.g. the TychePad keyboard (which uses BLE) doesn’t build.</p>
<p><a href="https://github.com/O-H-M2/qmk_port_ch582/blob/2dde4b4777d2e91abe0b96c91b64f3fea5cd7ecb/CMakeLists.txt#L312">Enabling BLE requires the wireless lib</a>, but in order to build the wireless lib, <a href="https://github.com/O-H-M2/qmk_port_ch582/blob/2dde4b4777d2e91abe0b96c91b64f3fea5cd7ecb/CMakeLists.txt#L200">the required files aren’t provided in the repo</a>.</p>
<p>Hence, BLE isn’t available with the publicly provided code.</p>
<p>I don’t mind the work being WIP; but I assess it as sloppy to have WIP code that doesn’t build on a release branch.</p>
<p>And $2 for a risc-v devboard is pretty neat, even if for keyboard firmware it’s USB only at the moment.</p>
<h3 id="getting-my-keymap-to-build">Getting My Keymap to Build</h3>
<h5 id="the-cmake-files-dont-support-community-layouts">The CMake Files Don’t Support Community Layouts</h5>
<p>The <code>qmk_firmware</code> repository supports putting keymap definitions in <code>layouts/community</code>. This allows you to define the keymap for some layout (such as <code>ortho_4x12</code> or <code>split_3x5_3</code>), rather than only defining a keymap specific to a keyboard.</p>
<p>At the time of writing, the CMake lists in the CH582 port don’t support using this feature.<br />
Perhaps it could, but it doesn’t at the time of writing.</p>
<h5 id="false-friends-config.h">False Friends: config.h</h5>
<p>This confused me for some time:</p>
<p>Both <a href="https://github.com/O-H-M2/qmk_port_ch582/tree/via/sdk/HAL/include"><code>sdk/HAL/include</code></a> and QMK use header files called <code>config.h</code>.</p>
<p>So, by adding a CMake statement <code>include_directories(...)</code> pointing to a QMK keyboard or keymap directory (which has <code>config.h</code>), this breaks the build since then the CH582 HAL doesn’t correctly include its <code>config.h</code>.</p>
<p>This is more of a -1 to C than to anything else.</p>
<p>I worked around this by using more of the path when including; e.g. rather than <code>#include "rgoulter.h"</code>, I use <code>#include "users/rgoulter/rgoulter.h"</code>.</p>
<h5 id="some-qmk-features-not-implemented">Some QMK Features Not Implemented</h5>
<p>The CH582 port of QMK uses CMake to manage its build.</p>
<p>So, QMK features are enabled <a href="https://github.com/O-H-M2/qmk_port_ch582/blob/via/qmk_porting/common_features.cmake">by checking CMake variables</a>.</p>
<p>Turns out, some of the features I use weren’t described there. <a href="https://github.com/O-H-M2/qmk_port_ch582/commit/27aba0c570a48c0a479b21ef83940ac08abca1c7">I was able to add them</a>.</p>
<p>While for other QMK features (such as the haptic feedback feature) which depend on driving hardware peripherals, it makes more sense that the CH582 platform for QMK lacks the implementation.. for stuff like the leader key or combos, I felt “not implemented” was more due to it needing to be declared in CMake.</p>
<h5 id="custom-keycodes-safe-range">Custom Keycodes: Safe Range</h5>
<p>I also ran into problems where my keymap defined new keycodes.</p>
<p>Again, this is more of a -1 to C, and that it doesn’t necessarily compose things like this well.</p>
<p>The QMK interface for <a href="https://docs.qmk.fm/#/custom_quantum_functions?id=custom-keycodes">defining new keycodes is to use <code>NEW_SAFE_RANGE</code></a>.</p>
<p><a href="https://github.com/O-H-M2/qmk_port_ch582/blob/2dde4b4777d2e91abe0b96c91b64f3fea5cd7ecb/qmk_porting/protocol/extra_keycode.h#L51">This port declares its own <code>NEW_SAFE_RANGE</code></a>.</p>
<p>So, my code needed to untangle a bit from that; and it’d take some care to be aware of whether the codebase I’m building against defines its own <code>NEW_SAFE_RANGE</code> or not.</p>
<h5 id="mirroring-my-community-layout">Mirroring my Community Layout</h5>
<p>Initially I’d tried copying the C files across in order to get my layout on the keyboard. This works, but isn’t the most maintenance friendly approach. (I’d need to re-copy each time I changed my layout).</p>
<p>Once I figured the stuff above out (about <code>config.h</code>, etc.), I was able to come up with a way of using my community layout without too much fuss: <a href="https://github.com/O-H-M2/qmk_port_ch582/commit/67795a2beb647276d30bdf3da771584e6465465f" class="uri">https://github.com/O-H-M2/qmk_port_ch582/commit/67795a2beb647276d30bdf3da771584e6465465f</a></p>
<p>The <code>keymap.c</code> just includes the <code>keymap.c</code> from the community layout:</p>
<pre><code>#include &quot;layouts/community/ortho_5x12/rgoulter/keymap.c&quot;</code></pre>
<p>The <code>qmk_config.h</code> includes the <code>config.h</code> from the community layout dir, and the user dir:</p>
<pre><code>#pragma once

#include &quot;users/rgoulter/config.h&quot;
#include &quot;layouts/community/ortho_5x12/rgoulter/config.h&quot;</code></pre>
<p>and the <code>rules.cmake</code> ports the <code>rules.mk</code> functionality over:</p>
<pre><code>set(COMBO_ENABLE ON CACHE BOOL &quot;KB&quot; FORCE)
set(LEADER_ENABLE ON CACHE BOOL &quot;KB&quot; FORCE)
set(DYNAMIC_MACRO_ENABLE ON CACHE BOOL &quot;KB&quot; FORCE)

list(APPEND QMK_PORTING_SOURCES
    &quot;${QMK_BASE_DIR}/users/rgoulter/rgoulter.c&quot;
)</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>I feel more sour about the above than I should, because it took a bunch of effort to figure this stuff out.</p>
<p>I don’t love the use of CMake. (e.g. my re-implementing stuff from <code>rules.mk</code>, it feels like there are multiple sources of truth for describing the same thing).<br />
I wish it implemented support for QMK’s community layouts, or for QMK’s data driven configuration.</p>
<p>I was disappointed to realise the BLE code wasn’t publicly available, and that the code somehow relies on the proprietary MounRiver distribution of the risc-v toolchain.</p>
<p>But, for the moment, I don’t think there’s any other publicly available keyboard firmware for CH582.</p>]]></summary>
</entry>
<entry>
    <title>Notes on Building WCH BLE CH592 EVT Exam with Bare Makefile</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2023-12-21-notes-on-building-wch-ble-ch592-evt-exam-with-bare-makefile.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2023-12-21-notes-on-building-wch-ble-ch592-evt-exam-with-bare-makefile.html</id>
    <published>2023-12-21T00:00:00Z</published>
    <updated>2023-12-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Here are some notes from tinkering with the <a href="https://github.com/WeActStudio/WeActStudio.WCH-BLE-Core">WeAct Studio BLE Core Board</a>.</p>
<h3 id="its-not-used-in-many-designs">It’s Not Used in Many Designs</h3>
<p>My interest in the board comes from my interest in custom mechanical keyboard designs.<br />
– The best part of ‘free and open source’ is the “gratis” part.<br />
But the “libre” part is neat, too: it’s much easier to realize an interesting keyboard design if all you need to do is iterate on a keyboard design someone else has made.</p>
<p>I’ve never tried designing a Bluetooth keyboard.<br />
The sour grapes explanation is that Bluetooth devices are finicky to use. (Which is true).<br />
What most hobbyists do for Bluetooth keyboards is use Bluetooth-powered devboards like the nice!nano, and use ZMK firmware. – TBH part of why I’m not interested in this devboard is it costs over 20 USD. (And it’s most common in split keyboards, which’d need one for each side!).</p>
<p>I recently picked up a WeAct Studio BLE Core board, ordered from AliExpress.<br />
(I’ve used a few different devboards from WeAct Studio in several of my keyboard PCB designs; including WCH MCUs).<br />
The BLE core board has designs for the different MCUs: CH573, CH582, CH592.<br />
In contrast, this devboard costs $2.</p>
<p>But despite it being such a cheap board, I can’t find any designs which use this board.</p>
<p>Some notes on what I could find:</p>
<p>The <a href="https://github.com/joric/nrfmicro/wiki/Alternatives#ch582">Alternatives wiki page on joric’s nrfmicro repo</a>
describes the CH582 as:</p>
<blockquote>
<p>QMK has a CH582 port! It has BLE and there’s a dev board for it on Aliexpress for about 2 bucks. That is, if you’re willing to experiment since, as far as I’m aware, no keyboard has been designed with it and there’s not a lot of users yet. [ZMK not supported.]
… Last I looked, datasheets were basically “sorry, not documented” on the registers for BLE hardware. And 32KB of RAM on the CH582F would definitely be a challenge.</p>
</blockquote>
<p>Regarding “low RAM an issue” semickolon (who authored FAK firmware for the CH552 MCU) <a href="https://www.reddit.com/r/ErgoMechKeyboards/comments/18aekwm/comment/kbz35tc/">commented that the chip’s BLE only uses 4KB RAM, and that FAK had about 1KB RAM</a>. (He also mentions he’s got a keyboard working with some firmware he’s building for the chips).</p>
<p>The datasheets indeed omit documentation for the registers for the BLE hardware.</p>
<p>FWIW, I did see some BLE keyboards using these WCH chips on OSHWHub such as <a href="https://oshwhub.com/cansong/ch579_keyboard_v0-1">cansong’s ch579 keyboard</a>, which points to <a href="https://oshwhub.com/JokerAlon/ch579m-64keyboard">JokerAlon’s ch579m</a>. Albeit, the readmes for these aren’t in English. – The schematics are available, at least.</p>
<p>Albeit, at the time of writing, there really aren’t many English search engine results for CH592. Nor CH58x. Nor CH57x.<br />
The keyboards above seem to be row-stagger, and with big spacebars. (The big spacebars make it easier to design a PCB, but don’t make for a good keyboard. – I do recall seeing boardsource.xyz’s solution to this for their <a href="https://www.reddit.com/r/MechanicalKeyboards/comments/t1c5pl/technikable_gb_is_live_on_boardsourcexyz_wireless/">technikable ble ortho</a> was to omit the 2 keys in the bottom corners of each side..).</p>
<p>I wasn’t aware of it before, but both the wiki page above (and the reddit comment) point to <a href="https://github.com/O-H-M2/qmk_port_ch582">O-H-M2’s port of QMK for CH582</a>. (Looking at the port a bit: it retains upstream QMK’s codebase unchanged, and adds some platform-specific code for CH582).<br />
(There are keyboards listed in this; one seems to be a giant handwired ortho, the others are either macropads/numpads, or row-staggered with big spacebars).<br />
The default branch name is <code>via</code>; the readme mentions via functionality is implemented. (I don’t use via/vial, but seems it’s useful for many).</p>
<p>On GitHub, <a href="https://github.com/openwch/ch592">OpenWCH provides EVTs with Examples and SDKs for CH592</a> (and other chips). (Whereas, <a href="https://github.com/SoCXin/CH552.git">CH552 is in the SoCXin org</a>). – These examples include a BLE HID “keyboard” (it periodically sends a HID keyboard report, but doesn’t read GPIO pins).<br />
– So, there is working code, and a README PDF(!) describing how to run the example.. this PDF describes to use <a href="http://www.mounriver.com/download">MounRiver Studio</a>.</p>
<p>Using MounRiver Studio works (at least for building these EVT Examples; I didn’t try flashing from MounRiver).</p>
<p>I saw that the <a href="https://github.com/WeActStudio/WeActStudio.WCH-BLE-Core">WeAct BLE repo</a> included <code>Makefile</code>s for its code (copied from the EVT).<br />
Copy-pasting the comment at the header of the file into a translate service: “generated, do not modify”.<br />
Oh no.</p>
<p>That’s … not a promising sign.</p>
<p>Fortunately, the <a href="https://github.com/O-H-M2/qmk_port_ch582/blob/via/README.md#developers">QMK port to CH582’s readme</a> has instructions which mention downloading the MounRiver Studio toolchain and using <code>cmake</code>/<code>make</code>.</p>
<h2 id="toolchain-building-the-ch582-port-of-qmk">Toolchain: Building the CH582 Port of QMK</h2>
<p>I’m running NixOS, and one of the downsides of using NixOS is it can be difficult to run binaries distributed in tarballs.</p>
<p>MounRiver Studio and its toolchain is distributed as binaries in a tarball.</p>
<p>I was able to come up with some Nix packages for the <code>libmcuupdate.so</code> distributed in the toolchain tarball, and the GCC toolchain:<br />
<a href="https://github.com/O-H-M2/qmk_port_ch582/commit/40828b8361bbc711fb7c7af00374eea565f75d2f" class="uri">https://github.com/O-H-M2/qmk_port_ch582/commit/40828b8361bbc711fb7c7af00374eea565f75d2f</a><br />
(I <a href="https://github.com/NixOS/nixpkgs/blob/54aac082a4d9bb5bbc5c4e899603abfb76a3f6d6/pkgs/development/compilers/gcc-arm-embedded/12/default.nix">adapted another Nix package which downloads GCC in a tarball</a>).</p>
<p>With that, I was able to build the QMK port for CH582 built.</p>
<p>Oh. Wait. Taking a look at the <code>--version</code> for the toolchain MounRiver Studio distributes:</p>
<pre><code>$ riscv-none-embed-gcc --version
riscv-none-embed-gcc (xPack GNU RISC-V Embedded GCC, 64-bit) 8.2.0
Copyright (C) 2018 Free Software Foundation, Inc.</code></pre>
<h2 id="risc-v-toolchain">Risc-V Toolchain</h2>
<p>Links to things:</p>
<p>The old <a href="https://github.com/xpack-dev-tools/riscv-none-embed-gcc-xpack">riscv-none-embed-gcc-xpack</a>,
and <a href="https://github.com/sifive/riscv-gcc">SiFive’s riscv-gcc</a>.</p>
<p>And the newer <a href="https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack">riscv-none-elf-gcc-xpack</a>.
And this seems related:
https://github.com/riscv-collab/riscv-gnu-toolchain.</p>
<p>The change from <code>riscv-none-embed-gcc</code> to <code>riscv-none-elf-gcc</code> is mentioned in the <a href="https://xpack.github.io/blog/2022/05/14/riscv-none-elf-gcc-v11-3-0-1-released/">xPack riscv gcc 11.3 release notes</a>.</p>
<p>Trying these upstream xpack riscv toolchains with the qmk port for ch582.. for one, <code>TOOLCHAIN_PREFIX</code> needs to be set to <code>risc-none-embed</code> if using the older GCCs. But, I did need to make a couple of other changes:</p>
<p>The MounRiver toolchain has an extra param <code>highcode-gen-section-name</code> that the xpack toolchains don’t have:
<a href="https://github.com/O-H-M2/qmk_port_ch582/commit/347e15458be15a714494d0088fa77243f62e7009" class="uri">https://github.com/O-H-M2/qmk_port_ch582/commit/347e15458be15a714494d0088fa77243f62e7009</a></p>
<p>And, as the <a href="https://xpack.github.io/blog/2022/05/15/riscv-none-elf-gcc-v12-1-0-1-released/#risc-v-isa-updates">xPack riscv gcc 12.1 release notes explain</a>, errors like <code>extension</code>zicsr’ required<code>can be fixed by adding</code>_zicsr` to the arch: <a href="https://github.com/O-H-M2/qmk_port_ch582/commit/dafb73132b6642ac70322239673060fe56d0b9b9" class="uri">https://github.com/O-H-M2/qmk_port_ch582/commit/dafb73132b6642ac70322239673060fe56d0b9b9</a></p>
<p>(I didn’t try <a href="https://github.com/O-H-M2/qmk_port_ch582/tree/2dde4b4777d2e91abe0b96c91b64f3fea5cd7ecb/utils">the toolchain that’s checked into the git repo</a>; but seeing stuff like that makes me wonder if the embedded developers are doing okay).</p>
<h2 id="building-the-examples-outside-mounriver-studio">Building the Examples Outside MounRiver Studio</h2>
<p>The EVT Examples are supplied with only a MounRiver Studio project file.</p>
<p>Since I’m not sure what works and what doesn’t work (in terms of how to compile the examples outside of MounRiver), it’s easiest to start from something that works. – Building it in MounRiver works, which generates some Makefiles.</p>
<p>Using that, I adapted a Makefile with the same compiler flags to get a Makefile which produced a working build.<br />
(Or, honestly: I’d copied the makefile from the broadcaster example, but that set different <code>-D</code> defines, which didn’t play nicely with the BLE HID example, and it took me some time to notice why my Makefile wasn’t producing a working build of the example).</p>
<p>Anyway.</p>
<p>I copied the BLE HID_Example example, put it together with a standalone Makefile, and some Nix files to provide the toolchain, and shared it in this repo: <a href="https://github.com/rgoulter/ch592-ble-hid-keyboard-example" class="uri">https://github.com/rgoulter/ch592-ble-hid-keyboard-example</a></p>
<h2 id="flashing-the-firmware">Flashing the Firmware</h2>
<p>Flashing the CH592 is the same as flashing the CH552. You can enter the bootloader by holding the BOOT button when plugging the board into the computer, and then use <a href="https://github.com/ch32-rs/wchisp">ch32-rs’ wchisp</a> to flash the firmware. (On Windows, I’d had difficulty using <code>wchisp</code>; but the official programs from WCH worked on Windows when I tried with the CH552).</p>]]></summary>
</entry>

</feed>
