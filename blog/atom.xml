<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2019-02-06T00:00:00Z</updated>
    <entry>
    <title>You Might Like "Anne with an E" If...</title>
    <link href="http://www.rgoulter.com/blog//posts/2019-02-06-you-might-like-anne-with-an-e-if.html" />
    <id>http://www.rgoulter.com/blog//posts/2019-02-06-you-might-like-anne-with-an-e-if.html</id>
    <published>2019-02-06T00:00:00Z</published>
    <updated>2019-02-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February  6, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>You might like Netflix’s “Anne with an E” if: - You value current-year progressive ideals, unlike the stupid, ignorant and bad people who hold values you find gross. - You hate close-minded people. - You can’t understand why late 19th century rural farmers don’t hold modern urban bourgeois moral values. - You watched the 10-hour YouTube video of “Gillette commercial”. Three times. Because of how great it is. - etc.</p>
<p>Bonus points if you think the 1985 mini-series was boring and needed more flavour like “Anne has PTSD”.</p>
<p>I guess it’s a bit weird, but I don’t think anyone who <em>loves</em> the 1985 version would like the Netflix version. And vice-versa.<br />
The Netflix version is just a bit too “and everybody clapped”/“I’m so proud of this community”.</p>
<p>The characters are almost all flat, almost all the time; but entirely follow the tropes necessary for the misery porn.<br />
The characters in the plots tend to be one of: “good character with good morals”, “good character doesn’t agree with good morals but then has good morals by the end of the episode”, or “bad character with bad morals”.</p>
<p>I did quite like the penultimate episode of the second season where the characters being to face consequences for their actions. (The son of a poor family who have been making sacrifices for him to attend school gets caught for having been skipping school to pursue a life of art. This trouble was caused by an unconventional and unintegrated teacher who thought she knew the solution presuming she knew how to fix things. The class bully suffers injury in retribution for the pain he caused others).<br />
But apparently the final episode decided these were bad things. (e.g. the final episode has the bully have a change of heart with warm and fuzzy feelings, as he decides to not shoot the cute little fox which has been pillaging the neighbouring chickens).</p>
<p>The show is very pretty, though. So I can understand the idea of “tell whatever story you want just because you like the setting”.</p>
]]></summary>
</entry>
<entry>
    <title>Comparing Cucumber vs All-in-Code BDD Specs</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2019-01-19-comparing-cucumber-vs-all-in-code-bdd.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2019-01-19-comparing-cucumber-vs-all-in-code-bdd.html</id>
    <published>2019-01-19T00:00:00Z</published>
    <updated>2019-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 19, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>A couple of years ago I added a couple of Cucumber specs to a side-project of mine.<br />
I did this because I was learning to use Cucumber since I was being hired as a Software Engineer in Test. (Their existing automated acceptance tests used Cucumber).</p>
<p>I recently picked the project up again to do some maintenance on it, and I chose to migrate from using Cucumber to using all-in-code ScalaTest for implementing the same specifications.</p>
<p>When using Cucumber, you must ask “why use Cucumber over an all-in-code tool like RSpec (or ScalaTest)”. So, here are some considerations about the trade-offs between using Cucumber and using all-in-language tests:</p>
<h1 id="recap-cucumber-and-bdd">Recap: Cucumber and BDD</h1>
<p>Cucumber is a tool which enables structuring tests in a certain way. This structure particularly supports a “Behaviour Driven Development” (BDD) workflow.<br />
BDD is the idea of specifying behaviours (after having refined what these behaviours should be from examples).<br />
That is: a specification is an artifact from the project-management side; and Cucumber is a tool which executes specifications of behaviours.<br />
BDD’s selling point is “build the right product”. And executable specifications aim to provide “living documentation” about what the code actually does.</p>
<p>Well, that’s my understanding of it from Gojko Adzic’s fantastic “Specification By Example”.</p>
<p>Specifications and Cucumber, from a developers perspective: - Any automated test involves 3 things: - Set up some System Under Test (SUT) - Get the SUT to perform some action - Check that the SUT did what it was supposed to do. - Technically, automated tests may also need to clean up the environment they run in; but this is a technical detail about running the tests, not a detail about checking the SUT. - I’ve seen these three steps described with the mnemonic “Assemble, Act, Assert” which I quite like. - Typically, documentation about what a program does is hand-written. (Although there are interesting tools which try and address this, like <a href="https://stackoverflow.com/questions/50332885/how-do-i-install-and-use-gpg-agent-on-windows/50412924#50412924">Java’s Spring’s REST Docs</a>). - Cucumber’s file format involves describing a “feature” which is a sequence of “scenarios”. (Roughly corresponding to “suite” and “test” in xUnit terms). Each scenario consists of steps. - For example. from <a href="https://relishapp.com/rspec/rspec-expectations/v/3-8/docs/built-in-matchers/equality-matchers">rspec-expectations</a>: <code>cucumber     Given a file named &quot;compare_using_eq.rb&quot; with:       .... Ruby code using RSpec Expectations ....     When I run rspec compare_using_eq.rb     Then the output should contain &quot;3 examples, 0 failures&quot;</code> - it’s a good convention to write the scenario’s steps in a “Given/When/Then” sequence; and this corresponds to “Assemble, Act, Assert”. - Cucumber’s differentiating feature is that the executable specification is separate from the code which runs it. - i.e. a Cucumber test suite has its executable specification in a <code>.feature</code> file, written in Gherkin syntax. This is then executed using test code in “step definitions”. - My impression is that there are different styles of writing Given/When/Then steps: - steps as a convenient way to arrange test code/examples. e.g. for libraries (or APIs) like RSpec. This seems to be the easiest kind of product to write executable specifications for. - steps as “pseudo code”. This seems a compromise for getting documentation which is tested, with less emphasis on readability. - steps as declared descriptions. This is what I think is best for high-level end to end specifications. (Although this ends up with steps which are too vague if they are too high level and don’t mention any details).</p>
<h1 id="advantages-and-disadvantages-of-each-approach">Advantages and Disadvantages of Each Approach</h1>
<p>Relevant advantages/disadvantages for Cucumber vs all-in-code specs: (As opposed to inherent difficulties with end-to-end or out-of-process acceptance tests).</p>
<p>Advantages of Cucumber: - Cucumber specification features are English-readable in plaintext files. This is useful if you want to see “what are the specifications? what does the software do?” at a glance. - It’s much harder to access the “executable specification” from in-code specs (like RSpec or ScalaTest’s FeatureSpec). The “Given/When/Then” are mixed in with the step-execution code. - Cucumber makes it easier to adhere to an “executable specification discipline”. Because scenarios in the Feature file are idiomatically written with “Given/When/Then” steps, writing test code outside that convention naturally <em>smells</em>. - Similarly, if the step-definition code doesn’t “obviously agree” with the step it’s defining, this is another clear smell. - It “smells” if the executable specifications aren’t used anywhere. My experience is that tests tend to be ignored (beyond whether they pass and maybe coverage metrics); but I think tests could be leveraged to provide more value than this. - With all-in-code specs, it’s much easier to be sloppy and have poorly written specs or poorly engineered code which tests the code. - It “smells” if the Feature files aren’t used anywhere. (IME, It’s typical to ignore tests anyway. But I think this is a smell). - It’s easier to produce “living documentation” from a tool like Cucumber than a tool like RSpec.</p>
<p>Disadvantages of Cucumber: - Cucumber step-definitions code has a weird “interface”. “interface” in <a href="https://www.youtube.com/watch?v=bmSAYlu0NcY">John Ousterhaut’s use of the word</a>: “interface” is the stuff you need to be aware of in order to use code.<br />
- With normal imperative code: each statement is essentially adjacent to each statement in the program, or is embedded in some structure like a function or a class.<br />
It’s typically straightforward that the ‘interface’ is all the code in the function, any incoming parameters; and if unlucky, access to “global” state. - With step definitions: It’s possible that some steps will need to store information for later steps or make use of information from previous steps. Steps need to be written in a way that makes the assumed interface as obvious as possible, at the same time as being an idiomatic way to describe some step in a test scenario. - It’s really hard to write good specifications.</p>
<p>Disadvantage of all-in-code specs: - With code, it’s really tempting to “Dont Repeat Yourself” (DRY) so that there’s less code to read.<br />
Whereas, tests should “tell a story”. (They should use “Descriptive and Meaningful Phrases” rather than be ‘DRY’).<br />
With all-in-code specs, if a test step is re-used, then either subsequent steps are nested (which may be hard to read) or copy-pasted elsewhere in the test code. - Cucumber’s approach is to organise test code by step definitions. So, to see the full code listing for a test scenario, you have to view each step definition.<br />
Each step may be “DAMP”, but not the whole scenario.</p>
]]></summary>
</entry>
<entry>
    <title>"Patch Grid" Sounds Like a Useful Editor Technique</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2018-12-18-patch-grid-sounds-a-useful-editor-technique.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2018-12-18-patch-grid-sounds-a-useful-editor-technique.html</id>
    <published>2018-12-18T00:00:00Z</published>
    <updated>2018-12-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 18, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>I came across a link to Austin Henley’s dissertation <a href="http://web.eecs.utk.edu/~azh/pubs/Henley2018bDissertation.pdf">“Human Centric Tools for Code Navigation”</a>.</p>
<p>There are three interesting tools discussed Henley discusses for navigating code:</p>
<ul>
<li><p>navigating code you’re working on now</p></li>
<li><p>navigating through the history of code you’re working on<br />
(though his tool is for visual dataflow languages)</p></li>
<li><p>navigating the structure of the code you’re working on</p></li>
</ul>
<h2 id="ribbon-of-open-files-is-a-great-idea">“Ribbon” of Open Files is a Great Idea</h2>
<p>Of these, I found the “navigating code you’re working on” most exciting. The “navigating through history of code” discussed was aimed at visual dataflow languages; and tools to navigate code structure sound cool but it’s probably a difficult tool to get working outside of full-fledged IDEs.</p>
<p>Henley’s Patchworks sounds like it’d be useful for navigating code you’re currently working on. <a href="https://www.youtube.com/watch?v=GwcxDZT3pXE">Short video visualising the idea</a>. I’d describe it this way:</p>
<ul>
<li>A scrollable pair of tiled rows of editing panes.</li>
<li>A “ribbon” is the 2*m array of open files.</li>
<li>A “patch grid” is the grid / scroll viewport over the open files.</li>
</ul>
<p>That is, your editor window shows a 2x3 grid (2 rows, 3 column) grid of editing panes, and you can scroll the open files.</p>
<p>This is comparable to navigating multiple “desktops” in window managers. (A feature so useful that now even Windows has this out of the box).</p>
<p>I think it’s also worth mentioning a couple of details:</p>
<ul>
<li>It’s beneficial if the user can quickly “zoom” into the split tab pane. (e.g. Tmux has split panes, but also offers a “zoom into pane” feature).
<ul>
<li>Although “keep the unit of code you’re editing small enough that it can be managed in a pane” sounds a nice ideal.</li>
</ul></li>
<li>Henley’s Patchworks offers a “zoomed out” view of the ribbon, so that it’s easy to recognise which open files are where in the ribbon.</li>
</ul>
<h3 id="reasons-to-be-excited">Reasons to Be Excited</h3>
<p>I think there are many reasons to be excited for this idea:</p>
<ol type="1">
<li><p>I might not be the most eloquent, but I feel like it’s relatively easy to to describe in terms of features developers are used to at the moment. Scrolling, editing panes, tiling.</p></li>
<li>I feel this idea is kinda-sorta close to workflows I like at the moment.
<ul>
<li>e.g. in vim I <em>love</em> using unimpaired so that I can press <code>[b</code> and <code>]b</code> to switch between “previous buffer” and “next buffer”. (buffer = “open file” in vim terminology).</li>
<li>e.g. I love switching between multiple desktops. Usually I’ll have “terminal”, “IDE”, and “internet browser” as a working group of 3 desktops focused on the same task.</li>
<li>e.g. I already often split the panes to make use of “code I’m working on” and “output”. Plugins like <a href="https://github.com/epeli/slimux">slimux</a> make use of this idiom.</li>
</ul></li>
<li><p>The editing programs developers use tend to have split editing panes. So, “scroll a ‘ribbon’ of files through a grid of editing panes” seems like it’s a feature which can be implemented broadly.</p></li>
<li><p>I feel that the workflow of: “I’m looking at these functions (which aren’t all next to each other in the same file” is fundamental to maintaining non-trivial software.<br />
The idea of a “patch grid” sounds like it supports this workflow better than “switch between files in the editing pane”.</p></li>
</ol>
<h3 id="reasons-to-not-be-excited">Reasons to Not Be Excited</h3>
<p>I even made an effort at writing <a href="https://github.com/rgoulter/buffer-ribbon.el">a plugin for Emacs</a>, so I’ll be trying the idea out. (It’s usable, but still a work in progress).</p>
<h4 id="navigating-to-another-file-is-already-very-quick">Navigating To Another File is Already Very Quick</h4>
<p>“Navigating” to a different file is something that’s already <em>really</em> easy in modern editing environments.<br />
e.g. in an IDE I can have a “jump to file/function” with fuzzy searching which takes as long as “command invocation + type query + select result”.</p>
<p>The discussion in the dissertation is comparing how long it takes developers to navigate to files using Patchworks vs Eclipse IDE; but AFAICT the users were using the mouse to navigate files.</p>
<p>But, using the keyboard to control a text editor can be very quick, so I think it oversells the idea that the benefit is in navigation speed.<br />
I might believe that using “patch grid + scrollable ribbon” would allow for less time navigating for power-users of an editor across an editing session. But that feels like a less tangible benefit.</p>
<h4 id="editors-already-support-grid-of-split-editing-panes">Editors Already Support Grid of Split Editing Panes</h4>
<p>The ‘novel’ idea to me of Henley’s Patchworks is the “ribbon” of open files that the editor should be able to scroll through.</p>
<p>A “patch grid” minus scrolling the “ribbon” is just a 2x3 grid of editing panes, which editors already support at the moment.<br />
People don’t commonly split panes in IDEs, and AFAICT it’s uncommon to see people use 2x3 grids of panes <em>like that</em>.<br />
I think people don’t use them because it’s difficult to set up, and there’s hardly an obvious benefit to splitting an editing pane into <em>6</em>.<br />
(Right now, I split an editing pane into <em>2</em> all the time).</p>
<p>Maybe the idea of a scrolling ribbon means that it’s less of a hassle to work with a set of open files with a grid of editing panes. (You don’t have to decide which open file to replace; you just have to scroll the ribbon over and open in an unused tile).</p>
<h4 id="existing-workflows-already-work">Existing Workflows Already Work</h4>
<p>Editors / IDEs these days are <em>packed</em> with all sorts of complicated features such as multiple cursors or multiline editing.<br />
There may be features that would be more efficient ways of doing what I want to achieve that my editor already has. I have to go out and deliberately try to improve.<br />
Most of the time, whatever you’re doing to get the work done is good enough as it is.</p>
<p>If making effective use of a “patch grid” (and scrolling it) isn’t intuitive out-of-the-box (or from seeing someone else make use of it, I guess) then it might not be worth picking up.</p>
<p>That said,<br />
not every user is a fan of “keyboard for everything”, and if using a “patch grid” is a big navigation improvement over other mouse-oriented workflows, maybe that’s good enough.</p>
<h4 id="benefits-of-patch-grid-and-ribbon-may-be-unclear-and-unintuitive">Benefits of Patch Grid and Ribbon May Be Unclear and Unintuitive</h4>
<p>My impression is that a big benefit to a “patch grid”‘s structuring “open working set of files” this way isn’t exactly “see everything you need to see at once” so much as the mental model of a ’ribbon’ of buffers makes better use of <em>associative memory</em>, <em>episodic memory</em>, and <em>spatial memory</em>. (cf. section 2.4 “Human Memory of Code Navigation” of Henley’s dissertation).</p>
<p>I’d think a workflow of “quickly switch to other open file in the current editing pane” requires the developer to remember the code in the other files in their working set of open files.<br />
So, surely a “patch grid” of open files make better use of associative/spacial memory than “quickly switch to another file” allows.</p>
<p>Henley’s dissertation discusses that one recommendation is to use the ribbon chronologically, by putting newer open files to the right of currently occupied panes.<br />
I’m curious to try this out for myself, I’m curious to see how easy it can be to scroll the ribbon to open a different file, compared to just switching the file in the current editing pane.</p>
<h4 id="on-a-laptop-screen-2x3-grid-panes-are-really-tiny">On a Laptop Screen, 2x3 Grid Panes are Really Tiny</h4>
<p>2x3 isn’t a magical grid size set in stone.<br />
“2 rows of tiles” is more restrictive than a free-form 2D canvas of editing panes.<br />
Maybe “3 columns of a pair of editing panes” a good number of editing panes to fit in human memory.</p>
<p>But from what I’ve tried on even a 15&quot; laptop screen, a 2x3 grid of tiles feels like editing in a grid pane is an editor pane for ants.<br />
This doesn’t matter <em>much</em>, since I think the benefit of a patch grid isn’t “editing in the grid panes”.</p>
<p>I’ll have to try it on a larger screen to see the difference.</p>
]]></summary>
</entry>
<entry>
    <title>"What I've Been Up To" Ramble</title>
    <link href="http://www.rgoulter.com/blog//posts/2018-10-12-what-ive-been-up-to-ramble.html" />
    <id>http://www.rgoulter.com/blog//posts/2018-10-12-what-ive-been-up-to-ramble.html</id>
    <published>2018-10-12T00:00:00Z</published>
    <updated>2018-10-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 12, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>I haven’t published anything on this blog for some time.</p>
<p>I’ll break that absense with a bit of a ramble.</p>
<p>I’ve just relocated to Vietnam, to live with my girlfriend.<br />
Currently, I’m on a “personal sabbatical”.</p>
<p>The first part of this ‘sabbatical’ has been spent on relocating, and on catching up on some of my Steam backlog.<br />
(I did meet with some of my friends before leaving Singapore, too).</p>
<p>Currently I’m transitioning from “playing games” to “personal organisation”. I’m trying to establish some discipline or deliberateness about how I go about being productive.<br />
One part of that is looking at <a href="https://plaintextaccounting.org">PlainTextAccounting</a> as an improvement on how I have (or haven’t) been tracking where my money goes.<br />
Another aspect of this is to actually make use of the org-files I’ve been dumping content into.</p>
<p>I’ve been fairly good at “write-only notes”. This could be considered as journalling or logging.<br />
I haven’t been good at considering “why?” about these notes. And without a purpose, there’s no cost for the notes not having any structure. (Without structure, it’s expensive to refer to notes; but if you’re not referring to the notes, then this doesn’t matter).</p>
<p>Part of that is fine. You don’t know what the structure/discipline should be until you do it.<br />
But, uh, now I can see that there’s value in: 1) reflecting on what you’re doing, 2) having some criteria to consider when reflecting.<br />
– That sounds rigid; but the point of the structure is to guide and serve, rather than to limit realised potential.</p>
<p>On the topic of “being productive” and disciplined, some interesting media:</p>
<ul>
<li><p>Cal Newport’s “Deep Work”. What a fascinating book. It criticises the “busy” and distracted modern work environment as detrimental to a craftsman’s work, and suggests rules for how to focus on getting meaningful work done.</p></li>
<li><p>“Getting Things Done”. I haven’t read the book, but. People who like Emacs’ org-mode also seem to like GTD. (org-mode and GTD both seem to be flexible such that they can be used per individual preference).<br />
Compared to “Deep Work”, GTD’s emphasis seems to be on “avoid distraction” by way of: keep track of everything on paper (rather than in your head), and have a process to sort out the things you want to keep track of.</p></li>
<li><p>I finally watched a Joe Rogan podcast with Jordan Peterson as a guest. Seems like JBP often argues in favour discipline &amp; <em>incremental</em> improvement.</p></li>
</ul>
<hr />
<p>Related to this: social media.<br />
I haven’t been spending as much time on social media recently as I used to.<br />
This isn’t a “I’m being disciplined about it” thing.<br />
It’s partly a “not especially interested”; and I think partly I want to organise my social media stuff too.</p>
<p>I’m not particularly negatively affected by “people post their perfect selves on social media”. Albeit, I suppose I’m guilty of posting some good times on social media, which maybe does affect others.</p>
<p>I do find myself drawn-in by e.g. the titles/questions in the Quora Digest emails. (I haven’t thought much about why this annoys me).<br />
I’m also drawn in by the “what’s next? what am I missing out on?” allure of Twitter and Hacker News. (I think Reddit communities have the same draw to them, so I don’t go on Reddit).</p>
<p>Well, uh, yeah, Twitter is probably my favourite social media site for arguments, which I’m fascinated with.<br />
And while the tribalism and culture-war politics is admittedly a big draw for me,<br />
I think another aspect of what I liked about Twitter was its referential nature. Since the 140 characters wasn’t enough to explain or link to any context, tweets would inherently refer to events. As a user, you had to be “in the know” for this to make sense. My experience was often having to puzzle together what people were talking about from various tweets.<br />
There’s a kind of “open to anyone who makes the effort” inclusion to that.</p>
<p>In terms of “organising myself” and “being disciplined”, my concern here is a lack of deliberateness in consumption.<br />
e.g. Spending about an hour looking through various programmer-related discussions on Hacker News or trending GitHub repositories seems fine (especially if it’s an hour I have set aside to do that).<br />
But spending however-long getting mad about slights against my tribe (or dumb things my out-group do) on Twitter until I’ve seen pretty much everything people in my timeline have gotten mad about … doesn’t seem so good.</p>
<hr />
<p>One sensible solution here is “don’t go on Twitter to consume politics if it’s unhealthy for you”.<br />
But I kinda reckon if recommendation-algorithms will naturally find this kindof stuff for me: Instagram’s recommendation manages to show me cartoons with a propaganda-level of political fervour.<br />
– On the other hand: most people are able to move through life and the internet without being politically, tribally worked up about everything. (I’m not sure if this is a case of “once you’ve tasted the forbidden fruit, you can’t go back” kinda thing).</p>
<p><a href="https://www.codesections.com/blog/mastodon-elevator-pitch">CodeSections’s “Mastodon Elevator Pitch”</a> argues in favour of Mastodon essentially as a ‘technical solution’ over Twitters outrage-encouraging site. The incentives of the system are geared to avoid the outrage that Twitter’s induces.</p>
<p><a href="https://www.kialo.com/tour/">Kialo</a> is another ‘technical solution’. Kialo is interested in visualising and structuring the arguments on contentious topics.<br />
I haven’t looked at it enough to have much of an opinion; the only one I’ve looked at was <a href="https://www.kialo.com/is-the-last-jedi-one-of-the-weakest-star-wars-movies-so-far-7055/7055.0=7055.1/=7055.1">“The Last Jedi is one of the Weakest Star Wars Movies So Far”</a>. I guess the hope is that, if points must be made (and supported), this doesn’t give much room for emotion to sway perspective. Yet, I still like Haidt’s “reason is the press secretary of the emotions”.<br />
– Perhaps the point of the site isn’t <em>persuasion</em> so much as a dialogue with less heat to it.</p>
<p>For myself, I’d first wonder whether “doing social media slower” would be ‘better’.<br />
Like, instead of a “retweet and this gets retweeted immediately”, a “review in 24 hours, and retweet if I think it’s still a good idea to do that”. But I suspect if shown the same input I’d behave in the same way, and still be mad again 24 hours later.</p>
<p>Another couple of dumb ideas:</p>
<p>I wonder how analogous the “outrage machine” of social media (and its ills to society) is to “herd immunity” with vaccinations.<br />
As in, if a critical mass of people were immune to outrage, or “fake news” or mainstream media clickbait, then the pathogens won’t go viral amongst vulnerable.<br />
– With biological diseases, a vaccine is an inert (or very weak) form of the disease. This strengthens the body so that the actual disease can’t take hold.</p>
<p>I stumbled across a conspiracy-theory video on YouTube once.<br />
I didn’t stay to watch it.<br />
And <em>obviously</em> only idiots fall for conspiracy videos, right?<br />
But, I kinda wonder how much of the crap in those videos I’d fall for.</p>
<p>Another idea,<br />
maybe I’d be less annoyed by dumb tweets or whatever if I took the time to (1) describe why I’m annoyed by it, (2) figure out an explanation for why the dumb tweet was said, in a way that provides dignity.<br />
– Like, maybe trying to code content <a href="http://slatestarcodex.com/2018/05/08/varieties-of-argumentative-experience/">to a model like SSC’s “Varieties of Argument”</a> is another way to deal with the emotion?</p>
]]></summary>
</entry>
<entry>
    <title>StackOverflow, Elitism, and Community</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2018-04-27-stackoverflow-and-elitism.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2018-04-27-stackoverflow-and-elitism.html</id>
    <published>2018-04-27T00:00:00Z</published>
    <updated>2018-04-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on April 27, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p><a href="So%20this%20came%20up%20on%20HackerNews">https://news.ycombinator.com/item?id=16934942</a>. StackOverflow’s discussion that it ought to do more to be more welcoming.</p>
<p>Some of the points highlighted:</p>
<ul>
<li>Dickish behaviour on StackOverflow comes from the perverse incentives of its reputation system.<br />
e.g. one way to be rewarded with reputation is to ‘edit’ an answer. This leads to frivolous editing, such as removing “thanks” from a question.
<ul>
<li>There’s also a big imbalance between the role of asker and moderator: An asker only wants a response to their question, whereas a moderator will see hundreds of “low-quality” questions being asked. (So can hardly care to be kind to all of these).</li>
<li>One commenter points out that with Reddit, the system is more ‘democratic’ as the cost to ‘exit’ is so cheap: if leadership screw up, it’s cheap to just create another sub-reddit the community can move to.</li>
</ul></li>
<li><p>There’s a selection-bias against quality in questions:<br />
Anyone who can go to the effort to search for previous/similar questions, as well as refine their question down to its essence is more likely to be capable of <em>then</em> finding an answer themselves,<br />
compared to someone who just blindly asks.</p></li>
<li><p>“StackOverflow is elitist…”<br />
HackerNews is <em>on board</em>.<br />
“…to newbies…”<br />
<em>Totally</em>.<br />
“…and women, people-of-colour”.<br />
Those be fighting words.</p></li>
</ul>
<p>It seems that (roughly) StackOverflow has three kinds of users: - Those who ask questions - Those who answer, and moderate - Those who browse the site (from search-engine results page) but don’t ask/answer questions.</p>
<p>My experience personally was joining the site + being ‘reputation blocked’ from helping where I wanted to.<br />
Well, whatever.</p>
<p>Part of the discussion is about the purpose/role of StackOverflow as a site. How its mechanics work (as opposed to, say, mechanics of Reddit). Whether it wants to be a quick/dirty my-question-my-answer or the-question-the-answer site.</p>
<p>Part of the discussion is about how much of an effort askers need to make to ask a question.<br />
And how much of an effort answerers need to make to be considerate.<br />
– Though I think this involves pointing out that people interact in different ways like how <a href="https://status451.com/2016/01/06/splain-it-to-me/">Alice Maz did with “Splain it to me”</a>.</p>
<hr />
<p>I have the concern that much of the “but women are hurting” comments come from people who don’t see that the established norms can be legitimate.<br />
e.g. <a href="https://medium.com/@maradydd/when-nerds-collide-31895b01e68c">Meredith Patterson’s excellent “When Nerds Collide”</a> discusses this. (Patterson’s concerns discussed elsewhere include that these feminists are unconcerned about excluding people they dislike; e.g. autists).</p>
<p><a href="https://status451.com/2016/09/15/social-gentrification/">Simon Penner’s “Social Gentrification”</a> is a good discussion about community interactions like this, too. (Progs are “social gentrifiers”, who invade a place a predominantly “poor” place, and make it nicer, but in doing so exclude those who inhabited the community already).</p>
<p>But that the “StackOverflow isn’t welcoming to women” is fighting words whereas “StackOverflow isn’t welcoming” isn’t:<br />
This is so closely politics and culture wars that it’s disingenuous to discuss without pointing that out.</p>
<p>Most of the interactions of the culture war are driven by fear, not love. And what people value is the notion of relief, and safety.<br />
StackOverflow’s remarks are clearly in reply to support women and people of colour who fear they aren’t welcome.<br />
– As Patterson points out, some nerds get antsy about this since they grew up at the bottom of the social hierarchy (i.e. excluded); then found a place which they belonged. Tech happened to get popular, and these people are now being told they deserve to be on the bottom of the hierarchy, when they’d prefer that no hierarchy were there at all.</p>
<p>I think it’s useful to highlight that the interactions are political because it shows why those involved express &amp; feel things differently:<br />
- e.g. The “as a straight-white man I need to be doing better” is certainly coming from someone who identifies as progressive.<br />
(i.e. other people who value ‘progressive’ as part of their identity are likely to speak the same way; whereas in my experience “white men” don’t). - The claim “StackOverflow isn’t welcoming to women” is parsed as “sexism”.<br />
- Non-progressives consider “sexism” as “discrimination against a women, because she’s a women”. This fails to pattern-match against interactions on StackOverflow since anonymous accounts aren’t distinguishable by gender traits.<br />
Interactions are judged at the level of the individual. - Whereas a progressive considers “sexism” as: the structures in place or the way that women feel. So if most of StackOverflow’s users are men, then that’s evidence of sexism. If women don’t feel welcome, the culture is sexist.<br />
Interactions are judged at the level of the group.</p>
]]></summary>
</entry>
<entry>
    <title>Employment Interactions are a Mix of Market and Social</title>
    <link href="http://www.rgoulter.com/blog//posts/politics/2018-03-27-employment-interactions-are-a-mix-of-market-and-social.html" />
    <id>http://www.rgoulter.com/blog//posts/politics/2018-03-27-employment-interactions-are-a-mix-of-market-and-social.html</id>
    <published>2018-03-27T00:00:00Z</published>
    <updated>2018-03-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March 27, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>One of the kindof interesting parts of Dan Ariely’s “Predictably Irrational” is where he points out some interactions between people are ‘social’, some are ‘market-oriented’; these two kinds of interactions have different protocols and don’t mix well.</p>
<p>The most striking example of this is something like lawyers who are willing to do pro-bono work; but not willing to do the same work if offered some compensation.<br />
<em>Rationally</em>, adding money/reward to a task ought to increase the incentive.<br />
But it seems that when money is involved, the consideration isn’t “I’m helping these people” so much as “this isn’t an effective use of my time”.</p>
<p>Or perhaps more briefly: you don’t reciprocate social interactions with money.</p>
<p>So, like: Market-oriented interactions are low-trust, and precise.<br />
Social interactions rely on trust, and rely on vague reciprocity (or benevolence).</p>
<p>Norms of social interactions are how you interact with your family, friends or romantic partner.<br />
Market-oriented interactions are how you interact with staff at big chain stores.</p>
<p>I’ve been thinking that the relationship between employer and employee has an interesting mix of these two.<br />
It’s obviously market-oriented in that money changes hands. “Why do you want to work here?” is going to largely be “because I need money”.<br />
But employment involves social norms too. – A company employees who are trusted with the responsibility to do their jobs is going to do better than a company without that trust.</p>
<p>This <a href="https://mtlynch.io/why-i-quit-google/">“Why I quit Google”</a> blogpost touches upon the same idea: - The author did a good job by cleaning up some systems which were painful to interact with, and actively helped his colleagues. But, since this didn’t get measured, the company didn’t reward him for the job. - The straw which broke the camel’s back was when Google didn’t give him a Christmas gift. (<a href="https://steveblank.com/2009/12/21/the-elves-leave-middle-earth-%E2%80%93-soda%E2%80%99s-are-no-longer-free/">“The Elves are Leaving Middle Earth”</a> has another example of this). Ariely points out that gift-giving is a good tit-for-tat reciprocity mechanism in social interactions. – But at the end of the day, Google as an employer needs to make money, and the employer/employee relationship is a business one.</p>
<p>Every now and then I’ll see remarks along the lines of “it’s good to do the work you enjoy”. (e.g. <a href="http://firstround.com/review/our-6-must-reads-for-managers-to-give-feedback-that-helps-people-grow/">FirstRound’s Recommended Reads for Managers Giving Feedback</a> suggests that a manager can guide their managees better if they know their life stories).<br />
I’m not quite sure what to think of this.<br />
If there were a sorting hat, and it were possible that all jobs could be enjoyed, it’d be great.<br />
– But “do what you want to” is a social interaction, whereas “do what you’re told” is a market-oriented norm. If the two happen to coincide, great.</p>
<p>The notorious “performance improvement plan” is another example of this.<br />
From a market-oriented view, it seems perfectly sensible/rational. There’s a performance expectation, a plan to reach that performance. (It would be irrational for the planned improvement to be infeasible).<br />
But I think the reason it’s notorious is that it’s perceived as an excusable means for getting rid of someone.<br />
Even in a more ‘benevolent’ situation, (like, the employee actually is under-performing), the ultimatum of a PIP creates stress. (The First Round article above argues this).<br />
– It’s a violation of social norms, even if it makes sense from a market-oriented perspective.</p>
<p>I like the idea of mutual improvement.<br />
The employer tries to ensure their employees are the best at what they do, and tries to have the best workplace of any employer.<br />
– I think this kindof approach can be had socially: I <em>care</em> that you improve; and you care to support me to improve.<br />
But it also makes sense from a market-oriented perspective.</p>
<hr />
<p>To me, the 40-hour workweek is a dumb example of market-oriented perspective in many cases.<br />
I don’t think people are good at focussing for 8 hours a day, 5 days a week. (e.g. as SlateStarCodex points out in his discussion of <a href="http://slatestarcodex.com/2017/12/28/adderall-risks-much-more-than-you-wanted-to-know/">risks of Adderall</a>). Or the great admissions in <a href="http://bookofhook.blogspot.sg/2013/03/smart-guy-productivity-pitfalls.html">Smart Guy Productivity Pitfalls</a>.<br />
I certainly think flexibility or allowance for part-time work would allow those who can’t (or don’t want to) work 40 hours a week to join the workforce.<br />
– But I think salary already takes into account that 40-hours at work isn’t 40 hours of work done. A salary isn’t directly tied to tasks-completed.<br />
From a market-oriented perspective, it makes sense to only pay for the work done (and provide incentive to remain on the team). From a social-interaction perspective, it makes sense to support employees even when they’re not directly producing output. (e.g. sick leave, vacation, maternity leave).</p>
<p>I kinda wonder if these functions of salary/compensation could be split up into a small ‘salary’ for company-affiliation (regardless of any work done), and larger commission packets for achieving units of work. Those who achieve more ‘work’ would earn more money.<br />
– This would be a different balance of market-oriented interactions and social interactions. It’s mostly just a dumb, fun thought.</p>
<p>But to continue a dumb, fun thought a bit:<br />
I wonder how mixing money and communication would work.<br />
Money could be used as a tax-on-bullshit to reduce inefficient work communications and meetings. – If you were paying people for their time (as a salary already does now anyway), you’d want to make sure they’re spending their time in a beneficial way.<br />
– That’s not to diminish the value of water-cooler type chats or other social interactions.</p>
]]></summary>
</entry>
<entry>
    <title>Playing Videogames with my Girlfriend</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2018-03-26-playing-videogames-with-my-girlfriend.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2018-03-26-playing-videogames-with-my-girlfriend.html</id>
    <published>2018-03-26T00:00:00Z</published>
    <updated>2018-03-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March 26, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>My girlfriend and I have had a bunch of fun playing videogames together.</p>
<h2 id="laytons-mysteries">Layton’s Mysteries</h2>
<p>I had bought this for the Nintendo 2DS.<br />
I didn’t realise it was available on Android phones, and I’d heard good things about the Layton series.<br />
Unfortunately, many reviews suggest that other games in the series are better.</p>
<p>In any case, we found this game to be quite fun to play together.<br />
“Layton’s Mysteries” is a puzzle game.<br />
The gameplay is split into two parts: finding/interacting with different parts of an area, and solving puzzles/riddles.</p>
<p>The “find/interact with parts of an area” is (IMO) quite dull.<br />
It just involves ‘clicking’ on each person, object, lightbulb, etc. shown until finding all the ‘puzzles’.</p>
<p>The puzzles are the real meat of the game.<br />
There are many different kinds of puzzles.<br />
Some will have a deliberate trick answer. (Often “zero” is the trick answer, whenever the wording of the question may allow for it. e.g. “a bus has this fuel efficiency, minus this for every person in the bus. If all the people get off the bus, how far can the bus go with this fuel?”.).</p>
<p>We did get quite stuck on a couple of the puzzles to the point where we had to use all 3 clues. – Mostly I’d blame this on poor phrasing/wording.<br />
But for the most part, we were able to have fun thinking about it and trying “this is the answer, no this is the answer”.</p>
<h2 id="overcooked">Overcooked</h2>
<p>“Overcooked” on Steam is Windows only. (Although maybe it’s available on PlayStation and Xbox).<br />
And it doesn’t have multiplayer over internet. So, you can only play it together with other people on the same computer.</p>
<p>I’d seen “Overcooked” played by Achievement Hunter on YouTube.<br />
It’s clearly chaotic fun there.<br />
“Overcooked” is ‘multiplayer Diner Dash’. That is, you play as a chef in a kitchen, there are orders which need to be cooked. Each order has a specific set of ingredients, and the ingredients may need preparation. The kitchen features stations for picking up ingredients, preparing them, cooking them, and delivering them.<br />
To make things more interesting, “Overcooked” often adds constraints in each level. e.g. one ‘kitchen’ takes place in two trucks, which periodically come together, and drive apart. So, the players have to plan which tasks they can do on one half, and what transfer must be done when the two halfs of the kitchen are together.</p>
<p>It turns out that the game is really designed for four players.<br />
But, it can be played by two.<br />
– It can be played by one; but then the point of the game is the constraints make communication and strategy decisions made between players are important. And so with just one person, there’s no chaos or tension like that.</p>
<p>My girlfriend and I really enjoyed playing “Overcooked”.<br />
We played it on an old laptop; so things were a bit laggy.<br />
The experience tended to be: - Try a level once or twice to see what constraints come up. (e.g. Whether the kitchen splits in half. Or that there are rats who will steal any food left lying around). - Discuss “I’ll try doing this part, you do that part”. Try that. - Discuss “What would help is if I were to … and you were to …”.</p>
<p>It was really satisfying to get 3-stars for a level.<br />
Sometimes we got a score much higher than the score required for 3-stars. One time we got the required score exactly!<br />
– You don’t <em>need</em> to get 3-stars for each level. In order to progress through the game, you need to have enough stars to ‘unlock’ the next level.</p>
<p>I think what makes “Overcooked” so good for multiplayer is: - It’s co-operative. So there’s a shared goal. And it’s in everyone’s interest to get along. - It requires coordination between players. - Low barrier to entry: The games rules are actually very simple. And it doesn’t seem like it demands huge skill with a controller. The challenge comes more from decisions about <em>how</em> to go about doing tasks.</p>
<h2 id="pit-people">Pit People</h2>
<p>“Pit People” was developed by The Behemoth. The Behemoth also made “Castle Crashers” and “Battleblock Theatre”.<br />
Their games on Steam have overwhelmingly positive reviews.</p>
<p>“Pit People” is a turn-based strategy game.</p>
<p>Unfortunately, we didn’t really enjoy playing this.<br />
I took a look at the negative reviews, and it seemed to match our experience:<br />
e.g. The combat was <em>really</em> slow. And didn’t seem to involve much strategy.</p>
<p>The game also seemed to have a lot of ‘stuff’, but it wasn’t always clear what was going on.</p>
<p>After playing with my girlfriend, I have since put in a couple more hours into the game by myself. (Although not yet with my girlfriend again).<br />
Hmm.<br />
It’s not bad. I’d say it takes some time to get used to.</p>
<p>I think it doesn’t compare favourably to e.g. “Tiny Metal”.<br />
“Tiny Metal” is ‘inspired by’ “Advance Wars” (and “Fire Emblem”), which are cute turn-based strategy games. “Pit People” and “Tiny Metal” are both turn-based strategy games, which have an overworld where players move their army about and choose which fight to fight next.<br />
Overworld: “Tiny Metal”‘s overworld is bare-bones. Barely more than a prettily dressed up menu. “Pit People”’s overworld much more complicated.<br />
Turn-based gameplay: “Tiny Metal”’s involves quite a depth of strategy. You can construct units, and so can choose units which are hard-counters to enemy units. (e.g. anti-aircraft guns which can eliminate enemy aircraft quickly, but are defenseless against ground units). – “Pit People” seems to put its ’strategy’ into unit-composition; but this doesn’t seem to have a large impact and fights just seem to take a long time regardless of what attacks what.</p>
<p>It seems to me “Tiny Metal” is much more fun in the meat of the gameplay (turn-based gameplay).<br />
It’s not that “Pit People” is dumber. But it seems to be more complex in areas where the game should be simple.</p>
<p>I also think “Pit People” limits the gameplay in its overworld by limiting the inventory space.<br />
e.g. you need to return to the city to heal/revive your units after a battle. Or you can use a campfire, (like in Final Fantasy games). But, your inventory is only 8 slots. And campfires don’t stack.<br />
And you need inventory space to collect spoils from a fight.<br />
– I believe the complaint I saw in a negative review which said “you have to return to the city every two skirmishes, no matter what”.</p>
<h2 id="lego-star-wars">Lego Star Wars</h2>
<p>I’d played through “Lego Star Wars” by myself a couple of times before, many years ago. (As well as having played “Lego LotR”, and “Lego Star Wars: The Force Awakens”).</p>
<p>The series has added some complexity/gimmicks to its formula, as well as improving the co-op gameplay to split the screen!</p>
<p>But, yeah, we played through the classic “Lego Star Wars”.</p>
<p>We had some difficulty with the platforming. I think LSW was somewhat unforgiving here.<br />
My girlfriend wasn’t familiar enough with using a game controller, and so her thumb got quite sore.</p>
<p>But besides that, the gameplay is fairly simple. And the cutscenes are cute, and it’s cute to play as the Lego characters.</p>
<p>The other fun thing was the “what’s this person’s name again?” type things.<br />
– I’d done a movie-marathon of all the Star Wars movies with my girlfriend leading up to The Last Jedi’s release.</p>
<h2 id="ibb-and-obb">Ibb and Obb</h2>
<p>I’d heard good things about “Ibb and Obb”.<br />
I also had seen Achievement Hunter’s PlayPals play this (though they edited out most of their gameplay).</p>
<p>It’s a puzzle-platformer, and is only for two-players.<br />
The platforming/puzzling is built around mechanics around moving between above-ground/below-ground. Below-ground has gravity pointing up. So, kindof like “thinking with portals”, but using flipped-gravity instead of teleportation.</p>
<p>The game is very cute.<br />
I think the puzzle-platforming did require a good amount of skill/precision in places. (I’m not sure if it requires it from both players, though).</p>
<p>I don’t think there was too much discussion about <em>how</em> to solve puzzles. Most of the time it was more a matter of struggling to execute a particular plan.</p>
<h2 id="cutthroat">Cutthroat</h2>
<p>“Cutthroat” is similar to “Hidden in Plain Sight”, or “Thieftown”.<br />
The basic premise of these games is that the game screen has many units on screen, but there’s no indication of which unit is controlled by which player. So, the goal is to figure out which unit you are, which unit the other player is, and then eliminate the other unit.</p>
<p>“Cutthroat”’s design/variation on this formula is that there are four kinds of units, and each unit has two abilities (in addition to a basic attack).<br />
– One good thing about this is it makes it easier to find your own unit (since you get to select which kind of unit your unit is).</p>
<p>I felt that my girlfriend didn’t enjoy this one as much. Or, rather, it would take quite a bit of practice to get used to.<br />
More than once, we had to wait for the level’s timer to run out to the point where almost every non-player unit was removed from the map before someone won.</p>
<p>I kinda felt that the units on the map lacked vitality. It felt kinda dead to look at. But, perhaps if they were livelier, it would be more difficult to spot other characters.</p>
<h2 id="ultimate-chicken-horse">Ultimate Chicken Horse</h2>
<p>I’d also seen “Ultimate Chicken Horse” on Achievement Hunter’s videos.<br />
They played with four players. I was concerned that it wouldn’t work as well with two people. – But mostly it works just as well.</p>
<p>“Ultimate Chicken Horse” is a platformer game, where the goal is to reach the end of the level.<br />
The twist is that: if all the players make it to the end, no one wins any points. (And if no one makes it to the end, no one wins points). Each round takes place on the same map, and each turn the players get to pick an ‘obstacle’ to place on the map. (e.g. a platform, or an auto-firing crossbow).</p>
<p>I don’t know if this works with greatly-different skillsets playing at the same time. (It’s not cooperative). – But there is an option to ‘handicap’ a player, by reducing the number of points someone gets from winning a turn.</p>
<p>My girlfriend and I really enjoyed this.<br />
I think because: - The platforming itself is relatively easy. So you always think “I could do that”. - Just because you might not get points, doesn’t mean it’s not fun to see someone die because of a trap/obstacle you placed. - Since everyone places obstacles simultaneously, even just that is kinda fun: You can plan a route to help yourself, place an obstacle to make things harder, or place an obstacle to nullify the obstacle the other players placed. - The graphics are quite cute.</p>
<p>The only way it’s not as fun for two players as it is for four players is that with two players it’s “I win the round, or you win the round”; whereas with four players, it’s possible for multiple players to win.</p>
]]></summary>
</entry>
<entry>
    <title>FasterThanLight's Sequel Into The Breach</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2018-03-05-fasterthanlights-sequel-into-the-breach.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2018-03-05-fasterthanlights-sequel-into-the-breach.html</id>
    <published>2018-03-05T00:00:00Z</published>
    <updated>2018-03-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  5, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>“Faster Than Light” (FTL) was a very cool game.<br />
You basically got to play as the captain of a starship. Gameplay would be like “Divert power from the shields to the weapons. Target their engines!”.<br />
But the game was also ‘rogue-like’. The gameplay didn’t take place in a single crafted, designed campaign of missions. The ‘campaign’ was procedurally generated. – So, in each playthrough, the encounters and opportunities to get better equipment or crew members would be different.<br />
The gameplay was split between the 1-on-1 starship combat, and the overworld where the player navigates through a graph of nodes. The end goal is to beat the final boss, a super-starship.<br />
– The dynamic is, I think, that you’ll fail most of the time. But every now and then you’ll win.</p>
<p>FTL is a popular game. I’d say I enjoyed it. Mostly.<br />
A sequel just came out. And I’d say I kinda enjoy it, but it’s not really for me.</p>
<p>Superficially, the game is quite different from FTL: aesthetically, it’s a combination of “Pacific Rim” and “Fire Emblem”/“Advance Wars”. Giant mech robots fighting giant aliens.<br />
The overall gameplay is surprisingly similar to FTL, going by the above description. It’s got gameplay split between an overworld, and the robots-vs-aliens. Procedurally-generated so different experience each time. etc.</p>
<p>It is different from FTL in that the combat is turn-based (like “Fire Emblem”/“Advance Wars”, or any “x Tactics” game) rather than the real-time action of FTL.<br />
And the end-boss isn’t against a gigantic monster.<br />
But overall, pretty much any detail I can think of is essentially similar to FTL. Huh.</p>
<p>The dynamic feels a bit closer to, e.g. XCOM’s.<br />
Your team is there to save the world. You have to make the trade-offs for which things you can save, and which things you can do without.<br />
– I think the game is fun for that reason. But I don’t enjoy it as much. Since the game is ‘rogue-like’, and each game is short: if the game starts going unrecoverably sour, then I can just start a new game and hope for better luck.</p>
<p>It does sometimes feel like ‘luck’.<br />
The robots-vs-aliens turn-based mode is less “turn based combat” and more of a puzzle about the constraints.<br />
Each of the robots-vs-aliens mode last about 4 or 5 turns. In each turn, there are a couple of aliens; and a couple more will spawn each turn. So usually the gameplay in each turn is to eliminate/neuter the aliens in that turn.</p>
<p>I do enjoy the puzzle-based gameplay.<br />
But … I don’t enjoy the dynamics involved with the constraints.<br />
e.g.:<br />
Killing the aliens means your units gain a bit of experience.<br />
If the aliens damage any of the cities, it’s very bad. Completing the optional objectives in each of the maps is good; you get a reward if you <em>don’t miss any</em> of them.<br />
You can restart … a turn. (You can’t restart the map, or undo anything less granular than a turn).<br />
Completing the optional objectives also earns you points which you can spend after every 4 battles. But you don’t get many points, and can’t upgrade your units very much.<br />
– Throughout a really good game on easy, I was able to half-upgrade all three of the units. (Or was it fully-upgrade one, mostly upgrade another, and the third unit didn’t do much?).</p>
<p>The game just feels a bit too ‘scarce’ for me.</p>
]]></summary>
</entry>
<entry>
    <title>LinkedIn Can Be Fun Sometimes</title>
    <link href="http://www.rgoulter.com/blog//posts/2018-02-20-linkedin-can-be-fun-sometimes.html" />
    <id>http://www.rgoulter.com/blog//posts/2018-02-20-linkedin-can-be-fun-sometimes.html</id>
    <published>2018-02-20T00:00:00Z</published>
    <updated>2018-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 20, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>LinkedIn always strikes me as one of those networks which people will just kind of ‘have’ for ‘job stuff’. The folk you’ve met when you’re at work or when they’re at work or when you meet someone and they mention they have a job or they mention they want a job.<br />
“Professional Network”.</p>
<p>From what I can tell glancing at my LinkedIn newsfeed (timeline?), it refreshingly doesn’t have so many “so brave” opinions. – You don’t see “share this post if you love Jesus” (or whatever other tribal equivalent) on LinkedIn.<br />
“Professional Network”. Or maybe people just aren’t “themselves” on LinkedIn.</p>
<p>So, I think ideally it’s “Twitter minus garbage fire”.<br />
– I kinda wonder why e.g. GitHub doesn’t have more about this.. a place to share thoughts like “so I last looked at CSS 20 years ago; what’s new?”. GitHub does allow adding ‘friends’. But one way of describing GitHub’s newsfeed is that it’s filled with “actual work” rather than your friend’s baby pictures. (Commits are “actual work” right?).</p>
<p>LinkedIn is also mostly without the stuffy feeling of superiority of how great a social media site it is. (Compared to Quora of yester-year or people who use Google Plus lawl).<br />
Mostly, anyway. I did meet someone years ago who said “if they don’t exist on LinkedIn, then they don’t exist”. Wouldn’t’ve been surprised to find out his degree was the one which rhymes with NBA.</p>
<p>My LinkedIn profile bio begins with “Don’t hate the players, hate the game; but seems like LinkedIn promotes treating profiles as ‘livestock commodities’” and a link to this excellent discussion about tech interviews: http://www.daedtech.com/hiring-is-broken/</p>
<p>I like “don’t hate the players, hate the game”.<br />
Because it seems the players often don’t like each other. e.g. <a href="https://twitter.com/iamdevloper/status/958304675345960960">this tweet</a> makes fun of recruiters who show up to programmer-interest groups. It resonated with some. (Not as much as <a href="https://twitter.com/StevieBuckley/status/958297693251670016">the tweet just before it</a>; although that could be due to the culture-war progressive-leaning mention of ‘white males’).<br />
– It’s a bit mean-spirited. But I’d call it “the game” in that it’s different groups with different amounts of power competing.</p>
<p>But another difference which comes up whether a use is a “LinkedIn Open Networker”. I guess most of the joke of “I’d like to add you to my professional network on LinkedIn” is about people who say this IRL (why?!). But I don’t wonder if it works for LIONs, too.<br />
– For LIONs, it seems the main purpose of LinkedIn is expanding their ‘professional network’. For myself, I don’t understand what makes “increase the size of an arbitrary sub-graph of LinkedIn’s graph” so special. (I’d call “only add people you’ve met” non-arbitrary).<br />
Though I can accept ‘each to their own’. And I can click “I don’t know this person” any time a LION connects with me on LinkedIn with no message. :-)</p>
<p>I had a bit of fun recently.<br />
I recruiter messaged with stock-standard “hi I’d like to connect”. (Albeit, this message isn’t added by default to a connection request. So I guess it’s personal enough that they thought to add it).<br />
I decided to ask what they thought about the difference between ‘connecting’ on LinkedIn (which is cheap) vs ‘networking’ in person (which is more useful for finding a job).<br />
Recruiter did reply to that.<br />
But also surprisingly showed some personality/connection by asking a question back. “Why have a LinkedIn profile? Your profile writeup seems pretty against it”.<br />
I guess if the question were “what do I wanna get out of LinkedIn?” I don’t think I could point to anything. (And “what I use LinkedIn for?” would be the same as why I have an Instagram account, I guess).<br />
I thought it was fun to think about it. (Glorified Spreadsheet about what jobs my friends have).<br />
But also fun to discuss that cheap interactions make for a lot of noise.</p>
<p>I’ve heard “betting is taxation against bullshit”.<br />
I kinda wonder (with pixie dust) what the effect would be if everyone with a year’s experience had to pay 10% of the salary they hoped to get when applying for a job. (In my pixie dust: companies which do a poor job of providing expectations would then suffer from people not applying for the job)<br />
And (maybe it’s just super anti-LION), but some sort of scaled fee for messaging someone. Unpopular profile? Cheap to message! Popular profile which receives many messages? Expensive to message. (Oh, uh, in pixie-dust land: the profile receives some of the money, too, for reading the messages).<br />
– I can’t say I’m particularly serious about this. (It’d apply just as well to dating for people who have money, right?). But since ‘apply for job’ (or ‘message profile’) has no cost, and a positive potential reward, there’s a better expected result from just applying/messaging without sincerity.</p>
]]></summary>
</entry>
<entry>
    <title>Vigilant Reflection</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2018-02-19-vigilant-reflection.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2018-02-19-vigilant-reflection.html</id>
    <published>2018-02-19T00:00:00Z</published>
    <updated>2018-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 19, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>One good, sensible motto that is worth keeping in mind every now and then is to reflect: ‘Where am I at? Where do I want to be? How can I get there?’. – I’m not sure how that works for ‘I don’t know what I want’; but it’s much better to know that you don’t know, than to just have the angst.</p>
<p>I think this is useful especially if you find yourself in the same ‘situations’ repeatedly.<br />
– I like to think it’s helped me figure out some of my failure-modes in terms of how I work. e.g. I like having ‘flow’ with my work. This can be described as work with ‘the right level of challenge, for your current level of skill’. (I’ve seen different diagrams for this; I don’t know which are reliable, but this sounds a sensible model).<br />
For me, if I’ve found if I don’t have ‘flow’, it can be difficult to find motivation and to live up to my potential. And if I’m not aware of this, I’ll end up stuck.</p>
<p>So it’s useful to have tools to help reflect.</p>
<p>The term ‘Emotional Intelligence’ (EQ) gets thrown around every now and then.<br />
It certainly sounds like a bullshit term made for cuddly-feely for people who may not have high IQ, but can get on with other people.<br />
But the concepts related to it seem useful enough tools: awareness and management of self, awareness and management of others. <a href="https://www.keystepmedia.com/emotional-social-intelligence-leadership-competencies/">This link</a> looks like cuddly-feely MBA nonsense, but it sensibly expands on examples of these kinds of things. e.g. ‘awareness of self’ includes ‘understanding my emotions and the effects they have on me’; ‘management of others’ includes ‘can you influence others: have a positive impact, and persuade them to gain their support’.</p>
<p>I think a big limitation with the EQ stuff is it kindof splits into ‘good with people’ and ‘bad with people’.<br />
But people can be complicated. This doesn’t mean EQ is nonsense, so much as I think it’s useful to be aware of this limitation.</p>
<p>It can be fascinating to reflect / consider the different ways people interact.<br />
Mis-alignment of assumptions between people inevitably leads to conflict.<br />
This is made clear by Alice Maz’s excellent <a href="https://status451.com/2016/01/06/splain-it-to-me/">‘Splain it to me’</a>. I think another interesting example is e.g. <a href="https://www.theatlantic.com/national/archive/2010/05/askers-vs-guessers/340891/">Askers vs Guessers</a>. – The point of these tools isn’t to model people as entirely fitting into the model’s boxes, so much as they help understand / explain interactions between people.</p>
<p>I think something that’s unfortunately omitted in discussions of diversity, where the claim is that it’s beneficial to have different kinds of people working on a task:<br />
Differences risk mis-aligned assumptions.<br />
Which surely leads to tension, and conflict.<br />
– This can be mitigated by emphasis on a shared identity (e.g. Between citizens, a shared national identity. Between employees, a shared company identity), rather than emphasis on differences between identity.<br />
But my concern is: pro-diversity folk often encourage situations which lead to tension/conflict without acknowledging the potential conflict, and without providing tools to mitigate and work around this.</p>
<p>Similarly, I think ‘cultural differences’ aren’t just ‘demographic differences’.</p>
<p>Yet. I kindof wonder if other people in teams reflect on differences like this.<br />
For myself, I think I can get as far as aware of how others feel. I don’t think I’m the kind of person who could easily manipulate others. So I guess ‘Where am I at? etc.’ is useful for ‘What are my limitations? How should I approach these situations from that?’.</p>
]]></summary>
</entry>

</feed>
