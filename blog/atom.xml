<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2016-01-31T00:00:00Z</updated>
    <entry>
    <title>On Anger and Activists</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2016-01-31-on-anger-and-activists.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2016-01-31-on-anger-and-activists.html</id>
    <published>2016-01-31T00:00:00Z</published>
    <updated>2016-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 31, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/activists.html">activists</a>, <a href="/tags/politics.html">politics</a>
    
</div>

<p>Oh, activists. &lt;3</p>
<p>As a couple of examples, here’s <a href="http://idlewords.com/talks/what_happens_next_will_amaze_you.htm">IdleWord’s post</a> about how to fix online advertising. – It’s an insightful, well-informed piece, with thought-provoking conclusions.<br />
As another example, here’s <a href="https://howwegettonext.com/maximum-wage-3e21048fc107#.gz56hwayd">Steve Johnson’s discussion</a> of a ‘maximum wage ratio’. It’s less impressive, but still has some interesting discussion points.</p>
<p>In both of the above pieces, the authors discuss an issue they care passionately about, identifying concerning problems, and suggesting solutions which would fix the issue. So far so good. – But, then, both authors can’t help but go the next step and make jabs at their ideological opponents.<br />
Johnson’s piece includes a rather irrelevant paragraph about “well, you think SV is libertarian, but actually it’s not” (as if anyone things California is anything but a socially progressive state..). IdleWords can’t help but lambast people like Elon Musk, whom he thinks are working on unimportant products <em>while there are good things which still need to be done</em>. – <em>That</em> is a bad thing; it’s irrelevant to the issue they’re trying to progress. Whether it’d be in progress of equality for wage-ratio to be considered a metric isn’t affected by whether libertarians are cool or not. Whether various solutions to advertising would be beneficial for all involved doesn’t depend on whether the talented, rich and powerful are pursuing socially-left goals or not.<br />
– The motivation seems to be “these things are too important”, but the effect is that we’re left with a distraction with which to argue over.</p>
<p>I’d accuse that part of the motivation comes from an anger; the activist <em>cannot stand</em> their ideological opponent. The activist is the good guy, and anyone not helping is the bad guy. – And if someone’s a bad guy, you’re allowed to (and must!) take jabs at them.<br />
And in addition to the anger.. the activist’s attitude is one of ‘destruction’. It doesn’t matter if the activist isn’t nice, so long as the activist is <em>effective</em>.</p>
<p>– Yet, despite this, I can’t quite say activists are a bane.<br />
At the opposite end of the spectrum, there’s the attitude which says “Why be angry with everything? Life’s too short for that.”, “Why be angry with what you can’t change?”. I think this itself is in response to the outrage machine that fills social media; people getting angry over petty things which don’t impact them at all. This clearly isn’t constructive.<br />
Between these two extremes, one has to sympathise with the activist more: it’s clear that there are many problems to be solved. (I’ll qualify that, though, with that sometimes people will see problems where there are none. It suits those not in power to stir trouble for those in power. Much ink has been spilt as to which problems are ‘real’ or not, usually across political divides).</p>
<p>And it’s somewhat persuasive to say that changes don’t happen without some external force. Those who are in power will want to stay in power; those who aren’t in power will want to gain power. – This probably needs to be qualified, too: killing flies with howitzers is just too much, counterproductive. (And things get tricky: those in power will say the angry are using too much force, while the activists not in power will always say they <em>need</em> to use such power. Drama ensues).</p>
<p>With all the above understood simply (it’s not, it’s a complicated topic which needs nuance),<br />
what’s left is the issue of effectiveness and permanence.<br />
– In her <a href="http://status451.com/2015/12/21/totalizing-politics-and-insurance-rackets/">inaugural post for Status 451</a>, Meredith Patterson (who usually writes <em>outstandingly</em> well) writes with a sharp-axe-swinging. (Aside from 3 paragraphs, which praise some other women working on diversity efforts in tech, which are quite nice). In the post, Patterson asserts that divisive efforts for change bring about only temporary victory; and that cooperative efforts beat out those who are for “all vs all” or “some vs all”. (She links to <a href="https://www-ee.stanford.edu/~hellman/Breakthrough/book/pdfs/axelrod.pdf">an article</a> justifying this). – Meredith’s a smart person. I hope she’s right.</p>
]]></summary>
</entry>
<entry>
    <title>Drama in Romancelandia: On the Courtney Milan post about Bobbi Dumas</title>
    <link href="http://www.rgoulter.com/blog//posts/romance/2016-01-30-drama-in-romancelandia.html" />
    <id>http://www.rgoulter.com/blog//posts/romance/2016-01-30-drama-in-romancelandia.html</id>
    <published>2016-01-30T00:00:00Z</published>
    <updated>2016-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 30, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/discourse.html">discourse</a>, <a href="/tags/politics.html">politics</a>, <a href="/tags/diversity.html">diversity</a>
    
</div>

<p>One doesn’t tend to think of romancelandia as discordant.<br />
Perhaps I’ve not been reading romances long enough. You’d also think that a genre set on characters having Happily Ever Afters, where characters get along after conflicting disagreeing with each other (&amp; where the problem is <em>almost always</em> “poor communication”), wouldn’t have a problem with authors getting along with each other.</p>
<p>What drama?<br />
<a href="https://www.rwa.org/p/bl/et/blogid=20&amp;blogaid=1404">The RWA so daintily</a> describes the conflict:</p>
<blockquote>
<p>Romance Writers of America’s Board of Directors is aware of a difference in opinion regarding a column from a well-known reviewer on the subject of diversity and members of RWA who did not agree with the reviewer’s treatment of the subject.</p>
</blockquote>
<p>(RWA then goes on to say that ‘kids fighting in the playground’ (paraphrase) isn’t their business, unless it violates their Code of Ethics. Fair enough).</p>
<p>The “column from a well known reviewer” responsible for the drama being <a href="https://www.kirkusreviews.com/features/new-year-new-reading-resolutions/">this</a>, from Bobbi Dumas, wherein Dumas celebrates diversity in the romance genre, and recommends various diverse romance novels.<br />
Take the time to spot what’s problematic about it.</p>
<p>A prominent example of “difference of opinion” from a member of the RWA <a href="http://www.courtneymilan.com/ramblings/2016/01/29/speaking-up-against-systemic-racism-in-the-publishing-industry/">here</a>, Courtney Milan’s post “Speaking Up Against Systematic Racism in the Publishing Industry”, wherein Milan completely blasts Dumas for her post, particularly a quote stating “Kirkus doesn’t review enough diverse novels”, or so. The post also includes whispers and rumours of bad behaviour of the target, without providing an evidence/examples of this, as well as a “call to arms” to join in the good fight.<br />
Milan’s inferences here seem a little disingenuous to me, but anyway.</p>
<hr />
<p>For some added context, here’re various glimpses of various Twitter conversations. (I hope these are representative, and aren’t cherry-picking):</p>
<ul>
<li><p><a href="https://twitter.com/courtneymilan/status/692469486591569921">Here’s a rant</a> from Courtney Milan which could be summarised as “people who don’t read diverse (romance) novels are bad people”.<br />
Some gems:</p>
<blockquote>
<p>If I enumerated all the ways Bobbi’s latest post hurt the cause of diversity rather than helping, it would take me dozens of hours.</p>
</blockquote>
<p>“dozens of hours”? Fantastic hyperbole, in any case.</p>
<blockquote>
<p>If someone won’t read a contemporary, okay, fine. If someone won’t read a book about black people? That’s a racist.</p>
</blockquote>
<p>This is worth discussing a bit:<br />
The converse (“racists wouldn’t want to read a book about black people”) makes sense.<br />
But this seems to conflate ambiguities in “not interested”, as if the only reason to be not interested in a diverse book is hating diversity. (Trying this with similar statements: “If you don’t read books with white people, you hate white people” doesn’t work. “If you don’t read romances, you hate women” …).<br />
– Fun to consider is the extension of “you’re a bad person if you don’t like it”: looking for sins of anyone who rates a diverse book less than 5/5.<br />
(This’d all be less disingenuous without the ambiguity at play, btw, before going in and saying “the other person is bad”).</p>
<blockquote>
<p>And! Not only that! The post then goes on to explain that the author’s GOAL is to reach those people. The racists.<br />
That’s the important work she’s doing—reaching out to racists who don’t want to read about black people.</p>
<p>Um, hell no.</p>
</blockquote>
<p>Take the time to examine, unfold this:<br />
Milan seems to think it’s problematic that someone would suggest diverse books to people who don’t read diverse books. – I’m not sure how else people who don’t read diverse books are to know about them.<br />
More concerning than practicalities, though, is this “with me or against me” notion, exaggerated to “you’d better not <em>talk</em> to people who are against me”. (One implication of this, of not talking to “the other” is that those who are angry aren’t going to express their anger to “the other”, so we can expect more eats-their-own drama in the future).<br />
– Also worth noting is the notion that, Milan’s driving discontent isn’t that Kirkus reviews don’t review a diverse enough set of books, or that the bookshelves of libraries aren’t filled with diverse books, but that there are people who don’t read diverse books.</p>
<blockquote>
<p>“it’s 2016”</p>
</blockquote>
<p><a href="http://www.theonion.com/article/report-stating-current-year-still-leading-argument-35288">Stating Current Year Still Leading Argument For Social Reform - The Onion</a></p></li>
<li><p>Or tweets like <a href="https://twitter.com/O_Waite/status/691809939296247808">this</a>:</p>
<blockquote>
<p>Shorter Bobbi: “ME ME ME poc person ME ME unnamed friend ME ME Courtney Milan whom I admire so much I will write an extra 1k rebutting her.”</p>
</blockquote>
<p>Also note Courtney Milan’s reply “This isn’t”mocking&quot; her. It’s <em>calling her out</em> for repeatedly treating people badly. That’s not “nice.”&quot; (emphasis mine).<br />
While this is great snark, it’s clearly an inaccurate portrayal of where Dumas is coming from. (What Susie says about Sally says more about Susie than it does about Sally, or something). – But apparently the important thing is “<em>calling out</em>” inappropriate behaviour, so.</p></li>
<li><p>Understand that it’s not as if this anger is coming from nowhere. Consider tweets like <a href="https://twitter.com/Laforesta1/status/692504515904409600">this</a>:</p>
<blockquote>
<p>It is exhausting fighting this uphill battle EVERY DAY. I see women like <span class="citation">@courtneymilan</span> <span class="citation">@AlishaRai</span> <span class="citation">@suleikhasnyder</span> <span class="citation">@FarrahRochon</span> speak up</p>
</blockquote>
<p>(Tweeter’s bio includes the phrase “I try to be as nice as people think I am.”).<br />
This nice tweeter draws the metaphor of fighting.<br />
(Also interesting is “uphill battle”: fear and anger are much better motivators than happiness; everyone always thinks that <em>the other</em> side is winning).</p></li>
<li><p><a href="https://twitter.com/MsAnnAguirre/status/692442931697950720">This</a> from Milan:</p>
<blockquote>
<p>If you write a post about diversity and people of color drag it for being candy-coated racism and you delete and say people made you cry maybe consider that if dozens and dozens of POC are dragging it, you SHOULD feel badly.</p>
</blockquote>
<p>There’s very little nuance/sophistication to a view like “any time a bunch of coloured people call a white person racist, it must be true”. (Credit where credit is due: the emphasis of “dozens and dozens” at least better than “any POC”).<br />
It’s not hard to see this falls into the realms of Identity Politics. (One might’ve expected phrases like “white tears”).<br />
– But, again, the righteousness and certainty that what they’re doing is for the greater good.</p></li>
</ul>
<p>The above tweets are just a brief (&amp; clearly incomplete) scan of twitterspace. (And with my remarks, you see how I feel about them). Don’t be offended if your tweets were left out, or if your tweets were included. I suspect a glance at the profiles of usual suspects would lead to a better understanding of the context.</p>
<hr />
<p><em>That</em> drama.<br />
A prominent author calls out a prominent reviewer, based on one wild inferences from odd statements. A surrounding community of those interested in diversity in romance see the virtue of Milan’s statements, and the heresy in Dumas’. (At a glance, most of the replies I saw were more “thank you for saying this” than “isn’t this a little excessive?”. Maybe the smart people who dissent are keeping their heads down, and <a href="http://free.bridal-shower-themes.com/img/i/-/i-am-not-a-clever-man_1.jpg">I am not a clever man</a>).</p>
<p>Perhaps the most interesting part of all this is the righteous tone of “she deserves it” as to the harassment/bullying Dumas is receiving; that those doing the bullying aren’t the bad people here.<br />
I don’t think anyone is socially conscious of the need for diversity in romance novels, without also being concerned about things like <a href="http://www.themarysue.com/tag/harassment/">online harassment of women</a>.<br />
This dissonance isn’t so hard to understand, though. <a href="../../posts/argument/2016-01-31-on-anger-and-activists.html">It seems to be an activist thing.</a>. So cries of “that’s bullying” is met with “yes, I’m not being ‘nice’, this is important”; cries of “this is disproportionate; you’re killing a fly with a howitzer” aren’t met with sympathy, either. (Aside from the note in aforementioned link, I suppose it’s that there’d be no need to be “angry” if things improved without the anger).<br />
– It’s also not hard to sympathise with. – If anyone knows a cure for righteous anger, I’d love to hear it, as quickly as your fingers allow.</p>
<p>My concern isn’t so much “Milan &amp; community are bullying a ‘bad’ person for the greater good.”:<br />
While that’s fun in itself to discuss, I think the greater concern is <em>why</em> the target was lambasted. The hate seems to miss the general message (“hey, diversity in romance isn’t as good as it could be; here are some good, diverse romances”) and instead focus on the sins of (inferences from!) specific sentences!<br />
– Whatsmore, while the repeated drumline for diversity in romance is “everyone deserves to get their HEA”, it doesn’t seem all that inclusive to bully-out of your in-group someone who transgresses by a sentence or two?<br />
Surely this is arbitrary condemnation? I tend to think the angry reviewers who write “Well, the book was nice, except for this one sentence about female sexuality…” are immature. This is like that, times 100. – Moreover, is it more .. beneficial to the ’cause of diversity in romance to attack a prominent figure promoting diversity?<br />
(Sorry, activists, but <a href="https://www-ee.stanford.edu/~hellman/Breakthrough/book/pdfs/axelrod.pdf">cooperation wins out over division</a>).</p>
<p>– If one wants hints for a more “collaborative” diversity effort: aside from the reminder that reading is good, and that reading has the amazing ability to get into someone else’s head.. how can one be against it? If people are writing books you don’t like, it’s no skin off your nose, y’know.</p>
<p>Personally, I’m not particularly persuaded by rumours/hearsay of “Dumas is a bad person”, if encounters <a href="https://twitter.com/suleikhasnyder/status/663197701715206144">like this</a>, wherein Dumas is criticised for using the phrase “namaste” while being white, are the crimes. – I’ve not seen all of twittersphere, though.</p>
<p>Some of the above tweets make use of terminology like “ally”. Unfortunately, it seems in these domains of the socially-conscious, similar <a href="http://uberfeminist.blogspot.co.uk/2015/10/friendly-fire-demise-of-social-justice.html">incidents of friendly-fire</a> aren’t unheard of.</p>
<p>If one is brave, one could also draw comparison between this divide in romancelandia, and the recent controversies in other entertainment media, wherein each side yells at the other “we care more about diversity / LGBTQ+ than they do”. Strange times. (I think it’d cause more upset to discuss than not; I’m not so brave, then).</p>
<hr />
<p>I do tend to think Dumas isn’t guilty of anything.<br />
But if I can further make explicit some of the political beliefs at play here: Even if Dumas <em>weren’t</em> in favour of diversity, so what? There seems to be this nice thought that what’s “fair” and “equal” should win. (And anger will get us there).</p>
<p>It seems to be a moral imperative to this crowd that Dumas, as a prominent reviewer, do everything in her power for the cause. Why? In a free market, the disruptor’s need neither permission nor help from those at the top in order to make money doing things in an improved way.<br />
Similarly, it’s understood (grudgingly) that what books are “popular” aren’t necessarily the same as what books “good quality”. Sometimes things aren’t fair.<br />
(Of course, I guess such thinking also sees there’s no need to be “fair” about bullying anyone, either, so).</p>
<hr />
<p>One doesn’t tend to think of romancelandia as discordant.<br />
You’d also think that a genre set on characters having Happily Ever Afters wouldn’t have a problem with authors getting along with each other. – I guess if the present drama were in a RN, you’d probably rate it 2-stars, for how flat the characters seem to be, and how they don’t talk respectively to one another.</p>
]]></summary>
</entry>
<entry>
    <title>What Makes a Game a Good Toy</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-01-24-what-makes-a-game-a-good-toy.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-01-24-what-makes-a-game-a-good-toy.html</id>
    <published>2016-01-24T00:00:00Z</published>
    <updated>2016-01-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 24, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/game.minecraft.html">game.minecraft</a>, <a href="/tags/game.saints%20row.html">game.saints row</a>, <a href="/tags/game.just%20cause.html">game.just cause</a>, <a href="/tags/game%20design.html">game design</a>, <a href="/tags/analysis.html">analysis</a>
    
</div>

<p>I recently played through Just Cause 3, and had a lot of fun playing that. - I think, though, that after ‘liberating’ all the towns, collecting all the collectibles, and completing all the missions, there’s not as much innate incentive to play the game as I would’ve thought.<br />
Considering Just Cause 3 is a game where you can fly-like-batman, grapple, and parachute your way around an environment, in addition to blowing-shit-up, hijacking all kinds of vehicles easily, etc. etc. it’s a bit strange. – I get the impression it would be fair to describe Just Cause 3 as “a game where you unlock things, so that you get a fun toy/playground at the end of it”. (e.g., unlocking more vehicles to request, or unlocking a higher request-tokens capacity as you get nearer the end). – So what makes for an interesting ‘toy’ game?</p>
<p>Minecraft is the ultimate ‘toy’ game.<br />
To such an insane extent. Google for it, but you hear of things like people building BASIC interpreters, or processors, or whatever using the redstone mechanics.<br />
From what I’ve played, I think why it’s fun like this, more specific than “you can do anything you want (like farm, or fight)”, is Minecraft involves creating systems. (e.g. “here is my house, here is where I mine, here is the chest were I put stuff”). And so the <em>narrative</em> follows from that. “Here’s my mine… I’m going to mine further”, “here’s my house. I want some glass, so I’m going to get sand”, “at night, I need to fight my way back to my house, clear the surrounding area. Or maybe just survive the night through combat”. – I suppose there’s motivation which comes from taking a wild/unordered region (the generated world), and conquering/colonising it; e.g. tunnelling through the underground, chopping down trees, terraforming uneven parts of land.</p>
<p>Minecraft is quite, quite different from Just Cause 3, in that the latter is much more obviously a “game” than the former.</p>
<p>The Saints Row series is much closer to what Just Cause has. (In particular, I like Saints Row the Third best, but whatever).<br />
Both these games involve having fun from destruction and unrealistic-violence in a conquerable, open-world setting.<br />
I’ve certainly had a lot of fun screwing around in Saints Row the Third. – Though, unfortunately, if Saints Row is a better toy, Just Cause is a better game: the minigames (and missions) in Just Cause aren’t boring.</p>
<p>So what makes Saints Row a better toy?<br />
I wonder if part of it isn’t that in Saints Row, you get the ‘cheats’ like Invulnerability, Infinite Ammunition <em>in-game</em>. You have to buy them, (&amp; so there’s strong incentive to play the game to earn the money, etc.). – Free reign to cause havock and destruction, after earning this by playing the game ‘legitimately’ sounds fun.<br />
And while you can’t construct/modify the environment, so can’t “create systems” like in Minecraft, Saints Row lets you customise your character and your character’s things. The character’s body/face/hair, the character’s clothing (&amp; what colours), the weapons (to an extent), and the cars. – You can choose to dress your character in all-yellow, driving an all-yellow car if you want. (Why not, right?). I think your character can even have actually-yellow, also. Or you can dress up in costume. – I guess that’s very Barbie-doll ish. But it’s fun.<br />
The setting in Saints Row does lend itself to <em>some</em> narrative-making: gangsters from your gang will roam the streets, as will gangsters from other teams, and the police. So you can easily pick fights if you want, &amp; then have a good ol’ car-chase to escape. There’re also random-events like “defend this area for 3 waves” which the player can be prompted with.</p>
<p>Just Cause 3 has some of these things that Saints Row has: there will be random encounters / mini-quests, involving tasks like “hijack this car, then get clear of your wanted level”. And you can ‘collect’ different vehicles. You can certainly cause mayhem if you want, &amp; there will be patrols of bad-guys you can pick fights with every now and then, too.<br />
One (dumb) idea might be, that the enemy would try to re-conquer towns/areas that the player ‘liberated’. – This would have some narrative, but makes it quite a chore to keep the whole territory ‘liberated’. – There’s no benefit from the ‘liberated’ regions that impacts the player much; not like “more reinforcements to help you” or “hourly cash income”. (Well, the ‘main’ benefit actually seems to be there aren’t as many bad guys, and you can do ‘suspicious’ things without getting a wanted level. Still). – What I <em>do</em> like from Just Cause 3 is that you can always have some town/settlement “re-oppressed” so it can be “re-liberated”.<br />
Perhaps the whole “not using cash to upgrade/unlock stuff” is strange, also.. in that, it <em>demands</em> skill to unlock better features (like “more ammo capacity”), rather than demanding player spend “more time playing the game”.<br />
– And Just Cause 3 has some cool.. features that lend itself to being a fun toy, like the tether.<br />
But I wanna be able to customise <em>my</em> car, to be able to tear-shit-up with infinite-rockets, &amp; screw-around in pew-pew shootouts without worrying too much about things like ammo, or health. (Which isn’t really a “game”, sure).</p>
<p>All the same, I can’t help but think that a marriage of Just Cause 3 and Saints Row would be a ridiculously fun carnage-causing sandbox.</p>
]]></summary>
</entry>
<entry>
    <title>Thoughts on Sky Rogue</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2015-12-03-thoughts-on-sky-rogue.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2015-12-03-thoughts-on-sky-rogue.html</id>
    <published>2015-12-03T00:00:00Z</published>
    <updated>2015-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  3, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/game.sky%20rogue.html">game.sky rogue</a>, <a href="/tags/roguelike.html">roguelike</a>, <a href="/tags/analysis.html">analysis</a>, <a href="/tags/game.atom%20zombie%20smasher.html">game.atom zombie smasher</a>, <a href="/tags/game.faster%20than%20light.html">game.faster than light</a>
    
</div>

<p>I recently purchased a cheap flight-stick (a Logitech Extreme 3D Pro) so I could play through some of the old X-Wing games. (Although, supposedly it’s <em>possible</em> to play through these with a controller, and some thought).<br />
Naturally, I then also bought whatever flight games that looked fun on the Steam store.</p>
<p>Sky Rogue was one of the stand-out games.<br />
It’s a rogue-like game, where you control a fighter-plane … in the sky.<br />
The graphics are strikingly minimalist. (It’s indie, and apparently, <a href="http://skyroguegame.tumblr.com/">from their site</a>, only has 3 developers). – I find the graphics charming.</p>
<p>The controlling feels excellent. I wish every arcade flight-sim were so nice to fly as this.</p>
<h2 id="gameplay-currently">Gameplay Currently</h2>
<p>It’s “Early Access”.<br />
I hope they do improve it some more; as it is now, it’s already quite good:<br />
The gameplay is this: you fly off from your air-carrier in some jet, with some loadout of guns/missiles/rockets/bombs, and can blow up bad-guy jets, buildings, ships to earn currency. There will be some designated objective, which is some particular enemy jet/building/etc. which you need to blow up. – Once you destroy the objective, return to your air-carrier, the level regenerates as “Day N+1”, with more difficult enemies and a new objective.<br />
I’ve heard Day 4 is very hard; but I’ve not yet made it to that.</p>
<p>Currency-wise; this was updated recently: Rogue-like means “perma-death”, &amp; typically allows for some “global progression”. e.g. in Faster Than Light, you can unlock new ships / ship layouts for your player profile, but you don’t get to re-use the same instance of a ship once you’ve died.<br />
What Sky Rogue does now is to have a global progression by “unlocking” different types of jets/weapons, and per-session progression by “upgrading” particular weapons. (e.g. Level I gun to a Level II gun). – When you die, you don’t get to keep your upgrades, but you get to permanently unlock some new jet/weapon.<br />
(The UI isn’t entirely clear here as to whether blowing up additional enemies yields more money for upgrades, or more tech-points).</p>
<p>– This kindof works to create the cycle: “blow up more stuff so I can have cooler tech” / “with my cooler tech I can blow up more stuff”. <em>But</em>. Somehow it’s not a very compelling cycle.<br />
Part of this could be the UI; from the in-game UI, there’s no description given as to what a weapon is supposedly “good for”. So. Everything just kindof looks like “point and shoot”, rather than “this is a weapon I really want for this kind of target”.<br />
Part of it, I think, is also.. because it’s <em>“arcade”</em>, there’s no “campaign” to win. – I think this is solvable, in an engaging way beyond “Mission 1 = Day 1”, “Get to Day 10 to Face Big Bad-Guy and Win”.</p>
<p>(As an aside; I think an unfortunate dynamic from the above rules: if you return to your carrier without having beaten the objective, you get to change which jet you use, and which loadout of weapons you’re using. – If blowing-up additional enemies/buildings is beneficial, this means that it becomes “save the objective ’till last” – if blowing up additional enemies/buildings isn’t beneficial, it’s not obvious either way).</p>
<p>EDIT: After playing the game some more, I feel it’s worth emphasising that the gameplay they do have is very good.<br />
The dogfighting tends to involve missiles. – The player <em>can</em> use guns, but there’s no target-lead indicator which makes this difficult. (Also, there’s a control to “fire gun”, even if the selected weapon is not a gun). – And the missiles all have some kind of lock-on. The lock-on mechanic is <em>very</em> satisfying: a wee lock-on box will drag across the UI, chasing the current target box; when it locks on, there’s a beep. (Hit not guaranteed, of course).<br />
Bombing is quite satisfying. It maybe feels like the bombs fall quite slowly?, but it looks really cool to drop bombs on a target, fly away, and look back at the target seeing the bombs drop. (The bombs have like, streaks/trails behind them). – Unfortunately, the bomb-cam is unintuitive, and a bit ‘inaccurate’; it shows where the bomb would hit at sea-level. This makes it completely inaccurate against the sky-enemies like the carrier; &amp; slightly inaccurate against buildings.</p>
<h2 id="arcade-game-with-campaign-atom-zombie-smasher-faster-than-light">Arcade Game with Campaign: Atom Zombie Smasher, Faster Than Light</h2>
<p>I think Atom Zombie Smasher would make a decent example of a nice ‘campaign’ around satisfying gameplay.<br />
AZS’ core game involves rescuing civilians from procedurally-generated cities, using a loadout of obstacles/units.<br />
The overworld is where the ‘campaign’ is won/lost. AZS doesn’t do a great job of balancing it, but the idea is you get +10 points for each city you control, each round. The Zombies, in the overworld, will “infect” adjacent zombies. – And so the core game is played contesting one of these cities per round.<br />
– The overworld gameplay here is simple; there’s a tug-of-war for points, and a simple map deciding where to go next. (To make things less homogeneous, some cities will be a much harder level than others to “win”; so the trade-off is whether it’s worth trying to contest a valuable-but-difficult city, or an easy-but-worth-less city).</p>
<p>Sky Rogue could do something similar.<br />
This could provide rationale for the objectives. Rather than “Destroy this AWACs”, the player could have a choice of territories: Perhaps a territory has an enemy AWACs unit. Perhaps another territory has an enemy airbase. Perhaps this affects what happens in the overworld after each “day”. (e.g. airbase influences how many units in an adjacent territory, or so).</p>
<p>Faster Than Light’s overworld has a similar dynamic to AZS’, in that your choice of path affects i) the kind of environment you fight in, ii) the kind of enemies you fight against, iii) your resources. (e.g. spend a turn visiting the store? with radar, you can detect asteroid fields; worth the risk to investigate? worth the risk of spending more turns fighting enemies, as the enemy fleet advances?).<br />
– Again, a relatively simple overworld mechanic which provides an extrinstic motivation for playing the game. – With Sky Rogue, at the moment the motivation to play is ‘intrinsic’; new jets/bombs aren’t as fun as motivating as the goal of ‘beating something’, &amp; “beating your old score” is just a lame motivation. (Sky Rogue is fun to play because the gameplay is fun, but, y’know?, something more than an arcade session would be nice).</p>
<h2 id="carrier-vs-carrier-battles">Carrier-vs-Carrier Battles</h2>
<p>Maybe this is just because I’ve only seen the first couple of days &amp; I suck at gameplay, but.. the gameplay doesn’t feel like belligerent-on-belligerent battles. – Sometimes the enemy air-carrier is spawned a fair distance away from your carrier, sometimes it’s right next to it. – Intuition tells me that, my carrier is important, so the enemy’s carrier must be, too. I’d’ve expected something more intense, (e.g. <a href="https://www.youtube.com/watch?v=Y42c7kJKkwc">Carrier Command Carrier-on-Carrier battle</a>, or perhaps like the station-vs-station of the 1998 Urban Assault..); as it is, the carrier is worth the same amount of points as 5-turrets, and isn’t all that difficult to destroy (with the right equipment).<br />
– Ok, I take it back. It’s probably because I suck. <a href="http://www.lagzero.net/wp-content/uploads/2015/09/2015-09-12_00002.jpg">This thing looks bad-ass</a>. (EDIT: This is a “corvette”. Which is a bit confusing, because the sea-ship is called a frigate, and in terms of navy ships, a corvette is smaller than a frigate. Does this hint that we’ll see a larger enemy ship? – The corvette apparently, has <em>many</em> anti-air emplacements, as well as launching aircraft).<br />
Still. The arcade nature of the game provides a somewhat asymmetric, your-lone-fighter-vs-their-whole-fleet.</p>
]]></summary>
</entry>
<entry>
    <title>Setting up Mutt with NUS Student Email</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2015-10-26-setting-up-mutt-with-nus-student-email.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2015-10-26-setting-up-mutt-with-nus-student-email.html</id>
    <published>2015-10-26T00:00:00Z</published>
    <updated>2015-10-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 26, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.mutt.html">programming.mutt</a>, <a href="/tags/email.html">email</a>, <a href="/tags/office365.html">office365</a>
    
</div>

<p>This is for setting up NUS student email (hosted with Office 365) for the Mutt Mail User Agent; particularly, using IMAP, and alongside other email accounts.</p>
<p>Why you’d want to use Mutt, I’m not entirely sure. Probably Thunderbird will serve your needs as well as need be.<br />
But if you’re wanting to learn something productive while procrastinating, then Mutt is a sensible choice as any.</p>
<p>I find the Arch Wiki’s <a href="https://wiki.archlinux.org/index.php/Mutt">Mutt page</a> indispensable when setting up Mutt. - If you’ve googled your way to this page without a prior guide, I recommend this.</p>
<p>As for setting up an account with Office 365, a <a href="http://www.blog.alexanderdbrown.com/office-365-in-the-command-line/">blogpost from Alexander Brown</a> (which comes up from a search for “mutt office365”) has a useful codedump.</p>
<p>I’m not sure what the <em>minimal</em> set of options would be, but the example I have <a href="https://github.com/rgoulter/dotfiles/blob/4e1fb3c04d9f4c372125468a0c3bb0df165d004b/mutt/nusstu">in my dotfiles</a> (as per Arch Wiki’s “Multiple Accounts” advice):</p>
<pre class="mutt"><code># Connection
set ssl_starttls=yes
set ssl_force_tls=yes
set ssl_use_sslv3=yes

# Incoming
set imap_user=&quot;a0088816@u.nus.edu&quot;
set imap_pass=$my_nusstu_pass
set folder=&quot;imaps://outlook.office365.com:993&quot;
set mbox=&quot;+INBOX&quot;
set postponed=&quot;+Drafts&quot;
set spoolfile=&quot;+INBOX&quot;
set record=&quot;+Sent Items&quot;
set imap_check_subscribed
unset imap_passive

# Outgoing
set realname=&quot;Richard Goulter&quot;
set from=&quot;a0088816@u.nus.edu&quot;
set smtp_pass=$my_nusstu_pass
set smtp_authenticators=&quot;login&quot;
set smtp_url=&quot;smtp://$imap_user@smtp.office365.com:587&quot;
unset hostname

## Hook -- IMPORTANT!
account-hook $folder &quot;set imap_user=$imap_user imap_pass=$imap_pass&quot;</code></pre>
<p>Disclaimer: WFM, YMMV. This is just what I have, and clearly I’m not a well-versed Mutt user.<br />
My Mutt configuration, in general, may be useful for other NUS students keep their NUS Office 365 account separate from their GMail account.</p>
]]></summary>
</entry>
<entry>
    <title>Patapon 3</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2015-10-26-patapon-3.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2015-10-26-patapon-3.html</id>
    <published>2015-10-26T00:00:00Z</published>
    <updated>2015-10-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 26, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/analysis.html">analysis</a>, <a href="/tags/game.patapon.html">game.patapon</a>
    
</div>

<p>Sigh.<br />
I recently bought a PS Vita. - A long time ago I has a PSP. I started the first Patapon game on that, but never got very far. And the Singapore PlayStation store isn’t cool enough to have the first two Patapon games. So here I am.</p>
<p>Patapon 3 is quite different to the previous games, apparently.<br />
Patapon, for those unaware, is a rather unique game. It’s largely a rhythm-game, where you control an army of units. ‘Commands’ are entered by pressing a sequence of buttons. (e.g. “onwards” is Pata-Pata-Pata-Pon, and “attack” is “Pon-Pon-Pata-Pon”; where Square=“Pata”, Circle=“Pon” - It’s much simpler than it looks). And it has RPG-ish elements to it, in that there’s equipment which you can upgrade, and your units can change which ‘class’ they are.<br />
– Patapon 3 is quite different, in that you’re limited to four units.</p>
<p>It does involve a lot of grinding. I’ve been happy to do that, and have been spending much of my time playing Patapon 3 to level up my units. – It’s satisfying to find a good combination of units to get through a quest - In order to ‘grind’ sanely, it’s nice to have one over-levelled unit, with the other three units under-levelled (so they gain lots of EXP for completing the quest).<br />
– So the whole I-want-stronger-units-so-I-can-beat-levels-quicker, I-want-to-beat-levels-quicker-so-I-can-have-stronger-units cycle is fun.</p>
<p>But it’s not without frustrations:</p>
<p>Most obvious is that information isn’t <em>clear</em>; some reviews (e.g. on MetaCritic) complain “oh, the ‘recommended level’ (for a quest) is bullshit”. This is unfair, as the recommended level isn’t inaccurate. But the units and what equipment chosen are <em>very</em> important, and this isn’t obvious. – On one quest, my army was blasting through every obstacle, every enemy in one-two turns each, but then reaching one particular enemy, wasn’t even able to make a scratch. My army wasn’t equipped correctly to take on the enemy, and Patapon 3 can be <em>punishingly unbalanced</em> like that.</p>
<p>It’s frustrating to a gamer to have luck-based elements impact the game.<br />
And Patapon 3 features many sections like this:<br />
– The four units are a Shield unit, an Archer unit, a Spear unit, and a Hero unit (which can be one of the other classes). When the Shield unit dies, then the player’s health is vulnerable to attack. So it’s important that the Shield unit doesn’t die, since the player loses very quickly if the Shield unit dies.<br />
– There are various enemies in the game which can one-hit-kill the player’s units: aside from the major bosses, there are sharks which can chomp units in one go, and there are salamander enemies which will ‘explode’ when they’re killed. This in itself is not bad, but:<br />
– Units can only be revived in one batch per quest. (Aside from the Hero unit, which will revive after a time if not insta-killed). - So, if the Shield unit is killed, then the player must use this one revive. But…<br />
– The player’s units will be <em>uncontrollable</em> under two circumstances: if the unit is affected by some element (e.g. on fire, frozen), or <em>the player is reviving their units</em>.<br />
For the latter, to ‘revive’ the units requires a special ‘revive’ command. (In the game’s terms, summoning a djinn). For the next while, the units will not be under player control. - They’ll generally attack; thus, vulnerable to aforementioned insta-kill enemies; thus, when facing such insta-kill enemies, this ‘revive’ can’t really be used.<br />
For the former.. this can be largely probablistic. i.e. <em>luck-based</em>. - A unit standing beside a bush on fire won’t always go on fire; but they might <em>right before you attack</em>. Or, rather, they might go on fire right as such an insta-kill enemy is in the area, and get killed. Or they might be frozen in range of the insta-kill of an enemy. - Certain items can mitigate this <em>slightly</em>, but not completely. (As well, it can cost gold to upgrade the items; and you get gold by playing such quests, so…).</p>
<p>– Minor issue related to that; rather than manage all the equipment given to the unit, there is an ‘optimise’ button. - The trouble is, this optimise algorithm has no qualms giving vulnerable-to-fire equipment, when the levels very clearly demand fire-resistant equipment. - It’s a minor thing, but tedious.</p>
<p>Some egregiously frustrating (albeit mostly minor) game design issues aside, the game puts heavy emphasis on <em>Multiplayer</em> aspects.<br />
“Hey there, this is a tough quest, but you can play with your friends”. - There are several ‘rare’/randomly-available gigantic-boss-battle quests which are strictly ‘multiplayer-only’.</p>
<p>Upgrading equipment is somewhat an example of this. The blacksmith can’t upgrade weapons beyond the blacksmith’s limit; the blacksmith’s limit is determined by the highest-level weapon (which is limited by the Hero unit’s level). - But, the equipment can only be upgraded to the nearest-10 of the highest equipment. - So, like, if you have a level-23 bow, then you can’t upgrade a level-20 sword, but you can upgrade all other equipment up-to level-20. (Until the level-23 bow becomes level-31; in which case, repeat for level-30…).<br />
– But-of-course, if you visit <em>another player’s</em> (i.e. online/multiplayer) blacksmith, then you’re limited by their level. Or some other such, such that there’s not the same limitation.<br />
– This isn’t game-breaking, but it is tedious.</p>
]]></summary>
</entry>
<entry>
    <title>Custom Ex Command in Yi Editor</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2015-10-19-custom-ex-command-in-yi-editor.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2015-10-19-custom-ex-command-in-yi-editor.html</id>
    <published>2015-10-19T00:00:00Z</published>
    <updated>2015-10-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 19, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.haskell.html">programming.haskell</a>, <a href="/tags/programming.yi.html">programming.yi</a>, <a href="/tags/programming.editors.html">programming.editors</a>
    
</div>

<p>This is something I’ve <a href="../../yi.html">mentioned before</a>, but I see that I wasn’t entirely clear on how to achieve it.</p>
<p>In more detail, here are some notes on how to write a “Hello World” Ex-style command for the Yi editor.<br />
– The exciting thing about this is it’s easier to write such commands for Yi than for Vim.</p>
<p>The following has been checked with v0.12.2 of Yi.</p>
<p>Compare: <a href="https://github.com/yi-editor/yi/tree/v0.12.2/src/library/Yi/Keymap/Vim/Ex/Commands">Yi.Keymap.Vim.Ex.Commands</a> module. The ‘Reload’ command is the simplest. - This helps see how Ex commands for Vim-style Yi are parsed, and how they can map to an <code>ExCommand</code>, which is in turn responsible for an Action to execute.</p>
<p>See <a href="https://gist.github.com/rgoulter/1059c35844c5e471d9e9">this gist</a> for a full, working example, but for the code itself, the highlights would be:</p>
<ul>
<li>The transformation itself, adding “hello world” into the buffer:</li>
</ul>
<pre><code>helloWorld :: YiM ()
helloWorld = withCurrentBuffer $ insertN &quot;Hello, world!&quot;</code></pre>
<ul>
<li>The parser for the ex command, in the <code>HelloWorld</code> module, under the <code>lib/</code> folder (which is used by <code>dyre</code> for dependencies for the config) in <code>~/.config/yi</code>:</li>
</ul>
<pre><code>parse :: EventString -&gt; Maybe ExCommand
parse &quot;helloWorld&quot; = Just $ impureExCommand {
    cmdShow = &quot;helloWorld&quot;
  , cmdAction = YiA $ helloWorld
  }
parse _ = Nothing</code></pre>
<ul>
<li>The config in <code>yi.hs</code>, to make use of the above <code>parse</code> function:</li>
</ul>
<pre><code>import qualified HelloWorld as HelloWorld

...

main = yi $ defaultVimConfig {
    defaultKm = mkKeymapSet $ defVimConfig `override` \ super self -&gt; super
            { vimExCommandParsers = myExCmdParsers ++ vimExCommandParsers super }
 }

myExCmdParsers = [HelloWorld.parse]</code></pre>
<p>This is enough to get a “Hello World” example going.<br />
For more sophisticated efforts, I’m guessing one would want to:</p>
<ul>
<li><p>Look at parsing of Ex commands, using the extant parsers for inspiration.</p></li>
<li><p>A more sophisticated <code>Action</code> executed; this is where an understanding of <code>Buffer</code>/<code>Editor</code>/<code>Yi</code> <code>Action</code>/<code>Monad</code> would be necessary.<br />
Resources at <a href="http://yi-editor.github.io">yi-editor.github.io</a> may or may not be helpful here; grokking parts of the code (e.g. in the keymaps) would be a good place to start.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>In Another's Shoes</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2015-10-16-in-anothers-shoes.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2015-10-16-in-anothers-shoes.html</id>
    <published>2015-10-16T00:00:00Z</published>
    <updated>2015-10-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 16, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/politics.html">politics</a>, <a href="/tags/diversity.html">diversity</a>
    
</div>

<p>As part of <a href="http://www.winstonchurchill.org/resources/speeches/89-a-disarmament-fable">a speech in 1928</a>, Churchill gave the following fable:</p>
<blockquote>
<p>Once upon a time all the animals in the Zoo decided that they would disarm, and they arranged to have a conference to arrange the matter. So the Rhinoceros said when he opened the proceedings that the use of teeth was barbarous and horrible and ought to be strictly prohibited by general consent. Horns, which were mainly defensive weapons, would, of course, have to be allowed. The Buffalo, the Stag, the Porcupine, and even the little Hedgehog all said they would vote with the Rhino, but the Lion and the Tiger took a different view. They defended teeth and even claws, which they described as honourable weapons of immemorial antiquity. The Panther, the Leopard, the Puma, and the whole tribe of small cats all supported the Lion and the Tiger.</p>
<p>Then the Bear spoke. He proposed that both teeth and horns should be banned and never used again for fighting by any animal. It would be quite enough if animals were allowed to give each other a good hug when they quarreled. No one could object to that. It was so fraternal, and that would be a great step towards peace. However, all the other animals were very offended with the Bear, and the Turkey fell into a perfect panic.</p>
<p>The discussion got so hot and angry, and all those animals began thinking so much about horns and teeth and hugging when they argued about the peaceful intentions that had brought them together that they began to look at one another in a very nasty way. Luckily the keepers were able to calm them down and persuade them to go back quietly to their cages, and they began to feel quite friendly with one another again.</p>
</blockquote>
<p>The context was (apparently) discussing why disarmament talks were ineffective. In that context, it’s not difficult to see how the fable’s metaphors of teeth and horns may map to air force, navy, etc.<br />
– A more concise way to describe this may be along the lines of <em>“Armament for me, but not for thee”</em>; or “self-interest”. But what’s striking about the fable is more subtle:<br />
– In terms of the fable, each agent tries to justify the value &amp; necessity in their own armaments, while pointing out the excess in their hostile’s. - More abstractly, in terms of “power”, each animal tries to keep its own power, and diminish the power of its opponent.</p>
<p>But I can’t help but be reminded of this analogy whenever anyone mentions “diversity” (and, more broadly, any use of identity politics).<br />
Just as the animals use ‘disarmament/to make the world a more peaceful place’ as a means to increase <em>their own</em> power, calls for diversity, etc. play out as increasing one’s own power.</p>
<p>In a piece, as scathing as any using the term “white feminism” can be expected to be, titled <a href="https://medium.com/this-is-hard/ffffff-diversity-1bd2b3421e8a">“#FFFFFF Diversity”</a>, the writer berates the tech community’s efforts as “diversity” being limited to “more women” rather than “more people of colour”.<br />
– The writer here shares my point, insofar as ‘white women calling for “diversity”, yet this benefit is only seen by white women’. - Writer then goes on to demonstrate my point, in that her lament is that ‘calls for diversity’ don’t extent to <em>black women</em>. (I’m not quite sure of the culture that’d use the terms “women of colour” <em>and</em> “person of colour”, but never “men of colour” when discussing diversity issues). The medium piece doesn’t mention with even so much as a comma the logical corollary: diversity efforts should (if we’re playing the <a href="http://www.checkmyprivilege.com/">privilege math</a> game) also pay heed to trans-, gays, etc.<br />
– i.e. for the <em>woman of colour</em> author, it’s a shame that diversity doesn’t promote <em>women of colour</em>.<br />
(There’re a number of points related to the issue in the post people can get pretty heated over. <a href="http://uberfeminist.blogspot.sg/2015/10/stop-giving-work-visas-to-men.html">For some perspectives</a>, yes, gender/sex diversity really is that much more important than ethnic diversity, which tech ostensibly has. – That Asian’s are over-represented somewhat complicates the notion of diversity beyond anything-but-straight-white-and-male. etc. etc.). – Some fun shit-stirring in the comments to that post was from an Asian offended to be so stereotyped as “model minority”, as if the job was handed to him without having to work his ass off to get to that point..</p>
<p>This perspective, that things are inherently about increasing one’s own power/status, also presents itself in the common and shrill point that the complaints about lack-of-diversity are always for positions of power. (Would tech still be under such focus if it weren’t perceived as some kind of gold rush?). There’re more complaints about lack of women in senior positions than lack of women in dangerous jobs.<br />
– In the context of education, it’s more common to see complaints about male-dominated fields, never about female-dominated fields. - Yet, both of these would be just as ‘diverse’ as the other.</p>
<p>The personal bone to pick is that calls for diversity rarely include ‘gross’ or unpopular opinions. ;-)</p>
<p>– Amongst the identity politics, the ‘ally-ship’ thing makes this a bit quaint. (And, no, “alliance” wasn’t the word I was looking for, kthx). Because, ostensibly, the ‘ally’ is the straight/white/male lookin’ out to help the little guy. (It’s common to see Twitter hashtags have a lot of fun over this). So, ostensibly, the ally is like the turkey defending the bear’s idea about hugging. - I’m sure this isn’t how it plays out, though, so-much-as the in-group/out-group dynamics are work don’t align over straight/white/male but over different lines. (e.g. ‘ally-ship’ belongs to the ‘progressives’).<br />
– Of course, this does play with this meta-game a bit, too; if the game is that you fight for your own team, then anyone ostensibly against their own team must be favouring justice/truth..</p>
<p>Mapping the other way, the analogy works the other way too: those who benefit from some “power” are unlikely to see that they benefit; those who don’t are likely to over-state/emphasise the benefits. Where a system of rules can be used to gain power, it will be (ab)used in such a way.<br />
– It’d perhaps be remiss to mention these things without mentioning <a href="https://en.wikipedia.org/wiki/Harrison_Bergeron">Harrison Bergeron</a>. But perhaps what’s frustrating about discussions on ‘privilege’/etc. is that the notion of “privilege means gains advantage, it doesn’t mean ‘is without disadvantage’” is at best acknowledged, but often left at the door. - So, e.g., this leads to situations where of course women want to be <a href="http://www.advicegoddess.com/archives/2010/12/13/equal_treatment.html">treated equally, just not treated like men</a>. What often gets lost in translation is that advantages don’t come without disadvantages. This doesn’t mean striving for equality is in vain. It does mean that it’s obnoxious, though, to complain about not having the advantages, without then complaining about not having the disadvantages.<br />
– Rather, when someone expresses a grievance, it’s polite to listen (&amp; impolite to dismiss); and the notion of ‘punching up’/‘punching down’, based upon ‘privilege math’ (explicitly or implicitly) seems a great way to be able to bypass having to listen, or reason.<br />
(As an example of how American-centric the discussion is, though, the fun-folk in Singapore play ‘privilege math’ where ‘not-white’ isn’t the bottom of the axis).</p>
<p>My point here isn’t “hey, people calling for ‘diversity’ just want more power, so it’s not worth listening to them”; and I do believe there’re those who genuinely believe equality-of-outcome is a necessary goal. But it’s a bias and an attitude entwined within the discussion.</p>
]]></summary>
</entry>
<entry>
    <title>Scala Development for Vim-loving Developers</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2015-10-06-scala-development-for-vim-loving-developers.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2015-10-06-scala-development-for-vim-loving-developers.html</id>
    <published>2015-10-06T00:00:00Z</published>
    <updated>2015-10-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October  6, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.vim.html">programming.vim</a>, <a href="/tags/programming.eclipse.html">programming.eclipse</a>, <a href="/tags/programming.scala.html">programming.scala</a>
    
</div>

<p>So, I’ve blogged a bit about <a href="../../tags/programming.vim.html">Vim</a>.<br />
Again, no, it’s not about “vim vs emacs”, so much as about “which features your text editing has”; and the vi-like modal editing fantastic for manipulating text.</p>
<p>Recently I’ve had the fortune of programming in Scala.<br />
The joke is that some programmers are happy to work in Scala because it’s not Java, the rest are sad to work in Scala because it’s not Haskell.<br />
Scala is by no means an excellent language. (Again, there are two kinds of languages; those people use, and those people complain about). But I like it well enough.</p>
<p>For the most part, I’ve done my Scala editing in Scala IDE, which is a plugin built upon the much-maligned Eclipse.<br />
– Overall, the biggest complaint to be had about Scala IDE, from my experience, is that ScalaTest can be a bit finicky, and will often refuse to “run all tests in package” or so.</p>
<p>– If I’m harping on about the benefits of Vim, why make use of Eclipse?<br />
Well, for one, I have the Vrapper plugin installed. This is a great stop-gap measure; it doesn’t have every binding (by default, at least), and occasionally messes up, but mostly does the job. (When I had to use XCode, XVim was also a nice plugin to have).<br />
Using Eclipse was the <em>pragmatic</em> best-of-what’s-available.</p>
<p>I’ve recently tried out making use of Vim proper for Scala editing:<br />
I love autocomplete; to get autocompletion for Scala in Vim, the easiest way is using some omnicomplete front-end (like YouCompleteMe), and plugging Eclim as a ‘back-end’ to it. – Eclim can communicate with Eclipse, and provide the autocompletion. – The <em>downside</em> to this is Vim becomes <em>heavy-weight</em>. Like, really heavy. I’m fairly sure you have to disable automatic project-building, also, otherwise there’s a huge lag every time you save. <em>That</em> isn’t great. (As it was for me, without the automatic building, there’s still noticeable/significant lag when saving, if using Eclim).</p>
<p>The benefit is you get to use all the customisations/plugins Vim proper has.<br />
e.g. vim-surround is quite useful for editing Scala.</p>
<p>My workstation setup in my lab has two monitors.<br />
For the most part, unless you’re using a keyboard-based window-manager like XMonad, I’m inclined to believe that two monitors isn’t all that enhancing to productivity: If you can, with your keyboard, switch between workspaces; within a terminal, use tmux to switch between tabs/panes, then your keyboard becomes your second monitor. The benefit of added screen real-estate is countered by the cost of moving your mouse to the other window (unless you’re using a keyboard-based window manager, where you can easily/quickly switch focus without use of mouse. Alt-Tab doesn’t suffice).<br />
– I’ve found a use for my second monitor:<br />
SBT has a feature (which can surely be scripted for other tools/environments) that will run a command any time the source-files change. I’ve found it useful to set up two panes on my alternate monitor: one pane will run this loop with the “not slow”-tests, the other pane will run whatever program I’m working on. – Benefits/drawbacks of the latter are, of course, “your mileage may vary”.</p>
<p>Also, make sure if you’re building a binary-search function, you don’t leave out the base case.</p>
<p>– Anyway, the benefit of setting up this is it’s, again, a stop-gap measure for “vim not showing me syntax errors”.<br />
Yes, vim <em>does</em> have that feature. Syntastic is nice enough; though (due to Vim’s age), doesn’t just-work as well as in Eclipse, and doesn’t do the red-squiggly-lines thing.<br />
Quickfix is the more ‘legacy’ equivalent. And Quickfix is really nice (I’ve used it for an OCaml project). But the equivalent “sbt compile” takes a <em>long</em> time to run. SBT itself compensates for this by providing a REPL/shell, which is quicker, but doesn’t fit the vim/makeprg model. – <a href="https://notes.pinboard.in/u:rgoulter/47e14b69d902db1e0146">There seem to be some Vim/SBT integrations</a>, but I’ve not tried any of them. (The general theme is <em>they</em> will integrate with quickfix).<br />
– If it’s not too distracting, it certainly is useful to have an at-a-glance view of “did I break anything?”, though, so it’s not strictly inferior in and of itself.</p>
<p>There are other things I more/less miss from Eclipse.<br />
e.g. Eclipse’s editing just has a more “solid” feel to it, like you’re editing building blocks. This is probably the whole press-enter-to-select-option.<br />
No doubt Vim can be customised to match this, but some of the auto-insertions are nice. (And, yes, provide nice inspirations for what an editor should have).<br />
Convenience features like automatically-import-a-class which wasn’t otherwise in scope is useful.<br />
– Particularly, though, and an example of “how good is your tooling” is “show type under cursor”. (These strongly typed languages, with type inference, like Scala, Haskell and OCaml, more/less demand editors with this feature).</p>
<p>– But another big difference between these is this:<br />
When I’m using Eclipse, I put up with any inefficiency.<br />
When I’m using Vim, I’m imagining what I could have to improve my tooling, what features would be nice to have to make things nicer.</p>
]]></summary>
</entry>
<entry>
    <title>Notes on Building a Live Coding Tool for C99</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2015-09-28-notes-on-building-a-live-coding-tool-for-c99.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2015-09-28-notes-on-building-a-live-coding-tool-for-c99.html</id>
    <published>2015-09-28T00:00:00Z</published>
    <updated>2015-09-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 28, 2015
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/fyp.html">fyp</a>, <a href="/tags/programming.scala.html">programming.scala</a>, <a href="/tags/programming.c.html">programming.c</a>, <a href="/tags/programming.vim.html">programming.vim</a>, <a href="/tags/presentation.html">presentation</a>
    
</div>

<p>I’ve been invited to talk at NUSHackers Friday Hacks on October 9th, about my FYP of building a ‘worksheet’/‘live coding’ environment for C.<br />
This post is to note down anything pertinent / thinking-out-loud as to what to say.</p>
<p>This is a draft. <a href="https://onedrive.live.com/redir?resid=D8B6217BE240272D!94399&amp;authkey=!AH692L5mL_TVLeo&amp;ithint=file%2cpptx">Here is a link to the presentation draft</a>.<br />
(Obviously, the colours need to change.).</p>
<h1 id="what-is-my-fyp">What is my FYP?</h1>
<p>Let’s have a GIF explain that:</p>
<div class="figure">
<img src="https://github.com/rgoulter/c-worksheet.vim/raw/master/demo.gif" alt="demo" />
<p class="caption">demo</p>
</div>
<p><a href="https://github.com/rgoulter/c-worksheet.vim/raw/master/demo-slow.gif">(Here is the same gif, slower speed).</a></p>
<p>i.e. show the results of the computation directly beside the C program itself, inside the editor. (This saves having to quit the editor, type <code>gcc &lt;whatever&gt;.c</code>, <code>./a.out</code>, then try and figure out what’s going on).<br />
Another way to describe this as a ‘REPL on steroids’.<br />
You might be aware of other such tools around:</p>
<ul>
<li>Scala IDE’s “worksheets” were the ‘inspiration’ for this. (EclipseFP copies this idea with what it calls a ‘worksheet’).</li>
<li>Apple’s Playground does a similar kindof thing for Objective-C and Swift.</li>
<li>LightTable (whose demo was very impressive, but the $300k KickStarter hasn’t given us the complete thing yet) is big on doing this for Clojure, and to a limited extent Python.</li>
<li>IPython notebooks are kinda-sorta similar.</li>
<li><a href="https://comealive.io/">‘Alive’</a> is bringing the same thing for C# in Visual Studio.</li>
<li><a href="https://github.com/jcartledge/sublime-worksheet">jcartledge/sublime-worksheet</a> is an example of an editor plugin which provides a ‘worksheet’ interface for any REPL language. (Easy to see ‘REPL on steroids’ here).</li>
<li>Apparently <a href="http://stackoverflow.com/questions/13059700/can-sublimetext2-execude-ruby-code-and-show-the-results-within-the-document-like">TextMate</a> can show results for Ruby.</li>
<li>TMux + Vim, with something like <a href="https://github.com/epeli/slimux">slimux</a> (‘send output to TMux shell’) kinda-sorta helps out with this, too. (‘slimux’ being inspired by Emacs’ SLIME).</li>
</ul>
<p>Loosely related is also, e.g. GDB/LLDB. A more sober way to describe my plugin is “auto-generated printf debugging”. – GDB/debuggers provide ‘inspect the value at some point in execution’ and ‘can easily evaluate expressions’ functionality. (GDB is known to be easy-to-use, widely used by the CS1010 kids, etc.).</p>
<p>My project on GitHub: <a href="https://github.com/rgoulter/c-worksheet-instrumentor">rgoulter/c-worksheet-instrumentor</a> (the main logic), and <a href="https://github.com/rgoulter/c-worksheet.vim">rgoulter/c-worksheet.vim</a> (a plugin for Vim).<br />
(It’s got a handful of stars on GitHub. You just know I’m amazing at publicity.).</p>
<h1 id="goals-for-presentation-meta">Goals for Presentation (Meta)</h1>
<p>Hopefully, (esp. if you play around with it yourself), you’ll think that’s kinda cool.<br />
I’ll know if I did a good job with my talk if you walk out thinking “that’s it, huh? I was expecting something complicated.” / “<em>I</em> could do that, chump.”. (I’ll’ve done an even better job if some of you go out and try and make this kindof stuff).</p>
<p>It’s kinda lame, for me, to say “hey, what I did for my FYP is quite simple”. (“If you can’t explain it simply, you don’t understand” / “it’s only simple if we simplify out the details” aside). The fortunate thing for this is that C has relatively few features. (e.g. No closures / functions within functions). But it’s not a sit-down-and-finish-it-in-an-hour kindof project. It is a <em>lot</em> of fun. (How many kids continue working on their FYP after they’ve presented in their free time?). You’ll also get <em>very</em> good at the language; I got somewhat familiar with the C99 language standard, and certainly stumbled upon the more esoteric aspects of (simple) C99, my favourite being:</p>
<pre><code>int isWhitespace[256] = { [&#39; &#39;] = 1, [&#39;\t&#39;] = 1, [&#39;\n&#39;] = 1 };
isWhitespace[&#39;a&#39;];  //&gt; 0
isWhitespace[&#39; &#39;];  //&gt; 1
isWhitespace[&#39;\t&#39;]; //&gt; 1</code></pre>
<h2 id="whats-in-it-for-you-motivation-for-caring-about-the-presentation">“What’s In It For You” / Motivation For Caring About the Presentation</h2>
<p>Something like ‘Example of a cool Programming-Language Application project you can make, once you have knowledge of how to make a parser &amp; roughly you could implement it’, esp. if the inspiration is ‘I want that for <em>my favourite language</em>’.</p>
<p>On the other hand, PL applications needn’t be like this, and can be more modest, like, ‘organise imports’ or ‘indent properly’ or so.</p>
<h1 id="parsers-and-pl-applications">Parsers and PL Applications</h1>
<p>– It can become clear by the terminology, the way someone talks, how much they know or don’t know about a subject. “Parsers” is one of these areas I don’t know all that much about. (I never took the compilers/parser course.).</p>
<p>But in terms of “writing a worksheetify program”, roughly formula for this is:</p>
<ol style="list-style-type: decimal">
<li>Parse the source code.</li>
<li>???</li>
<li>Profit.</li>
</ol>
<p>(Which applies to writing any PL application in general.).<br />
There are different ways to do it. (And of course, there are trade-offs for different approaches.).</p>
<p>But a key point I learned is, if you want to show results within functions / nested scopes / control structures, it’s not enough to just pass it off to a REPL. You must be able to parse the source code.</p>
<h2 id="making-use-of-the-ast">Making Use of the AST</h2>
<p>In situations where you’re writing programs whose data is other programs, you’re going to want to make use of techniques a level abstracted from directly traversing the AST.</p>
<div class="figure">
<img src="http://i.imgur.com/12f7qEm.png" alt="AST" />
<p class="caption">AST</p>
</div>
<p>ANTLR (see below) provides two ways to handle this: Tree Listeners, Tree Visitors.<br />
With Tree Listeners, you implement listener methods which get called as the AST is walked.<br />
With Tree Visitors, you implement methods which then control which parts of the tree are ‘visited’; the intent is to evaluate the AST to some value. (e.g. Numeric expression to a number, like in the simple math expression grammar example).</p>
<p>– The Tree Visitor is kindof more FP-ish, except having to explicitly call ‘visit’ on the children nodes of the AST is also a bit tedious. - This can be abstracted another level, where you have e.g. <code>AST -&gt; Option[T]</code>, and some <code>combine :: [T] -&gt; T</code>, then it’s possible to write a general <code>fold_ast :: AST -&gt; (AST -&gt; Option[T]) -&gt; ([T] -&gt; T) -&gt; T</code> function for the AST. (The <code>AST -&gt; Option[T]</code> means “maybe extract value from this AST node; if this node returns Some thing, use that, otherwise keep looking.”.). - Manipulation of AST could be done in a similar way.</p>
<p>Anyway. The dynamic (in ANTLR) is usually that the Tree Listeners can be used to ‘grab what you want’ out of the AST, Tree Visitor is better at ‘evaluating’ some part of the AST to a value.</p>
<h2 id="my-choice-of-parser-technique">My Choice of Parser / Technique</h2>
<p>For the ‘parser’, I made use of ANTLR parser-generator (like flex/yacc; just give it a BNF-esque grammar, and it generates the lexer/parser for you). Mostly because this can generate a parser in Java, and I was using Scala for the project (as specified by FYP description – Though I think since FP/‘strongly-typed’ languages are kinda nicer to write parsers in, I think the hope was I’d hand-write the parser..)</p>
<p>(See my adapted <a href="https://github.com/rgoulter/c-worksheet-instrumentor/blob/master/src/main/antlr4/edu/nus/worksheet/instrumentor/C.g4">C.g4</a>).</p>
<p>Making use of gccxml, or an LLVM/Clang pass might’ve also had it’s advantages, ‘but’, then I’d have to write in C++ (for the latter), it makes the executable size for my program <em>much</em> larger (which is fine if your plugin is like YouCompleteMe), and I more/less wanted to keep the approach ‘general’, rather than tied to a specific language.<br />
[Note: a disadvantage of not using gcc/clang is that there may be divergence between what <em>they</em> parse and what <em>I</em> parse; I mitigate this in my project by first compiling the given input C file. i.e. anything I can parse, they can parse (better?)].</p>
<p>In terms of “in my case”:<br />
One approach might be to just pass the code of to some C interpreter anyway. (Cling is a C++ interpreter developed by the folk at CERN, a successor of an older CInt (C Interpreter) project of theirs. ‘Cling’ because it’s built upon LLVM/Clang.). This’d require potentially renaming variables so that everything is unique, and ‘unfolding’ control structures (like loops, etc.). – Quite a messy way of doing things.</p>
<p>Another approach (which I never investigated) would be to generate a sequence of commands to give to GDB/LLDB so as to get the information (i.e. values of variables at some point in execution). (I did investigate using GDB/LLDB insofar as ‘will this let me avoid having to learn about the PL stuff?’; it’s not suffice because you still need to know for a statement e.g. <code>x = y = 4</code> <em>what</em> information you’d like to get from GDB/LLDB). – This isn’t necessarily a bad approach.</p>
<div class="figure">
<img src="http://i.imgur.com/i2WKSkH.png" />

</div>
<h3 id="instrumenting">Instrumenting</h3>
<p>The approach I <em>did</em> take was to ‘instrument’ (or ‘augment’) the code.<br />
i.e. insert statements into the C program so that I can run the program to get the output.</p>
<div class="figure">
<img src="http://i.imgur.com/P3KHZzK.png" />

</div>
<p>Roughly like:</p>
<pre><code>int main() {
  int x;
  x = 3;
}</code></pre>
<p>becomes</p>
<pre><code>int main() {
  int x;
  x = 3;
  OUTPUT(x, STRING_OF(3))
}</code></pre>
<p>and as-if compiled with a pre-processor which handles <code>OUTPUT</code>, <code>STRING_OF</code>. <code>OUTPUT</code> outputs in a format my Scala program intercepts. (I just use <code>STDOUT</code>; it could also be done using, say, sockets, or using something like Apache Thrift / or some other IPC/RPC framework – With C, this is a bit annoying, e.g. becomes more difficult to compile on Windows. [My tool, &amp; the Vim plugin, work on Windows, btw]).</p>
<p>The pseudocode for the instrumentor is more/less:</p>
<pre><code>def instrument(source):
  ast &lt;- parse source
  types &lt;- ctypes from declarations in AST

  for each declaration:
    insert(output declaration.toEnglish)

  for each expression statement:
    // n.b. assignments are expressions
    insert(output declaration.toString)</code></pre>
<p>Aside from ANTLR-specific stuff (e.g. ‘inserting’ into a token stream), the key challenge here is getting the ctype from a declaration. Furthermore, you need to be able to get the ctype of an expression, and from the ctype be able to generate ‘toString’ output for it.</p>
<h1 id="considerations-made-when-doing-this-for-c">Considerations Made When Doing This For C</h1>
<p>Specifically for C, my program basically outputs for declarations (like cdecl), and outputs values for expression statements.</p>
<h3 id="representing-c-kinds">Representing C Kinds</h3>
<p>A C variable/expression will be of some type: * a primitive type (e.g. int, float, char), * a pointer to some C type, * an array of some C type, * a struct/union (consisting of a sequence of identifiers, each of some C type) type, * an enum type, * a function (consisting of a return value of some C type, and a sequence of parameters each of some C type).</p>
<p>If you can see how the above might be represented as an ‘Algebraic Data Type’, congratulations. (If not, you probably haven’t heard of ADTs.).</p>
<p>e.g. in ML languages like OCaml/Haskell, you might write it something like:</p>
<pre><code>type CType = Primitive of String * String
           | Pointer   of String * CType
           | Array     of String * CType
           | Struct    of String * String * ((String, CType) List)
           | Function  of String * CType * ((String, CType) List)</code></pre>
<p>In Scala, the code (simplified) is something like:</p>
<pre><code>sealed trait CType;
case class PrimitiveType(id: String, type: String) extends CType;
case class PointerType(id: String, to: CType) extends CType;
case class ArrayType(id: String, of: CType) extends CType;
case class StructType(id: String, tag: String, members: List[(String, CType)]) extends CType;
case class FunctionType(id: String, rtnType: CType, params: List[(String, CType)]) extends CType;</code></pre>
<p>(See <a href="https://github.com/rgoulter/c-worksheet-instrumentor/blob/master/src/main/scala/edu/nus/worksheet/instrumentor/CType.scala">CType.scala</a>).</p>
<p>In Java … ha ha ha, just kidding. (Just because you <em>can</em>, doesn’t mean you <em>should</em>.).</p>
<h4 id="making-use-of-this-adt">Making use of this ADT</h4>
<p>Again, often in FP programming, once you have the types, the rest is fairly straight-forward. In my case: * I want this ‘CType’ from the AST. (kinda because C99 doesn’t have <code>typeof(x)</code>). * I want to output e.g. string-of some ‘CType’. (because C99 doesn’t have <code>stringof(x)</code>).</p>
<h2 id="declarations">Declarations</h2>
<div class="figure">
<img src="http://i.imgur.com/93zni61.png" />

</div>
<p>The devil is in the detail, but (in terms of ANTLR): * You can use a TreeVisitor to evaluate a declaration statement to a list of CType(s). * You can then use a TreeListener to traverse the AST and pick up the declarations.</p>
<p>The main complication here is that the listener has to care about scope.<br />
There’s also things like forward declarations, types declared in header files, &amp; typedefs.</p>
<p>It can be a bit tedious to figure this out, since you have to care about <em>all</em> occurrences of whatever AST node you’re working with. e.g. <code>declaration</code> can appear in the global scope, outside of functions; the identifiers of a struct’s members will look the same as a ‘normal’ declaration, etc.<br />
– What helps here is comparing the ASTs of declarations which are quite similar. <code>int *(*a)[5];</code>, <code>int **b[5];</code>, <code>int (**c)[5]</code> have similar-ish trees, but very different semantics.</p>
<h3 id="the-adts-make-it-easier">The ADTs make it easier</h3>
<p>In case the above diagram doesn’t make that obvious, then it’s roughly “collect the type specifiers and any point-to-(type-specifier) info; this is passed to the declarator as the AST is traversed. Something something recursion, and that’s how simple it is.<br />
Again, roughly, since each alternative for the declarator corresponds to some alternative of the above ADT, it does help write the program logic.</p>
<h3 id="cdecl">CDecl</h3>
<p>The actual cdecl (e.g. at cdecl.org, or as a programming exercise in the “Expert C Programming” book) is more/less a heuristic, doesn’t actually take care of all C declarations.<br />
But going from (String -&gt;) AST -&gt; CType, it’s not so hard to go CType -&gt; String to ‘explain’ what a C declaration is.<br />
Figuring it out takes the same kindof logic as figuring out how to do AST -&gt; CType stuff.</p>
<h2 id="expressions">Expressions</h2>
<p>This is more/less straightforward, following the CType ADT.</p>
<p>In particular, I use StringTemplate as a template rendering engine. (Like Python’s Jinja). So you have a <code>string_of_primitive</code>, <code>string_of_pointer</code>, <code>string_of_array</code>, etc. etc. and pass values to StringTemplate such that it can recursively generate the C code for you.</p>
<h3 id="the-adts-make-it-easier-1">The ADTs make it easier</h3>
<p>Since what’s instrumented is C code, the goal is to come up with C code which constructs a String for some ctype. Again, since it’s recursive, then the code to generate this C code is going to involve recursion. So it’s just a matter of writing code to construct a string for a primitive type, and array of ctype, etc.</p>
<p>See <a href="https://github.com/rgoulter/c-worksheet-instrumentor/blob/master/src/main/resources/edu/nus/worksheet/instrumentor/templates/constructs.stg">constructs.stg</a> See</p>
<h3 id="instrumenting-putting-it-all-together">Instrumenting: Putting it All Together</h3>
<p>I don’t reconstruct the AST directly, but just inject the instrumenting C code into a TokenStreamRewriter (one of ANTLR’s things, for a stream of the lexed tokens).</p>
<h2 id="cool-stuff-segfault-handling">Cool stuff: Segfault Handling</h2>
<p>That’s all ‘nice’, but something I’m quite proud of (&amp; in terms of ‘useful for a C beginner’) is it catches <code>SEGFAULT</code>s, and marks the output there:</p>
<pre><code>  int *px;     //&gt; px is pointer to int
  px = 0;      //&gt; px = (nil)
  *px = 5;     //&gt; SEGFAULT</code></pre>
<p>‘How’ involves a bit of knowledge about C99:</p>
<ul>
<li><p><code>setjmp</code>/<code>longjmp</code> are kinda like a <code>GOTO</code> statement, can be used to simulate exception handling in C.</p></li>
<li><p><code>signal</code> let’s you ‘catch’ thrown signals.</p></li>
</ul>
<p>So, to catch a segfault, you instrument each expression-statement (includes assignments &amp; function calls, excludes declaration statements) with the <code>setjmp</code> (like <code>try { }</code>); if a <code>SEGFAULT</code> signal is thrown, catch that in <code>signal</code>, and then use <code>longjmp</code> (like <code>throw ..</code>); in the place you jump to (like <code>catch { }</code>), output <code>SEGFAULT</code> to STDOUT, then exit.<br />
– Of course, the instrumented C code then becomes something no sane human would ever write.</p>
<h2 id="cool-stuff-type-inference-on-arbitrary-c-expressions">Cool stuff: Type Inference on Arbitrary C Expressions</h2>
<p>Being able to infer the type of arbitrary expressions e.g. <code>4*12</code> or <code>p[q]</code> enhances the usability of the tool/plugin; the use case becomes “want to show the value of an expression at some point? Simply write that expression.”.</p>
<p>The Type Inference takes a bit of thought, e.g. in <code>p[q]</code>, it can either be an array lookup, or a pointer offset.<br />
But, again, while the logic is somewhat tedious, the code to do this inference straightforwardly follows the grammar/AST for expressions; and I’m not sure how you’d do that without an ADT like the one above.</p>
<h1 id="limitations">Limitations</h1>
<p>As discussed on the repository:</p>
<ul>
<li><p>No I don’t do squat with regards to <code>malloc</code>, etc. (Particularly since there’re other ways to allocate memory, e.g. <code>calloc</code>, <code>alloca</code>, not to mention custom ones like <code>xalloc</code>.).</p></li>
<li><p>Obviously I don’t do squat with regards to concurrency, threads, etc.</p></li>
<li><p>The tool doesn’t necessarily play nicely with C PreProcessor stuff.<br />
It’s easy to come up with examples which show how tricky it could be to deal with that.</p></li>
</ul>
<h1 id="contributors-wanted">‘Contributors Wanted’</h1>
<p>If you find any bugs, I’d be delighted for you to file an issue.<br />
– Keep in mind, though, that the Scala Worksheets tool doesn’t work when the program uses semicolons to delimit statements. - So I think I’ve not done a bad job.</p>
<p>– For selfish reasons, of course I’d love to see plugins for other editors like Emacs, Sublime Text, Atom, LightTable, etc. (and it’s a bit brutal to try and learn the APIs if you don’t use the editors).<br />
The vim plugin is fairly lightweight, since all it needs to do is communicate over a socket to the Scala server.<br />
– Certainly it’d be interesting to see, in terms of UX, how the tool / plugin could be improved.</p>
<p>– Originally it was supposed to be an Eclipse plugin.<br />
I scrapped that since dealing with dependency-jars within OSGi is not straight-forward to the uninitiated. - Particularly frustrating is that the plugin would work in the dev environment, but wouldn’t work when exported (due to e.g. classpath issues.).<br />
– Either dealing with OSGi stuff, or just imitating the ‘lightweight’ approach of tool-as-external-dependency would fix that.</p>
<p>But of course, I’d be much happier to see people try and do some PL project with the language of their choice. (Doesn’t have to be a worksheet.).</p>
<h1 id="now-that-i-have-your-attention---project-note-taking">Now That I Have Your Attention - Project Note Taking</h1>
<p>I think it’s fair to say no particular bit there is all that ‘hard’, but I can see that altogether it’s not exactly trivial.<br />
FWIW, I had like half a year to make it. (Half, because who does most of their work in the first half of their FYP?, and because I didn’t know squat about PL in the first half..).</p>
<p>I really like tools. (This doesn’t really sound like a ‘cool’ FYP to do unless you’ve at least some love for tools.). – e.g. Not ‘vim vs emacs’ so much as ‘your editor should be able to do these things’.</p>
<p>For note-taking, I kinda-sorta made use of OneNote.<br />
Briefly, OneNote is nice for collecting details/links on a topic (it has a nice hierarchy of sections -&gt; pages -&gt; bullet points). [These days, if I’m thinking hierarchically with a keyboard, I kinda-sorta make use of Emacs’ Org-Mode. – In the hands of a power user, Org-Mode is something to behold. I am not such a user.].</p>
<p>Physical pen &amp; paper is king, though. (or queen, whatever).<br />
Pens, use colours: e.g. black for thoughts, green for questions, red for “wtf, shit’s not working”, blue for facts (&amp; purple for ‘todo’, if you’ve a purple pen). YMMV, but I find this useful. (esp. if you’re using one of those Bic 4-in-one); compared to monocolour, I reckon 1. helps thinking (like de Bono’s thinking hats?) 2. quicker to ‘parse’ the page 3. can write <em>much</em> more densely on the paper.<br />
Overall, I keep a ‘programming journal’. I’ve heard “if you’re not writing, you’re not thinking”. – “how many pages I filled” makes for quite a nice metric for “how much work you’ve done”. (e.g. -if- when you encounter bugs, or other problems, you’re going to write down that you had this trouble, and alternatives as to how to overcome it.). – As an example, the “CType from arbitrary expression” system was 10 double-sided refill pages worth of work; the loop visualisation was 4 double-sided refill pages.</p>
<p>For this project, I kept a folder full of notes. It’d have things like:</p>
<ul>
<li>Example C program printouts (so, e.g. figuring out what kindof instrumenting would be needed),</li>
<li>Printout of the C BNF, (both ANTLR’s file, and from the C99 standard).</li>
<li>Reference sheets for GDB/LLDB, Thrift, etc.</li>
</ul>
<p>– Point is, printed out, you can write on these, highlight things and in the <em>margins</em> ask questions. (“marginal notes” or “marginal questions”, as such).</p>
]]></summary>
</entry>

</feed>
