<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2016-08-11T00:00:00Z</updated>
    <entry>
    <title>Cinematic Lego Games</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-08-11-cinematic-lego-games.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-08-11-cinematic-lego-games.html</id>
    <published>2016-08-11T00:00:00Z</published>
    <updated>2016-08-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 11, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/media.lego.html">media.lego</a>
    
</div>

<p>Lego Star Wars: The Complete Saga is a classic game worth having in your library. (Ironically, it’s not the <em>complete</em> saga of the Lego games).<br />
– Since then, there’ve been many other Lego games of the same style, like Lego Indiana Jones, Batman, Harry Potter, etc.; the most recent one being for Star Wars: The Force Awakens.</p>
<p>If you’ve played the more recent ones, I think LSW:TCS perhaps comes across as a bit archaic, but there’s something so charming about it.<br />
The gameplay is ‘simple’. Smash stuff in the world to get points, solve puzzles to get through the level or to get collectibles. – The ‘puzzle’ part comes in terms of, you need a Jedi character to do Jedi things, a droid to do droid things, etc. – Playing with the characters of movies in Lego form really is kindof adorable.</p>
<p>Part of what else is charming about the old classic is there’s no dialogue; so the story plays out (&amp; probably only makes sense) if you’ve seen the movie.<br />
Sometimes with jokes thrown in.<br />
The newer Lego games (I’m not sure since when, but I know Lego: Lord of the Rings has it) instead feature dialogue.</p>
<p>As well as voice-dialogue, Lego LOTR adjusts the “you need this character to unlock this puzzle” formula: it’s more item-based, so you need a fishing-rod to fish, a bow &amp; arrow to shoot targets, etc.; these are items which some characters will have (e.g. Legolas has bow &amp; arrow; Gimli has an axe), or which can be unlocked as a collectible.<br />
– The other cool thing about Lego LOTR is that, between chapters of the story, your characters get to freely roam around a small-scale Middle Earth. (So you can simply walk into M.. etc. etc.).</p>
<p>– After replaying through these two, I decided to pick up Lego Star Wars: The Force Awakens, for the PS Vita.<br />
It’s still a bunch of fun, but certainly feels more sophisticated than the aforementioned. – e.g., For situations when you need to interact with a particular puzzle with a particular character, LSW:TFA let’s you quickly switch to that character with the press of a button.<br />
LSW:TFA also adds on some cover-based shooting sections throughout the levels, which felt a bit gimmicky, but managed to still retain the essence of the action + puzzle-solving that the rest of the game has.</p>
<p>These are all still pretty fun to play. I’m not sure if it’s true for all the Lego games, but for these three at least, they get to borrow the music from their source films, and the music of Star Wars and Lord of the Rings is also pretty good.</p>
]]></summary>
</entry>
<entry>
    <title>Systems and Tools Have Limitations</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-07-31-systems-and-tools-have-limitations.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-07-31-systems-and-tools-have-limitations.html</id>
    <published>2016-07-31T00:00:00Z</published>
    <updated>2016-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 31, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.oop.html">programming.oop</a>, <a href="/tags/programming.fp.html">programming.fp</a>, <a href="/tags/programming.tools.html">programming.tools</a>
    
</div>

<p>So <a href="https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53">“Goodbye OOP”</a> is a piece which has been going around.<br />
I’ve no idea why. I wasn’t able to finish reading it. The author’s tone is amazingly cringe-worthy.<br />
After some time the of the clearly inexpert author (adopting a faux-foolish tone) bashing bad ways of OOP, the author concludes in a paragraph or two with “but, hey, Functional Programming looks pretty cool”.<br />
– I’m reminded of <a href="https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b#.ppia68wvo">“Farewell NodeJS”</a> with 1.4k likes. There the author spends time bashing the shortcomings of NodeJS, (inexpertly or not I can’t tell; at least the author’s tone isn’t as mockable), with a similar naivity of “but, hey, Go-lang looks pretty cool”.</p>
<p>I found in Undergrad there’s a politics about which tools are cool and which aren’t. PHP isn’t “cool”. (It’s also an abysmal language; I recall reading a great piece I liked, but can’t find it. There’re far too many articles on the topic). Java isn’t “cool”. – But in my experience, those that complain the loudest about how sucky these languages are rarely good programmers.<br />
(For signalling “good programmer”, admiration of either Erlang or Haskell will do the job. They’re Hipster Cool. – In Haskell’s case, you don’t even need to have written anything in Haskell to say you love the language).<br />
– What’s quite annoying about these posts, then, is that they try to make an evaluation/judgement (“OOP sucks, FP is cool”) without qualifications. – I like Scala; but I’m also aware there’s some <a href="https://nurkiewicz.github.io/talks/2014/scalar/#/">pretty complicated shit</a> going on. (The real downside you’ll find to Scala is it’s long compilation time, though). – I mean, praising a language/tool without also indicating it’s costs/downsides seems immature. In ComSci, almost everything is a tradeoff.</p>
<p>– What the post did get right, (from what I read of it, anyway), was that it highlighted ways of <em>misusing</em> OOP; ways which aren’t “obviously” wrong, or which sound like they’re keeping in line with OOP discipline. (By this point, or much earlier, PL purtians would’ve pointed out the distinction between Alan Kay’s “OOP is message-passing + late-binding” from “Java OOP”. – FWIW, the author of “Goodbye OOP” claims experience with Smalltalk and C++, but from the way the author writes, inexperience with each seems evident).<br />
– Steve Yegge’s <a href="https://sites.google.com/site/steveyegge2/when-polymorphism-fails">“When Polymorphism Fails”</a> is another piece which takes a stab at a problem OOP is unable to model.<br />
– But there’s a difference between “this tool can’t model this problem; don’t use it for that” (&amp; how to avoid such limitations), and “I’m misusing this tool; it sucks; everyone should use this other tool I just heard of instead”.</p>
<p>cf. Steve Yegge’s praise of Ruby <a href="http://steve-yegge.blogspot.sg/2006/09/bloggers-block-4-ruby-and-java-and.html">here</a>. Yegge’s a very talented writer, so the comparison is unfair on that front, but he qualifies his praise. (He doesn’t like Ruby, but he uses it; he doesn’t know Ruby, but he rarely needs to look at the docs, compared to languages he knows, where he does have to; it’s performance isn’t amazing, but that’s mostly ok anyway).</p>
<p>A blogpost from Robert C Martin, <a href="http://blog.cleancoder.com/uncle-bob/2016/07/27/TheChurn.html">“The Churn”</a>, came up on my timeline. ‘The Churn’ referring to the naive programmer’s chase of all new things as “superior”. (Which makes for a fun comparison with <a href="https://quoderat.megginson.com/2006/03/06/programming-languages-of-distinction/">“the programming language cycle”</a>; these two pieces agree about new languages [which smart people like] lack in usable tools/libraries). – Martin makes good observations that OOP, FP are orthogonal; both tools used to solve problems. – I think in insinuation that FP isn’t worth learning/paying attention to drew ire from the FP kids.</p>
]]></summary>
</entry>
<entry>
    <title>C++ Object Copying</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-07-14-c-object-copying.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-07-14-c-object-copying.html</id>
    <published>2016-07-14T00:00:00Z</published>
    <updated>2016-07-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 14, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.c%2B%2B.html">programming.c++</a>
    
</div>

<p>C++ is quite a different beast of a language to, say, Java or Python.<br />
My early programming experience was in the latter, so I find my ‘mental model’ for reasoning about what C++ does with the code I write is sometimes wrong.</p>
<p>One area where I make mistakes is underestimating where C++ will make copies of objects.<br />
That Java/Python are (largely) pass-by-reference, and C++ is pass-by-value (unless otherwise specified) is prob’ly what drives that. – Another way of saying this is that when “passing objects around”, Java/Python tend to only copy <em>pointers to</em> objects, whereas C++ (by default) usually makes copies of objects.</p>
<p>It may be helpful to illustrate this, to see where C++ copies things. (Or, perhaps it may be easier to remember where C++ doesn’t copy things).</p>
<p><a href="https://gist.github.com/rgoulter/b33b54ecc6f17e454387234d941e229b">Here’s one I prepared earlier</a>. (The gist program contains a good output listing for the snippets below).</p>
<h2 id="a-custom-object">A Custom Object</h2>
<p>Consider a custom object <code>MyObj</code>:</p>
<pre><code>class MyObj {
 public:
     MyObj(int x) {
         cout &lt;&lt; &quot;    CONS MyObj(&quot; &lt;&lt; x &lt;&lt; &quot;)&quot; &lt;&lt; endl;
         x_ = x;
     }

     ~MyObj() {
         cout &lt;&lt; &quot;    DEST MyObj(&quot; &lt;&lt; x_ &lt;&lt; &quot;)&quot; &lt;&lt; endl;
     }

     MyObj(const MyObj&amp; other) {
         x_ = other.x();
         cout &lt;&lt; &quot;    CPY  Copying from &quot; &lt;&lt; x_&lt;&lt; endl;
     }

     MyObj&amp; operator=(const MyObj&amp; rhs) {
         cout &lt;&lt; &quot;    ASSG Assigning from &quot; &lt;&lt; rhs.x() &lt;&lt; &quot; to &quot; &lt;&lt; x_ &lt;&lt; endl;
         if (this == &amp;rhs) return *this;

         x_ = rhs.x();

         return *this;
     }

     void setX(int x) { x_ = x; }

     int x() const { return x_; }

 private:
    int x_;
};</code></pre>
<p><code>MyObj</code> is a straightforward class; we provide a constructor, destructor, copy-constructor and assignment operator which each output when they’re called.</p>
<h2 id="in-initialisation">In Initialisation</h2>
<pre><code>  MyObj x0 = MyObj(10);  // A1
  MyObj x1(5);           // A2
  MyObj x2(x1);          // A3
  MyObj x3 = x1;         // A4</code></pre>
<ul>
<li><p><code>A1</code> Only calls the constructor; not the copy-constructor or assignment operator.</p></li>
<li><p><code>A2</code> is the same as <code>A1</code>.</p></li>
<li><p><code>A3</code> is an explicit call to the copy-constructor.</p></li>
<li><p><code>A4</code> is also a call to the copy-constructor. (i.e. same as (<code>A3</code>)).</p></li>
</ul>
<h2 id="in-assignment">In Assignment</h2>
<pre><code>  x2 = x3;  // B1</code></pre>
<ul>
<li><code>B1</code> is a call to the assignment operator.<br />
The copy-constructor isn’t invoked in the assignment operator (in this example).</li>
</ul>
<h2 id="in-function-calls">In Function Calls</h2>
<p>Consider functions:</p>
<pre><code>void outp(MyObj o) {
    cout &lt;&lt; &quot;   Output MyObj(&quot; &lt;&lt; o.x() &lt;&lt; &quot;)&quot; &lt;&lt; endl;
}

void outpC(const MyObj&amp; o) {
    cout &lt;&lt; &quot;   Output MyObj(&quot; &lt;&lt; o.x() &lt;&lt; &quot;)&quot; &lt;&lt; endl;
}</code></pre>
<p>and the snippet:</p>
<pre><code>  outp(x1);   // C1
  outpC(x1);  // C2</code></pre>
<ul>
<li><p><code>C1</code>, a call to <code>outp</code> invokes a copy.</p></li>
<li><p><code>C2</code>, where <code>outpC</code> takes a constant-reference, does not invoke a copy.</p></li>
</ul>
<h2 id="assigning-to-references">Assigning to References</h2>
<pre><code>  const MyObj&amp; crx0 = x0;  // D1
  MyObj&amp; rx0 = x0;         // D2</code></pre>
<ul>
<li><p><code>D1</code> doesn’t invoke a copy.</p></li>
<li><p><code>D2</code> doesn’t invoke a copy.</p></li>
</ul>
<p>Assigning to references doesn’t invoke copies.</p>
<h2 id="results-of-functions">Results of Functions</h2>
<p>Consider the function:</p>
<pre><code>MyObj f1() {
    cout &lt;&lt; &quot;  f1():&quot; &lt;&lt; endl;
    return MyObj(7);
}</code></pre>
<p>and the snippet:</p>
<pre><code>  MyObj x4 = f1();          // E1
  const MyObj&amp; crx4 = f1(); // E2
  MyObj&amp; xr4 = f1();        // E3</code></pre>
<p>both CONS no cpy, except 3 which doesn’t compile</p>
<ul>
<li><p><code>E1</code> doesn’t invoke a copy.</p>
<ul>
<li>I think this is the compiler optimising a way a destruct of the value from the function, and a copy-constructor to the tmp value.</li>
</ul></li>
<li><p><code>E2</code> also doesn’t invoke a copy.</p></li>
<li><p><code>E3</code> doesn’t compile; that’s because a reference must point to an ‘lvalue’ (something which can be referred to by name).</p>
<ul>
<li>Apparently C++11 allows rvalue references (<code>&amp;&amp;</code>), which allows ‘move semantics’.</li>
</ul></li>
</ul>
<h2 id="pointer-dereferencing">Pointer Dereferencing</h2>
<pre><code>  MyObj* ptr = new MyObj(13);  // F1
  MyObj deref = *ptr;          // F2
  MyObj&amp; derefRef = *ptr;      // F3
  const MyObj&amp; constDeref = *ptr;  // F4
  delete ptr;                  // F5</code></pre>
<ul>
<li><p><code>F1</code> is a call to the constructor, (and <code>F5</code> to the destructor).</p></li>
<li><p><code>F2</code> <em>invokes the copy constructor</em>.</p></li>
<li><p><code>F3</code> doesn’t invoke a copy.</p>
<ul>
<li>Pointer dereferencing doesn’t necessarily demand a copy.<br />
The dereference of <code>*this</code> in <code>MyObj&amp; operator=(...)</code> also demonstrates that.</li>
</ul></li>
<li><p><code>F4</code> doesn’t invoke a copy, either.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>Men of Valor Has Not Aged Well</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-07-09-men-of-valor-has-not-aged-well.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-07-09-men-of-valor-has-not-aged-well.html</id>
    <published>2016-07-09T00:00:00Z</published>
    <updated>2016-07-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July  9, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/games.men%20of%20valor.html">games.men of valor</a>, <a href="/tags/steam.html">steam</a>
    
</div>

<p>It’s kindof fun to see a game you’d seen on store shelves 10 years ago, available on Steam.</p>
<p>In this case, <a href="http://store.steampowered.com/app/411330/">Men of Valor</a>, with a usual-price of S$10.50, and at the time of writing, on sale for 75% off. – Look, I removed my payment details from Steam during the Summer Sale, but I can hardly feel bad about a single S$2.62 purchase.</p>
<p>– The other experience I’d had with ‘old shooters’ was “Shadow Ops: Red Mercury”, for S$1.05. Which, uh, wasn’t great.</p>
<p>I think in terms of “action/war shooters”, Call of Duty gets its fair share of complaints for being …. dumb, non-stop ADHD explosions and mayhem. (A lot of the criticism also focussed on the multiplayer experience in those games; though I only play the single-player campaigns).<br />
That’s a bit unfair, I’d say; since the older CoD games still hold up relatively well in contrast to the aforementioned.</p>
<p>“Shadow Ops: Red Mercury”’s gameplay felt a bit awkward to me. One game mechanic absent from gameplay was, you couldn’t pick up an enemy’s gun; which seems like something insignificant, but every other shooter I’ve played featured that. It also felt cheap, the gameplay felt tacky. (So I ended up getting the cheat codes and having a lot of fun with it that way; so I can hardly regret the purchase).</p>
<p>“Men of Valor”, while I’ve only played a handful of chapters, also feels a bit tacky in comparison. (MoH:AA was published <s>around the same time</s> in 2002, [2 years before SO:RM or MoV], CoD <s>not much later</s> in 2004; “Battlefield: Vietnam” in 2004;“Far Cry” in 2004!).<br />
MoV’s story &amp; cutscenes are cheap and tacky, fine. But the gameplay … MoV’s health system allows you to die pretty quickly. In typical modern shooters, this is counter-balanced by mechanics like a cover-system, or by e.g. health regeneration. MoV’s mitigation is some delay before enemies shoot at you, &amp; that you must ‘bandage’ the damage received. (i.e., damage you receive is essentially ‘potential damage’, so you ‘bandage’ it to heal the potential damage. But being shot completely will kill you; so the system has all the drawbacks of a CoD-style system and a Far Cry-style system, without the benefits of either).<br />
– It’s just not fun to play; every time I picked it up, my main motivation to keep playing the level was the thought of how fucking boring it would be to replay through the level (&amp; shitty cutscenes).</p>
<p>In a way, I kindof feel bad about it. (Or I did, before learning that these shitty games were released the same year “Far Cry” was).<br />
CoD’s gameplay style (frequent checkpoints, wherein checkpoints are free; quick/free recovery of health from behind cover, etc.) don’t particularly create high-stakes. The player is there for the ride, not for an experience which demands anything of them.<br />
I guess what CoD, and other good shooters (like <a href="https://upload.wikimedia.org/wikipedia/commons/6/63/Quake_-_family_tree.svg">those using a Quake engine</a>) 10 years ago established/relied on good game mechanics (&amp; so don’t age abysmally); which these shitty cheap ones I’ve mentioned earlier … didn’t.</p>
]]></summary>
</entry>
<entry>
    <title>Reflection on Maintaining a Toy C++ Project</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-07-05-reflection-on-maintaining-a-toy-c-project.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-07-05-reflection-on-maintaining-a-toy-c-project.html</id>
    <published>2016-07-05T00:00:00Z</published>
    <updated>2016-07-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July  5, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.c%2B%2B.html">programming.c++</a>, <a href="/tags/programming.github.html">programming.github</a>
    
</div>

<p>A few years ago, for a course on Computational Geometry, my team made a program aiming for a stain-glass effect using Voronoi Diagrams.</p>
<p>To quickly explain:<br />
Voronoi Diagrams show the regions which are closest to each point. e.g. for 2 points, you’d bisect the space between them. – By analogy, each ‘point’ would be pizza-delivery, and each region would be the region served by that store.<br />
We’d found a <a href="http://www.cs.swarthmore.edu/%7Eadanner/cs97/s08/papers/gorbach.pdf">cool paper</a> explaining how to create a “stained-glass effect” using Voronoi diagrams. (Roughly, since edges in a Voronoi diagram are equidistant to two points, you wanna make points which are equidistant to edges on some input image: using an edge-detection filter of the image, you can construct a probability-distribution defined as “0 for an edge or far away from an edge, but quite high for close to an edge”… etc. etc.).</p>
<p>But, uh, this was a school assignment.<br />
The original assignment was in four stages; the first three iterating towards a Delaunay Algorithm, using precise big-int computations. (Delaunay is the dual of Voronoi; where Voronoi shows the regions, a Delaunay Triangulation shows which points are closest to each other. Btw, besides stained-glass effects, there’re a bunch of practical applications to this). (Another fun fact: during this assignment, one of the teammates rage-quitted to go do a whole project by himself, which he never presented on. I had all the luck for getting teammates in uni).<br />
Part four was “do something cool”.<br />
The trouble with this being that the assignment was initially in C++. (I think ‘cause the module was taught by the same Professor who taught ’Intro to Computer Graphics’, which used OpenGL in C++). – Fun fact, the given code wasn’t “const correct” &amp; so wouldn’t compile with compilers not on Windows; oddly, Uni courses are one of the places where Windows is presumed. The trouble with C++ in University courses is, unless the code is monkey-see-monkey-do, or the students are <em>really</em> good at C++, then there’s just too much C++ lets you screw up with to be a good language to use. (I recall at the time a teammate included a hard-coded <code>include &quot;C:\\Users\\username\\....\\whatever.h&quot;</code>, because how the hell are you supposed to know that’s not The Right Thing to do?).<br />
(Besides that, it’s much more difficult to install/setup dependencies for a C++ than for other languages like Python or Java).<br />
Only for the most basic things can a programmer get away with blindly writing C++.</p>
<p>Somehow, we managed to get something which worked (ish) submitted. (When I presented it to the class, I said it was “<em>half</em> cool”; ’cause it was a really cool project but it was only half-working).</p>
<p>I put it on my GitHub.<br />
I’d tinkered with it a year ago, enough to fix some <code>SEGFAULT</code> I was somehow getting.<br />
– Going through job interviews at the moment, I can see that the places I apply to will at least look at my GitHub; and <a href="https://github.com/rgoulter/cs5237-VoronoiArt">this project</a> is my only C++ project. Fortunately, no one gives enough of a shit to actually try out the project (since, as I discovered tinkering with it again recently, the code had some other <code>SEGFAULT</code> issue in normal use),=; unfortunately, I’d reckon even at a glance the project was in pretty bad shape. (Maybe not ‘typical undergrad C++’ bad, but still).</p>
<p>– To be honest, most of what made me say that was superficial: poorly arranged files, inconsistently named files, and inconsistent coding conventions. Prob’ly my favourite being <code>halfcamelCase</code> which annoyed the hell out of me. – In fairness, there were a number of ‘bad’ C++ things (heavy use of <code>extern</code>/global variables, <em>really long</em> methods/functions, etc. – I did write down the things I reckoned were shit; it’s theraputic).<br />
People glancing at the repo (e.g. people I’m applying to for a job) can notice the former easily; and when the latter isn’t so egregious, it’s difficult to notice. – But that’s not really a good excuse. I feel it’s not insane to say “well-designed &gt; testable &gt; working &gt; not-working”. Software is fragile, so “working” is often going to become “not working”. Testable code lets you know this <em>quickly</em>. And well-designed code is easy to bring under test (and/or, a good design makes it really difficult to write bad code on top of it).</p>
<p>Btw, “legacy code” = any code which is untested. lol, most of aforementioned codebase is “legacy”.<br />
In fact, in the days after we presented, the others worked their arses off to get it somewhat working. – Looking at the code again, I came across comments written in Czech. Given that my teammates were Kazakhstani and Indian, I figure this means they “adapted” the code from somewhere else. (TBH, I don’t doubt that they worked hard). – Though, looking at the code we had from the parts one to three, I kinda don’t blame them. – I don’t excuse them, either; after tidying up the code to remove the egregious Bad Things (tm), the code still doesn’t work, but at least the shit is within-functions rather than at a project-level; which is testable.<br />
(For myself, the code I wrote was the Qt &amp; OpenGL code. The uni graphics courses are quite happy to use GLUT.. I wanted a “real GUI”. – I’d made mistakes in loading the image into OpenGL texture coordinates, so the rendering would sometimes [though not always] be wonky).</p>
<p>– One thing I’ll note is about ‘cognitive load’: Programmers tend to know about the immediate-term cognitive-load, where if interrupted from being “in the zone”, it takes time to get back to the task at hand. – I think the thing most undergrads miss out on by not maintaining projects over a long term is the experience of why documentation is important. Coming back to the codebase after 1-2 years without touching it, especially a not-well-designed codebase, it’s <em>really</em> not clear what a particular function is for. Documentation, like <em>good names</em>, as well as describing what a function does (and what it assumes) is surely useful. Or, rather, in its absence, it takes quite some time to read through <em>to remember</em> what things were for. (&amp; that’s with the advantage of having once before carried such a cognitive load).<br />
– As well, for non-trivial algorithms (like Delaunay Triangulation, or constructing a Voronoi Diagram using Fortune’s Algorithm), absence of high-level explanations is quite annoying.</p>
<p>C++ itself is pretty brutal for novice-codebases.<br />
Unlike Rust, C++ is quite happy to let you do stupid shit (but then yell at you about it at runtime). – “<code>NullPointerException</code> is for wimp languages” is what C++ must think. Apparently C++ also thinks “just wing it” when a function never returns a value (when it’s supposed to return a value), which led to some deal of “wtf, it’s not even possible to construct a value like that!”, before I realised this. (No, really, wtf C++?).<br />
Java &amp; JVM languages happily print a stacktrace indicating <em>where</em> an error occurred; “where” meaning not just which line-of-code, but the function calls leading to it. – With a “pretty bad undergrad” codebase, it can be pretty shitty to find where the sinner is.<br />
– I mean, Rust looks hard as hell (for the borrowing/lifetimes stuff), but at least it’s damned-hard to run into errors like this.</p>
<p>Anyway.<br />
The project isn’t <em>that bad</em> at the moment. (The older code for Delaunay Triangulation is, but the rest ain’t). – “Why not start from scratch?” is a nice temptation, but it’s usually better to iterate towards a good solution than to start from scratch.<br />
If I was so concerned about a blight in my GitHub profile, yeah, maybe it’d’ve been better to remove it. But as a “cool project which mostly works”, it’d’ve been a shame to lose.</p>
<p>Also, protip: if you go too far while climbing Ballmer’s Peak, coding becomes less interesting.</p>
]]></summary>
</entry>
<entry>
    <title>Thoughts on JRPGs</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-06-24-thoughts-on-jrpgs.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-06-24-thoughts-on-jrpgs.html</id>
    <published>2016-06-24T00:00:00Z</published>
    <updated>2016-06-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 24, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/game.final%20fantasy.html">game.final fantasy</a>, <a href="/tags/game.chrono%20trigger.html">game.chrono trigger</a>
    
</div>

<p>My friends told me the PlayStation Vita is a weaboo’s console. While I’d say Sony have badly mismanaged the console, focussing instead on their PS4, one advantage is a decent catalogue of JRPGs available. (Since the Vita is portable, you can play through these on the bus or the train or whatever).</p>
<p>So far, my experience in JRPGs consists of Final Fantasy IV, Chrono Trigger and Final Fantasy VII. (With “South Park: Stick of Truth” being the closest I’d otherwise experienced of the genre).</p>
<h3 id="combat">Combat</h3>
<p>“Western RPGs are for gameplay, Japanese RPGs are for story” is the rule of thumb I was told.<br />
In case you’ve not played (or seen) Final Fantasy’s combat in these games, it consists of turn-based-ish combat on a screen where the monsters are on the left, good guys on the right; each turn you pick an action (attack/cast magic/use item). (Then you get EXP, level up your characters, etc.). – Chrono Trigger’s combat is a bit more active/involved, but <em>roughly</em> follows the same format.</p>
<p>The character’s Health (HP) and Mana (MP) persist across battles; and can be replenished by resting at inns (which are few / far between), or by using items (like potions, which are relatively expensive). So the gameplay-dynamic becomes trying to gain experience / get to where you need to be without using too many resources, while being careful to not let HP get too low.<br />
– South Park’s system replenished HP/MP for each battle; with this rule, characters can simply use all their most powerful magic spells without concern for the cost to MP.</p>
<p>So. It’s fair to say these JRPGs combat system isn’t <em>trivial</em>. And FFIV does pull dick-moves in its boss fights, such as only being able to fight particular bosses with particular magic spells (or else the boss uses super-strong counter-attacks).</p>
<p>Yet, one main ‘drawback’ to the JRPGs is the ‘grinding’: since your characters have levels, as do the enemies, the game may demand that the player repeatedly fight through enemy encounters to level up the characters. It’s more monotonous than not. (FFIV even provides the option to automatically select the same move as previous turns; which alleviates the grinding by way of ‘not really playing the game’).</p>
<p>In a way, it’s rather twisted way of making gameplay ‘accessible’: Typically, if you’re not skilled at playing a game, you can’t proceed. With levelled-games, all you need to do is grind-through enough enemies until what was previously insurmountable becomes .. surmountable.</p>
<h3 id="referring-to-the-wiki">Referring to the Wiki</h3>
<p>Perhaps my preference for games is decidedly more linear, but, sure, I looked up the wiki for these games while playing through them.<br />
The biggest impact this has is you’ll find out about all the best items/weapons, many of which you’ll probably miss the opportunity to get on first try.</p>
<p>There were times I got quite lost/stuck as to where I should be headed, too, in these games. That could also be due to how old these games are.</p>
<h3 id="characters-and-story">Characters and Story</h3>
<p>I think what FFVII was significantly weaker than FFIV and Chrono Trigger in the “ludonarrative” aspect of characters: In the latter, you have specific characters with fixed magic abilities. This strictly dictates how you can fight. (Particularly, “do you have a healer?”). – FFVII lets you pick &amp; choose which characters have which magic spells, &amp; so as far as I can tell it’s all rather arbitrary.</p>
<p>I, uh, had quite a long hiatus during my playthrough of FFVII; so some aspects of the story confused me. (FFIV, Chrono Trigger were much more tractable).</p>
<p>It’d be fair to say that these games let the characters develop by way of sidequests; these would elaborate more on the back-story of the character. By exploring more, you’d get more story, and better weapons/etc. (hopefully).</p>
<h2 id="conclusion">Conclusion</h2>
<p>These games are certainly classics, although they do show their age. I can’t say I’d enthusiastically recommend them, but the artistic style is quite cute, &amp; I don’t feel I wasted my time playing them.</p>
]]></summary>
</entry>
<entry>
    <title>Brief Thoughts on Purpose of Writing, Arguing</title>
    <link href="http://www.rgoulter.com/blog//posts/meta/2016-06-20-brief-thoughts-on-purpose-of-writing-arguing.html" />
    <id>http://www.rgoulter.com/blog//posts/meta/2016-06-20-brief-thoughts-on-purpose-of-writing-arguing.html</id>
    <published>2016-06-20T00:00:00Z</published>
    <updated>2016-06-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 20, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/persuasion.html">persuasion</a>
    
</div>

<blockquote>
<p>There’re two kinds of argument-posts: preaching to the choir, or convincing the doubtful.</p>
</blockquote>
<p>I came across this remark on a blogpost, &amp; it’s kindof interesting, because <em>does the second kind actually exist?</em><br />
(The above remark was followed by “so don’t use these words when describing your opponent”; essentially, a call for civility, which is an interesting topic in itself).</p>
<p>I mean. Is it common for people to come across an article, and say “you know what, I was wrong”? I feel Haidt persuasively argues in his “Righteous Mind” book that humans are driven foremost by intuition, and reason post-hoc tries to make the reason look good.</p>
<p>– I do believe people can <em>evaluate</em> whether arguments make sense or not; at least in the case where it’s about something they’re not tribal about. (Implicitly, though, if an argument on your side is bad, it’ll disappear).<br />
There’s value in two people arguing publicly, even in absense of persuasion, though: while, yes, the truth each believes is made stronger/richer by contact with the opposition; globally, the audience gets to pick/choose the merits of each side. (The world is complicated, and having a nuanced understanding of things is more likely to fit better than a simplified ideological viewpoint).</p>
<p>And yet. I don’t think <em>persuasion</em> (of a disinterested audience) happens via the rational arguments, as such.<br />
– For an argumentative post to be reasonable is a high cost, though: It’s easy to preach to the choir by merely saying “our opponents are stupid, the world would be better without them”. It’s much harder to construct sound reasons which support this. (The easiest way to do this is to showcase the worst of your opponent. “Look, they’re bad”. But this is necessarily met with a showcase of the worst of ‘your side’, so). – Rather, if rationality has much to do with persuading the elephant, then the ‘side’ which is able to keep the strongest guise of rationality (for the longest) is more likely the ‘right’ side.<br />
(That all pre-supposes this is about arguments between tribes. I’d guess most people in whichever community are largely non-tribal; and if they pay attention to the argument at all, somewhat serve as the disinterested audience).</p>
<hr />
<p>Yeah, there’s a danger ‘danger’ in attention-rewarding metrics like Twitter’s Retweets/Favourites, Facebook’s Shares, etc. is that it incentivises content to seek-attention; if ‘attention to post’ isn’t related to ‘quality of post’, this disincentivises writing quality posts. – Rather, writing posts for the sake of writing posts is in defiance of the incentives of the social media.</p>
<p>There’s also a danger in ‘everything is an argument’, in a tribalistic viewpoint, where everything must be about politics all the time.. the goal becomes less about ‘finding truth’, having good discussion and asking questions, but instead asking “how do I win? how does our side win?”.<br />
– In that sense, it’s okay that some posts are written which don’t appeal to those outside the author’s in-group. (An echo-chamber, though, where the author &amp; audience never engage/read other viewpoints.. there’s also good cause to be concerned about that).</p>
]]></summary>
</entry>
<entry>
    <title>Recommendation: Rick and Morty</title>
    <link href="http://www.rgoulter.com/blog//posts/narrative/2016-06-12-recommendation-rick-and-morty.html" />
    <id>http://www.rgoulter.com/blog//posts/narrative/2016-06-12-recommendation-rick-and-morty.html</id>
    <published>2016-06-12T00:00:00Z</published>
    <updated>2016-06-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 12, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/media.rick%20and%20morty.html">media.rick and morty</a>
    
</div>

<blockquote>
<p>“What? It’s way existential.” – Cher, describing Ren &amp; Stimpy, <em>Clueless</em></p>
</blockquote>
<p>This is a strong,weak recommendation for Rick and Morty.<br />
It’s not completely outstanding/amazing; but where it is, it’s great, and when it’s not it’s still not bad. (Overall, the start of Season 2 is much stronger than the rest).</p>
<h2 id="without-spoilers">Without spoilers</h2>
<p>Rick &amp; Morty (R&amp;M) is a cartoon, loosely in the spirit of, say, Futurama. Episodic adventures, with sci-fi themes. Loosely, Rick &amp; Morty are bastardised Doc &amp; Marty from Back to the Future.</p>
<p>It’s quite subversive:<br />
It delights in being utterly gross. A lot of the humour is crass, or quite deliberately making the audience uncomfortable. (Family Guy’s <a href="https://www.youtube.com/watch?v=Y9j3heYZAk8">Peter Griffin ‘knee injury’</a> is the same kind of humour).<br />
It’s also subverts tropes &amp; narrative expectations. Usually. – I wouldn’t exactly call the show ‘meta’, but it’s almost as if it plays around with tropes as if they’re as integral to a narrative as its plot &amp; characters.</p>
<p>Often the characters get into quite a mess, it’s emphasised how bad the mess is, then the mess gets worse. Rick’s kindof like a cat-in-the-hat, I guess. – Something I found a bit discomforting about the show, though, at first: you tend to expect that the mess gets cleaned up, that all is restored with the world, that the ‘hidden world’ remains hidden. – R&amp;M doesn’t particularly bother, it doesn’t care.</p>
<p>I can’t say the <em>setting</em> of R&amp;M is as inherently intriguing as, say, “Inside Out”, “Zootopia” or “The Wire”. – It’s sci-fi, Rick has a portal gun to visit other realities; various magic items to present or solve problems. – What’s <em>nice</em> is that the magic is never used as a means-to-an-end, hardly a deus-ex-machina without further problems.<br />
– The <em>problems</em> it presents are quite ‘fun’ in themselves.</p>
<p>So, at times, it’s kindof a filthy show.<br />
And with its massive universe (infinite alternate realities, astronomical number of worlds within the reality), it’s certainly got an “everything is arbitrary” existential bitterness to it. It adores slaying sacred cows, more than it adores anything else.</p>
<p>And yet, at times, it’s capable of being quite sweet.</p>
<hr />
<p>I can’t say it’s a show where it’s valuable for its plot, but just to discuss more specifics:</p>
<h2 id="with-spoilers">With Spoilers</h2>
<p>Some of the episodes are pretty cute.</p>
<h3 id="gods-batteries">God’s Batteries</h3>
<p>I quite liked the “Recursive Other World” theme they use several times.<br />
My favourite was this one:</p>
<blockquote>
<p>You, as a brilliant scientist, make an “electric battery”. It’s actually a mini-universe, in a time-dilation field; you found a planet where you introduced electricity.<br />
This planet produces electricity for themselves, but also produce enough electricity (as a ‘by-product’ of the electric generator you gave them) for their mini-universe to function as a “battery” for you.</p>
<p>Problem: A brilliant scientist finds a way to generate electricity without the by-product. (i.e. your battery loses produces no charge). – They make an “electric battery”. It’s actually a mini-universe…</p>
</blockquote>
<p>– At the end of the episode, after Rick’s visited the battery-planet (and the battery-planet’s battery-planet..; and the battery-planet’s scientist realises the recursion), he asserts that his battery now works. “It’s simple: either I return &amp; find a broken battery [which I dispose of], or I find my battery works.” Shots are shown of the battery-planet’s people working as before, and a very bitter battery-planet scientist.</p>
<h3 id="e-pluribus-unum">E Pluribus Unum</h3>
<p>By far the best Rick and Morty episode was S02E03.<br />
It’s gross. At times not great. Packs a lot of fun questions about some tough issues. And just a little heart-wrenching/sweet. – Kinda like R&amp;M on the whole.<br />
It’s also the one of the few times we see can sympathise with Rick.</p>
<p>Roughly, the sci-fi toy was this:</p>
<blockquote>
<p>The idea of suppressing an individual’s freedom is gross, right?</p>
<p>Wouldn’t a collectivist-system be much better, though? (If all were operated by one collective mind:) People could fulfill the roles they’re best suited to. The world would be at peace. No crime, etc.</p>
<p>Short of that, people are destructive and awful: people easily fight against each other, separating into tribes based on arbitrary, insignificant differences.</p>
</blockquote>
<p>Not exactly a ringing criticism of J.S. Mill,<br />
but I guess what was great about the episode wasn’t its sci-fi parts.</p>
<h3 id="recoverability">Recoverability</h3>
<p>Probably the most striking sci-fi toy R&amp;M makes use of, (apparently the 2nd episode they wrote), was from the episode “Rick Potion #9”. Basically:</p>
<blockquote>
<p>Given an infinite number of alternate-universes, and the ability to travel between them:<br />
If ever you make a bad mistake, you can ‘probably’ find a universe where things are exactly the same as your universe, except: no bad mistake, alternate-you is indisposed. (Chances decreasing to infinitesimally small after some iterations).</p>
</blockquote>
<p>Everything is arbitrary, huh.</p>
]]></summary>
</entry>
<entry>
    <title>Reflection on Haskell Programming</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-06-08-reflection-on-haskell-programming.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-06-08-reflection-on-haskell-programming.html</id>
    <published>2016-06-08T00:00:00Z</published>
    <updated>2016-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June  8, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.haskell.html">programming.haskell</a>
    
</div>

<p>With my free time lately I’ve been tinkering on <a href="https://github.com/rgoulter/expenses-csv-utils">a Haskell project of mine</a>.<br />
Depending on which side of the 80-20 rule you look at, I’d say I’m “about 20% done”.</p>
<p>I love many things about Haskell, but, I didn’t have any proper pet projects written in Haskell.<br />
– The impetus to a Haskell project, I guess, is that for quick/dirty projects Python is a much nicer choice. (Depending on your likelihood of revisiting a project after several months/years, it may be worth considering things like “maintainability” or “ease of refactoring”, where Haskell is a much better choice).</p>
<p>Any language will have drawbacks, and Haskell certainly has some minor ones (like weird record syntax, Cabal-Hell, etc.),<br />
the <em>BIG</em> drawback to Haskell is its pure functions. – You <em>can’t</em> just slap a <code>printf</code> function in your function. (Concepts like laziness also mean that tracing/debugging a function could result in different results than if you don’t).<br />
– The community is a bit mixed: some Haskell folk love Category Theory and some others are amazed things compile; documentation often tends toward academic/unhelpful. There’re many concepts to understand beyond the basics (like Lenses, Monad Transformers (let alone monads, like the State Monad), and potentially things like Template Haskell, Arrows, etc.).<br />
etc. etc.</p>
<p>On the other hand, of Haskell they say “if it compiles, it works”.</p>
<h2 id="first-half-parsers">First Half: Parsers</h2>
<p>The script-ish part of the project parses in some file format, processes this and outputs it as CSV.</p>
<p>For writing parsers from scratch, Haskell (or some ML-family language) is a good choice. I used “megaparsec”, a purported successor to the classic parsec library. “parsec” for “Parser Combinator”.<br />
’cause Parsec is cool, and I hadn’t had much experience writing parsers.</p>
<p>– The file format here is so trivial that (as is) regular expressions would do the trick. (But then I would’ve had two problems).<br />
In any case, I didn’t run into much trouble writing the parser.</p>
<p>It would’ve been better if I’d written unit-tests for the parser earlier.</p>
<p>In this case, the program was so quick/simple that ‘debugging’ wasn’t necessary.</p>
<h2 id="second-half-ncurses-ui">Second Half: NCurses UI</h2>
<p>Okay, so. If it’s not clear that writing this project has been an excuse for “playing with things I’ve not used before”, maybe the choice of a NCurses-base UI gives that away.</p>
<p>Haskell’s <a href="https://hackage.haskell.org/package/brick">brick</a> looked interesting. It constructs/defines UI declaratively. (Loosely comparable to Elm, minus FRP concepts).<br />
– As with most “I’m just learning this” programming, I was able to iterate on some of the sample programs. (During which, I learnt details of the API anyway, so).</p>
<p>I’d say most of the ‘programming’ I did involved writing out types, &amp; types of functions in particular.<br />
Haskell has a value called <code>undefined</code>, which lets you quickly stub functions. (It throws an error if evaluated. Scala has <code>???</code> which does the same thing. I think these are great). – With a type signature, you roughly know whether you can construct the output given the input; &amp; as you implement this, what other functions would be useful.<br />
In order to test anything useful, this is rather bottom-up. The Python hacking I do would be the opposite.</p>
<p>There was one case where code compiled, but didn’t pass its unit tests. – Though, I’d left a comment saying “To Be Implemented: (some computation)”, and this computation was what was needed for the test to pass.</p>
<p>– Only a few times did I ever think “I wish I could put a printf there”.<br />
In one case, I was using unsafe pattern matching (e.g. assuming an input list had at-least 2 elements), &amp; this didn’t hold. (I should’ve either relaxed this assumption, or made it so that the types I used explicitly held this assumption). – Again, I’d left a comment somewhere critical saying “To Be Implemented..”.<br />
In another, my UI was receiving a new input, but not updating the UI components to show this.</p>
<p>What’d I think of NCurses/Brick? Not bad. The trickiest part seems to be keeping the event-handling function to a maintainable size.</p>
<h2 id="the-next-80">The Next 80%</h2>
<p>Sure, I’d rather maintain a Haskell project than a Python project. But that Haskell’s compiler is so good allows you write pretty unclear code, too.<br />
– I’d certainly like the code to be prettier.</p>
<p>I’d also expect to iterate on the UI to see if it could better fit how I’d like to use it, but anyway.</p>
]]></summary>
</entry>
<entry>
    <title>Organising Things</title>
    <link href="http://www.rgoulter.com/blog//posts/meta/2016-06-07-organising-things.html" />
    <id>http://www.rgoulter.com/blog//posts/meta/2016-06-07-organising-things.html</id>
    <published>2016-06-07T00:00:00Z</published>
    <updated>2016-06-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June  7, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/organising.html">organising</a>
    
</div>

<p>From the wisdom I’ve picked up so far:<br />
Computer Science is about managing complexity.<br />
Programming is about breaking larger, complex problems down into smaller, solveable problems. (Which involves Naming, Abstracting, Composing).<br />
The best program is no program; second to that, the best program is a small a program as possible.<br />
When coming up with a data-structure/algorithm for a problem, it helps to consider what operations you often do, and to make these as cheap as possible.<br />
The tools you use are related to how you think about the problem, to how you model the domain.<br />
The more specific a problem you solve, the more ‘elegant’ your solution can be.</p>
<p>I’d like to give some considerations in this post about organising things.<br />
– Maybe it helps to consider that, in the above: “program”, “code”, or “tool” work interchangeably.</p>
<p>At the moment I’m writing a program to track/organise where I’ve spent my money[1]. Part of this ‘organising’ would involve categorising/tagging expenses. (e.g. “Spent 100 on Steam” prob’ly not as essential as “Spent 10 on phone top-up”).</p>
<p>In a sense, “organising stuff” is rather an ubiquitous problem. (Wisdom from my Algorithms professor: algorithms are boring, but algorithms are everywhere). – Here I’d like to consider just the organising for consuming content:</p>
<h1 id="webpage-bookmarks">Webpage Bookmarks</h1>
<p>There are basically two ‘operations’ you need when dealing with links:</p>
<ul>
<li><p>storing a bookmark to a page, with some meaningful information,</p></li>
<li><p>finding this page later.</p></li>
</ul>
<p>If you were to store every webpage you ever read, with all the meta-information you’d later value, then your “organisation problem” is solved. The trouble is, or the trade-off you’d have to pay to get this, is it’d be an expensive chore to bookmark literally everything. (Also, it’s tough to know <em>what</em> you’ll find interesting about the link much later on).</p>
<p>– My current ‘approach’ to this is basically only saving bookmarks after I find I’d refer to “something I read months ago”. That’s a somewhat expensive ‘cache-miss’. (“searching browse history” would work for this if you only ever use one computer/OS/browser..). (As well as saving “obviously interesting” things, like programming tutorials, or things that’d’ve been useful in previous arguments).</p>
<h2 id="tools-for-links">Tools for Links</h2>
<p>The ‘tools’ helping me with links at the moment:</p>
<ul>
<li><p>Pinboard - Let’s you tag bookmarks.</p>
<ul>
<li>Secondarily, if you search ‘globally’ for tags, it’s a nifty way for discovering what links are popular among tags. e.g. <code>t:haskell</code> for popular articles about Haskell.</li>
</ul></li>
<li><p>Pocket - Let’s you enqueue links as “to read later”.<br />
(Although I’m kinda bad at the “reading later” part).</p></li>
<li><p>Facebook/Twitter - While really poor at the archival stuff, social media (and to a lesser extent, messaging apps) is nice for content discovery. (Albeit, I find it’s rather tribal, much of the time). – This way benefits from “Share generously, bookmark conservatively”.</p></li>
<li><p>RSS Reader - For the blogs which do have RSS feeds. Unfortunately, in order to prevent other sites copying blog content, many blogs won’t include the full blogpost content in their RSS feed, which somewhat defeats the purpose. (Scraping scripts can mitigate this, but scraping blogs is a cat-and-mouse game).</p></li>
</ul>
<p>– There’re other tools/techniques people can use (e.g. HN/Reddit, or sharing aggregates of links on a blog), but the above works for me. (Twitter in particular, while full of tribal garbage fires of cancer, is also pretty good at content discovery; stuff which is popular on HN/Reddit can find its way onto Tweets, too).</p>
<h2 id="tags-tag-atrophy">Tags &amp; Tag Atrophy</h2>
<p>Pinboard uses ‘tags’ for organising things, rather than hierarchical categories.<br />
Tags are less constrained than categories. (Bookmarking by folders/subfolders is more disjoint, say). And you could emulate categories using tags if you’d like.</p>
<p>– The main disadvantage to tags is the ‘atrophy’.<br />
I find there’s a bigger difference between what tags you’d think something you stored would have compared to what category you’d expect to find it in. (I’d think there’s some atrophy to categories, too, but not as quickly, not as badly).<br />
– Pinboard does let you ‘organise’ through your collection (or subset of) to quickly edit through your bookmarks; that strikes me as a useful tool.</p>
<h1 id="books">Books</h1>
<p>With books, the problem isn’t particularly “how can I recall what I’ve read” (although this is useful for non-fiction); it’s “how do I organise what to read next?”.<br />
– This’ll vary depending on how you read (&amp; seek books to read). Maybe it’s ok to consider a TBR (or even “want to read”) pile as large/unsorted. But “what’s a book I’d enjoy” is a similar question. – For myself, I recently got around 30 books from a Kobo sale, whereas before I’d usually not keep a TBR pile of more than 2-3.</p>
<p>The Kobo eReader apps ought to have bookshelves. (IIRC, the iOS version does, the Windows Phone version doesn’t). Bookshelves do the job as well as can be hoped, although adding/removing books to shelves can be quite clunky/awkward.</p>
<p>I like GoodReads; at least for rating books/reviewing.[2]<br />
– GoodReads lets you mark a book as “Want to Read”, “Currently Reading”, or “Read”. – I’d consider “TBR” as “book I own” (or “book I’ve been issued from the library”), which fits somewhere between the first two. (“DNF” is another state, somewhere between the last two). – GoodReads does let you add arbitrary shelves, so it’s common to emulate these states as shelves.</p>
<p>In terms of discovery, both vendors like Kobo and review sites like GoodReads can (try to) compute/guess what books you might like, based on what books you’ve liked already. – Without information like that, it’s hard to consider tools which could improve <em>that</em> problem.<br />
– I guess, drawing analogy to finding interesting links on Pinboard: for fiction, if users tagged books by their tropes, then you could search a trope to find similar books. (Sounds <a href="http://www.mayarodale.com/2016/04/27/the-surprising-reason-you-cant-find-the-right-romance-novel-and-how-one-librarian-is-fixing-it/">kinda like this</a> I guess?).</p>
<hr />
<p>[1] “Writing my own” is perhaps NIH Syndrome; but other solutions I’d tried for this didn’t stick.</p>
<p>[2] …And just like LinkedIn, I’m not drawn to visit it unless I’ve some action to perform on the site. “Glorified Book Spreadsheet” is one way to summarise this common usecase of GoodReads.</p>
]]></summary>
</entry>

</feed>
