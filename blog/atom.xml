<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2020-02-28T00:00:00Z</updated>
    <entry>
    <title>Early Impression of Elm</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2020-02-28-early-impression-of-elm-lang.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2020-02-28-early-impression-of-elm-lang.html</id>
    <published>2020-02-28T00:00:00Z</published>
    <updated>2020-02-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 28, 2020
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>Recently I wrote some Elm-lang code as part of a casual side-project.</p>
<p>The Elm program was simple, though non-trivial.<br />
The program was a UI for making notes from emails. The Elm program presented a list of emails for the user to select, and let the user CRUD a note for the selected email.</p>
<p>Some changesets: - https://github.com/rgoulter/simple-email-data-tool/pull/1/files Initially adding the Elm program with Travis-CI config, RSpec spec with Capybara, and the Elm program. - https://github.com/rgoulter/simple-email-data-tool/pull/5 Changing from a <code>&lt;select/&gt;</code> to a <code>&lt;table&gt;</code> for one of the widgets. (I was surprised by how easy this change was). - https://github.com/rgoulter/simple-email-data-tool/pull/6/files Adding keybindings to the input. - https://github.com/rgoulter/simple-email-data-tool/pull/8/files Adding date filtering, using a third-party pure-Elm library.</p>
<h3 id="where-im-coming-from">Where I’m Coming From</h3>
<ul>
<li><p>I’d be lying if I said I was very experienced with front-end code. e.g. I can’t think of any big mistakes I’ve made and things I’ve learned from said mistakes. The basics are straightforward; and a deep understanding of front-end web development requires an appreciation for all aspects of how a web browser works, which isn’t easy.</p></li>
<li>On the continuum of ‘liberal programmer’ (“if it breaks, just fix it”; likes Python, Ruby) to ‘conservative programmer’ (wants to know if it works at compile time; likes Haskell) I’m towards the ‘conservative’ end.
<ul>
<li>I’m inclined to like Elm.</li>
</ul></li>
</ul>
<h3 id="what-i-didnt-like-about-elm">What I Didn’t Like About Elm</h3>
<ul>
<li>I was surprised that some things in Elm were (much) harder than they would be in JavaScript.
<ul>
<li>I wasn’t able to figure out how to nicely access the query parameters of the URI. (I ended up getting something which could access the query parameters at a specific path; but I couldn’t figure it out for any arbitrary path). This is an example of “easy in JavaScript, hard in Elm”.
<ul>
<li>While I found this frustrating, I think the Elm-lang documentation makes it clear <em>why</em> it makes this kind of thing ‘hard’.
<ul>
<li>Elm is all about removing footguns. In this case, easy access to the window’s URI query params would introduce impurity; so, to access window’s URI your Elm program also need to ‘manage’ the URI.</li>
</ul></li>
<li>But I would anticipate further “of <em>course</em> that wouldn’t be straightforward in Elm” when considering Elm as a language.</li>
</ul></li>
</ul></li>
<li><p>e.g. I wouldn’t wanna write this blog website’s page with Elm, since the Elm runtime is JavaScript; so if I used Elm then it wouldn’t be accessible to users with JavaScript disabled.</p></li>
<li><p>I still have to look into idioms or idiosyncracies about combining modules together. I’m not sure I ‘get’ it, or if the approach I took was stupid or fine.</p></li>
</ul>
<h3 id="what-i-found-interesting-about-elm">What I Found Interesting About Elm</h3>
<ul>
<li>The Elm Architecture. The restricted nature of Elm’s code means that, while code still doesn’t magically end up well designed, it still ends up being somewhat (or close to) idiomatic.
<ul>
<li>My experience with GUIs other than Elm has been with languages that allow you to more/less update the code’s state from anywhere.</li>
<li>With Elm, you have a ‘model’ Algebraic type, a ‘message’ Algebraic type.
<ul>
<li>Anything the Elm program needs to care about goes in its model.</li>
<li>Any ‘action’ that might happen in the Elm program is represented by a message.</li>
<li>The only place the model gets changes is in its update function.</li>
<li>The only way effects happen is through messages.</li>
</ul></li>
<li>The question becomes “what nouns, what verbs do I want in this system? What is each noun? What does each verb do?”.</li>
</ul></li>
<li>Because of that explicitness and lack of mutation, edge cases (and race conditions) are surfaced.</li>
</ul>
<h3 id="what-i-liked-about-elm">What I Liked About Elm</h3>
<ul>
<li><p>It’s not JavaScript. Programming in JavaScript is .. fine. But I don’t particularly like JavaScript. It feels very blobbish.</p></li>
<li><p>95% of the time it’s a joy to write in Elm. (Most of the time it’s not a joy to write in are the times when you’re trying to do something which would be easy to do in JavaScript. Or with impurity like time/randomness).</p></li>
<li><p>Elm mostly has the “if it compiles it works” aspect to it.</p></li>
<li>Elm programs/modules are self contained and small.
<ul>
<li>Everything you need in a module must be explicitly imported.</li>
<li>The lack of mutation means things are much more explicit.</li>
</ul></li>
<li><p>Elm’s record syntax is nicer than Haskell’s.</p></li>
</ul>
<h3 id="my-development-experience">My Development Experience</h3>
<ul>
<li><p>I mocked the API that my Elm program would call with simple Ruby’s Sinatra servers.</p></li>
<li><p>I wrote RSpec specs which would compile the Elm program before running Selenium tests against the Elm program.</p></li>
<li><p>My program wasn’t sophisticated enough to need much development work on components individually. But I did find it easy enough to use “elm reactor” (compiles + serves the Elm source) to focus on one component at a time.</p></li>
<li>I developed my Elm program using Emacs. The most popular elm-mode gave me syntax highlighting. I didn’t feel the need to make use of elm-mode’s other IDE features.
<ul>
<li>For code completion: I developed my Elm program on Windows. There’s an Elm language server. Unfortunately, I think because Windows is slow at launching processes, I found it was too slow for me to use with Emacs on Windows.</li>
</ul></li>
<li><p>I didn’t make good use of it, but there is support in universal-ctags.</p></li>
</ul>
<h3 id="would-i-use-it">Would I Use It?</h3>
<p>After having used it for a side-project, without the burden of needing to ship something reliable by some deadline:</p>
<p>Yes, I’m quite happy with the experience.</p>
<p>Obivously I’m interested in liking it, though; and this wasn’t a high-risk project, so:<br />
What situations/cases would I not recommend using it for?<br />
- Projects which benefit from a rapid prototyping/delivery (e.g. code maintainability/quality can be traded off) by an experienced team which lacks any experience Elm. - Projects which already show evidence of some kind of a “lava flow” antipattern, or projects where using Elm is likely to lead (or contribute) to an anti-pattern like this. - Projects where Elm is chosen without consideration for <a href="https://mcfunley.com/choose-boring-technology">‘Choose Boring Technology’</a>. - If I were given responsibility to maintain some front-end application code which was poorly written in JavaScript using ReactJS: - While it’s possible to interop Elm and JavaScript, I think the complexity of the same maintainers mixing the code would outweigh benefits of using Elm. - etc.</p>
<p>I think websites would be better maintained if they were developed with the discipline that Elm does a lot to help.</p>
]]></summary>
</entry>
<entry>
    <title>On Agile</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2020-01-25-on-agile.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2020-01-25-on-agile.html</id>
    <published>2020-01-25T00:00:00Z</published>
    <updated>2020-01-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 25, 2020
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>“Agile”, “Scrum” and “Kanban” all get a rather bad reputation among developers on the internet. They seem to work well for <em>some</em> teams, but for others these are <a href="https://media.defense.gov/2018/Oct/09/2002049591/-1/-1/0/DIB_DETECTING_AGILE_BS_2018.10.05.PDF">“waterfall or spiral development in agile clothing”</a>.</p>
<p>At worst, teams take tasks off a todo list however they would anyway and call it ‘agile’.</p>
<p>At best, maybe the differences can be explained as “‘agile’ works well for some kinds of development work; but not well for others” (I’m not convinced by this as-such) or “‘agile’ works well for good teams. For good teams, anything would work well”. (Which wouldn’t mean ‘agile’ is useless; so much as, it’s not a silver bullet).</p>
<p>But <em>part</em> of the disagreement, I think, comes from the ol’ “people using the same words to refer to different things”. Especially people with different understandings, let alone experiences.</p>
<p>I’d come across the terms ‘kanban’ and ‘kanban board’ for years before I picked up a book which discussed kanban. I was surprised to see the idea of a kanban board was related to principles: visualize the workflow, limit work in progress.<br />
“Either a worker is idle or a task is idle”. The idea is to maximise ‘flow’ of tasks. Limiting work in progress and visualizing it on a board ought to help identify bottlenecks, which can be addressed.</p>
<p>Beyond that, there are all sorts of details as to tactics and techniques for implementing this. But the basic idea sounds ‘obvious’ and intuitive and, for some workflows, a good idea.</p>
<p>I, uh, don’t know if a ‘kanban board’ can properly be called a ‘kanban board’ if these principles aren’t followed. I suspect places which just use the column-of-tasks aren’t likely to follow “limit WIP”. But I suspect most places which don’t follow “limit WIP” are still happy to say they “do kanban” and are agile.</p>
<p>In any case, it seems unprofessional that so many development teams would be using ‘kanban’ or ‘scrum’ but without following (or knowing) the key ideas. I think this is because agile <em>sounds</em> hip.</p>
<hr />
<p>Being surprised about ‘kanban’, I’ve decided to read up on ‘scrum’. (The one with ‘sprints’ and stuff).</p>
<p>At a glance, it seems to have the same “oh <em>that</em> makes sense” as kanban, as <em>well</em> as “…because of these underlying values”.</p>
<p>But the book I was reading pointed out: <em>of course</em> if the team doesn’t have psychological safety / trust / respect for each other, then ‘scrum’ isn’t going to work.</p>
<p>I’d guess there’s still value in following a process in order to try and surface problems. But surely a political and unsafe team isn’t going to identify or address problems easily.</p>
<p>I think, then, the hype over ‘agile’ is a bit misplaced.<br />
Not because the ideas around it are worthless so much as the heavy-lifting of effective teams seems to be the psychological safety aspect.<br />
From there, I think the ‘agile’ ideas make sense for a reasonably wide variety of work. (I imagine obstacles like: e.g. a focus on small improvements may obscure long-term strategic mistakes).</p>
]]></summary>
</entry>
<entry>
    <title>On the 2019 UK Election Results</title>
    <link href="http://www.rgoulter.com/blog//posts/politics/2019-12-14-on-2019-election-results.html" />
    <id>http://www.rgoulter.com/blog//posts/politics/2019-12-14-on-2019-election-results.html</id>
    <published>2019-12-14T00:00:00Z</published>
    <updated>2019-12-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 14, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>I found these two comments interesting: 1. Twitter Thread https://twitter.com/LukePagarani/status/1205487970897342464?s=20 What I get from this is: The perspective is a leftist voter discussing that people he met didn’t value the same things that Labour/Corbyn did. Such voters valued their national identity, and so really didn’t like Corbyn. 2. Quillette post https://quillette.com/2019/12/13/britains-labour-party-got-woke-and-now-its-broke/</p>
<p>I find it interesting that these two comments more/less agree on many things. – I think they look at “people don’t like Corbyn because they love their country” differently, but that makes how much narrative they share that much more interesting to me.<br />
(Bonus: compare the above Tweeter’s RT of this with the quotes from the article: https://twitter.com/SoysalOzlu/status/1205526147288707074?s=20)</p>
<p>I think the two comments also highlight the way the different moral foundations (of Moral Foundation Theory) are emphasised. “Britain should take care of British people first/foremost” vs “all people are equal” rings true for loyalty and fairness moral foundations respectively.</p>
<p>I remember seeing a comment I saw discussing that the Brexit vote is best justified in terms of a question of identity. (If it were about immigration or economics or whatever, then there would be other more effective measures to reach these ends).</p>
<p>It reminds me of <a href="https://www.youtube.com/watch?v=LJKXJNM3W-c">Stephen Fry at the Munk Debates</a> (at around 4:30) saying that he’s concerned “the greatest human failings is to prefer to be right, than to be effective”. – I don’t interpret this to mean that he’d prefer to be effective at what’s not-right. I interpret this as saying that it’s wrong to focus on symbolic value over more effective results.</p>
<p><a href="https://meaningness.com/metablog/virtue-court">Meaningness’ Court of Values and Bureau of Boringness</a> is a fun play on the problem this can present. The problem is, much of politics today is performance towards showing the right virtues; this distracts or counteracts ‘boring’ solutions to problems. – One (dumb, but fun) suggestion is to allow people one vote towards either a ‘boring’ serious court, or towards a mostly-powerless court which decides what values people should be rewarded/punished for showing.</p>
<p>I see concerns on Twitter about how awful the implications of this result are. (My impression is that these come from the same group as “it’s racist to vote for the options I don’t like”, which isn’t persuasive). I’m also under the impression that these worries still wouldn’t be enough to sway voters! As in, the symbolic value of “our national identity” apparently matters a lot!<br />
– I think the flipside is the same point, though. My understanding is Labour’s absymal result in these elections is the best they could do in the situation. But: if it is the case that the winners won the vote because of a symbolic policy: surely it would be reasonable to appeal to the voters’ symbolic values to support your cause?</p>
<p>It’s probably a bit too much of a simplification, but it’s still tempting to match “voted for Brexit, despite probable material harm” and “won’t say ‘my country is great’, despite likely losing for that” as matching “would rather be right than effective”.</p>
]]></summary>
</entry>
<entry>
    <title>First Impressions of Halo Reach</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2019-12-05-first-impressions-of-halo-reach.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2019-12-05-first-impressions-of-halo-reach.html</id>
    <published>2019-12-05T00:00:00Z</published>
    <updated>2019-12-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  5, 2019
    
        by richardgoulter
    <br/>
    
    Tags: 
    
</div>

<p>So the Halo Master Chief Collection made its debut on Steam with Halo Reach.</p>
<p>This seems to be in line with Microsoft making money based on the brands they’ve built up before. e.g. They’ve re-released Age of Empires II in an “HD Edition”; and recently re-released Age of Empires II in a “Definitive Edition”. (That said, in addition to graphical and quality of life enhancements, the games also included new game content). Similarly, Age of Empires 1 saw a “Definitive Edition” re-release; although this was initially only through the Microsoft Store. (Also “not just on the Microsoft Store”: the Halo mobile games (Spartan Assault/Spartan Strike) and a Definitive Edition of Halo Wars; although Halo Wars 2 remains only on the Microsoft Store). Age of Mythology had also seen an “Extended Edition” (although the new civ wasn’t very good), and Age of Empires III will receive a Definitive Edition, too.<br />
(Age of Empires: Online being forgotten, apparently).</p>
<p>I did play Halo 1 on the PC way back when.<br />
Just the single-player game.<br />
But the times I’ve touched Halo since then was with its Spartan Assault and Spartan Strike. These are twin-stick shooters; so in terms of “when were we gonna get Halo on PC?”, they “didn’t really count”.</p>
<p>Having played through most of the Halo Reach on PC, I get the impression that the Spartan Assault/Strike give off a fairly good emulation of what Halo gameplay is going for. – There seems to be an emphasis on challenge-based or score-based completion.</p>
<p>See, uh.<br />
Halo is cool. It’s a militaristic sci-fi shooter. (Halo’s impact so pronounced that it defined the new-school only-two-weapons-at-a-time, cinematic shooters).<br />
Other sci-fi shooters aspire to be Halo the same way that fantasy fiction aspires to be Lord of the Rings.</p>
<p>But, I’m not sold on the base gameplay itself. Or maybe I was spoiled by Titanfall 2. <a href="https://www.youtube.com/watch?v=L5uaeT_5HpQ">This outstanding review by Shammy sold me on it</a>.</p>
<p>Halo Reach’s story is just unengaging.<br />
Maybe it wants to be Call of Duty. Everything is big and exploding and swinging from roaring success to absymal failure and the player really has no agency over this or any sense of scope. It’s kinda hard to care. (But maybe that’s ’cause it’s not the first game in the series and there’s story in the other ones and stuff).</p>
<p>The gameplay is more appealing.<br />
I’m not too familiar with the rules or the game logic. The human guns are good at killing unshielded enemies, and the alien guns are good at taking down shields. You have a shield, so you either gotta kill fast, or hide behind cover. The game can be pretty patient with you, which really emphasises the “ludo-narrative dissonance” where the story is saying it’s the end of the world, but the game isn’t advancing while there’s one weak enemy unit running around waiting to be killed. – It kinda feels sluggish to use just the human weapons to kill the enemies, but on normal difficulty the game lets you do it. (Whereas, seems like Bioshock 1 really emphasised its paradigm-shift of ‘zap them then hit them’).</p>
<p>I think where the game is fun to play (at a casual level of “on normal difficulty, not interested in score”) the challenges setup in the arena. Some of the time the enemies are easy to kill with weak weapons. Sometimes the enemies are harder to kill, with weapons or abilities to kill you in one or two hits. Sometimes there are enemy vehicles you can hijack.</p>
<p>I tried playing the controller-centric game with a controller at first. I lasted about five minutes before deciding that keyboard and mouse was just that much more comfortable.</p>
<hr />
<p>Having finished the game, I’d add:<br />
The levels are quite distinctive.</p>
<p>I think the story is more interesting if it’s spoiled going in.<br />
It’s apparently going for the same kindof plot what Star Wars’ Rogue One is going for: all the heroes die in the story, but after they manage to get the McGuffin that is humanity’s last hope to the remaining good guys. Rogue One ends by passing the Death Star plans to Princess Leia, blending into the Star Wars movie. Halo Reach ends with where the first Halo game starts.</p>
<p>I want to like this game. I can chalk my disliking it up to me being bad at it. But, from here I don’t quite get why people like the Halo series so much.</p>
<p>I wonder if remakes like this justify better engineering effort. It makes sense for the first release of a game to have an extreme “just get it done” mentality where maintainability isn’t a consideration. But for content with strong cultural cachet which can be milked for money by improving graphics every few years, surely it’s more viable to invest in maintainability.</p>
]]></summary>
</entry>
<entry>
    <title>Consumption Driven Organising</title>
    <link href="http://www.rgoulter.com/blog//posts/2019-11-17-consumption-driven-organising.html" />
    <id>http://www.rgoulter.com/blog//posts/2019-11-17-consumption-driven-organising.html</id>
    <published>2019-11-17T00:00:00Z</published>
    <updated>2019-11-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 17, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>I’ve been meaning to try and write down some things about the way I organise things.</p>
<p>I’m still improving, trying to keep the stuff that ‘works’ and ditch the stuff which I’m not consuming.</p>
<p>Anki: I’ve been using Anki for learning Vietnamese vocabulary. Yeah, one tip is to use it on a smartphone; that really reduces friction for revising the sets. I still don’t manage to do it quite every day, but this is almost a metric of how mentally rested I am. (If I’m too stressed or tired, then I won’t be doing my Anki).<br />
What I wish I knew: I find it’s still a bit easy to ‘game’ by remembering it within the first day, but forgetting it after that. (Anki cards start out in a “learning” state where you’re not expected to recall the note. Once a card is learned, not-recalling is bad). So, I adjusted the learning interval. Downside: it can take a long time to ‘learn’ the card, but my impression is that things which do get learned are more solid.<br />
I’d also recommend: feel free to just ‘reset progress’ of cards you get wrong if you have too many cards to revise.<br />
– One ‘motivational technique’ for going through the Anki stuff is: “revise cards until you get one wrong”. (I find, even if I’m tired out of my ass, that I can go for surprisingly long before getting one wrong. But then you’re almost in a flow and you’re fine with “just doing one more”).</p>
<p>Work notes and stuff: I still like using five colours, especially for worklog stuff.</p>
<ul>
<li>I don’t particularly value the notes for a long time; but it’s useful to get concerns, questions, plans, notes out of my head. (So maybe I could use that kickstarter book which works with the Pilot Frixion pens for my work).</li>
<li>What I like doing: using one ‘book’ as kindof a personal sprint / kanban planner; and work notes on refill paper separately.
<ul>
<li>Each sprint, I write up a table of tasks, with columns for each day of the sprint. Kindof like a done-list / Gantt chart kindof thing. (This helps visualise if tasks are taking too long; as well as visualise progress made).</li>
<li>Aside from the table, I’d rule sections for each day. In each section writing down: what I plan to do that day; then at the end of the day: what I did, and what ‘obstacles’ I faced. The “what I did” should contain no negative qualifiers. e.g. “I struggled through X” is worse than “I did X”.</li>
<li>Ideally start each sprint on a fresh page; ideally, each sprint/week covers a double-page spread.</li>
</ul></li>
<li>For work notes:
<ul>
<li>While I don’t really like keeping notes for a long time, I like the notation of using a box for ‘task to be done’. (Then loosely: ‘//’ for “done”, ‘/’ for “enough”, ‘X’ for “not gonna do it”, ‘&gt;’ for “task rewritten later”, etc.).
<ul>
<li>Write boxes like this on the margin. So then it’s super quick/easy to see what ‘tasks’ might need to be addressed. (You could even follow a discipline of rewriting tasks each new page / day).</li>
<li>Margins can also be used to timestamp; e.g. ‘<span class="citation" data-cites="1030h">@1030h</span>’.</li>
</ul></li>
</ul></li>
</ul>
<p>org-mode: It’s still my go-to place for organising stuff. - Tasks in org-mode; org-agenda: I’ve been pretty sloppy about this. I like the rules of thumb: “if it’s right, it will work effortlessly”, “tasks need to be well-organised, reference/notes don’t”. (“capture notes/inputs in as few places as possible” is also nice). - Tasks and Agenda: maybe I need to better organise the ‘TODOs’/tasks. Or maybe the right kinds of tasks for the right times/places. But I’m not really making use of it. - Checklists: one nice use of org-mode is it can be easy to copy-paste a checklist. I found this was useful for me for the start of the day, it would control the distraction of things I needed to do. - Reference: I’ve heard “zettelkasten” is to ‘reference’ what “getting things done” is to TODO lists. AFAIU, ‘zettelkasten’ is about keeping atomically-small reference notes, and linking between the different cards. I think one effect of trying things this way is to make it much easier to use/read the zettels when writing a zettel. I’ve started trying this with org-mode.</p>
<p>A thought which comes to mind is that: this organising is an attempt to save time, hopefully in a way that spending time early saves time later. For a lot of computer / developer stuff, the baseline for how long it takes to find is “google search it”. My experience is: if I’ve googled it before, then I can kinda remember what I searched for and navigate the results better. The best ‘cache hit’ is, from experience, remembering/knowing it.<br />
Anki tries to facilitate the remembering/knowing it. The best criticisms I’ve seen are that: it’s not that Anki doesn’t work, but is it worth doing? If you would benefit from knowing it, you would encounter the stuff frequently enough anyway. (I think this is why med students and language learners benefit. With languages, you don’t know “You Ain’t Gonna Need It” for low-frequency words).</p>
]]></summary>
</entry>
<entry>
    <title>The Witcher 3</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2019-11-03-the-witcher-3.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2019-11-03-the-witcher-3.html</id>
    <published>2019-11-03T00:00:00Z</published>
    <updated>2019-11-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November  3, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>There’s a line from the recent Avengers movie going around: Hero: “You took everything from me!” Villain: “I don’t even know who you are”.</p>
<p>This reminded me I’d experienced a moment just like that when playing The Witcher 3.<br />
It’s a moment which I think gives a good summary of what the overall experience of playing The Witcher 3 was like. (Not the ‘best’ moments, but overall anyway).</p>
<p>Some character ambushes you at some point as you enter some town, saying “there you are you traitor” or whatever.<br />
But since you’re way over-levelled at this point, the fight lasts about as long as it takes you to notice the person.</p>
<p>I google searched the ambusher’s name, which led to the wiki page which described the earlier encounter with the character. (The ambusher was angry that I’d told the royal guards where their bandit hideout was, after the bandits let me go after they caught me in a trap when I was investigating some thing or other).</p>
<p>At best: it’s a neat encounter. It shows the game had some scripted cases where the consequences for the action play out <em>way</em> after you make the decision. (Which makes for a much more immersive role-playing experience). There’s also a rich world-building to the encounter: your actions matter and have consequences; it’s as if the characters exist and act outside of your interactions with them.<br />
At worst: The Witcher 3’s broad appeal / accessible gameplay lends most of the game to a “follow the quest marker, do the thing” without paying much attention. And the game is so long that you’ll forget details here and there.</p>
<p>Though, I wouldn’t pick it as an interesting example of an interaction which was an important surprise, or one which made me think. But the Witcher 3 does have moments like.</p>
]]></summary>
</entry>
<entry>
    <title>Hitman 2 and its Difficulty Curve</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2019-10-28-hitman-2-difficulty-curve.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2019-10-28-hitman-2-difficulty-curve.html</id>
    <published>2019-10-28T00:00:00Z</published>
    <updated>2019-10-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 28, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>I’ve been playing the recent Hitman 2 quite a bit.</p>
<p>I never played the earlier Hitman games, but from comments I’ve seen in YouTube videos, it seems the situation is a bit analogous to the Tomb Raider series: for one, the recent games re-use the same titles as earlier games. (There’s a “Hitman 2” which was released in 2002; which is similar to how there are two games called “Tomb Raider”). But it seems that the recent games in each series are different enough from the earlier games, and you get some people bragging in a kind of “I’m so hardcore I love the early games and the new ones are bad”.</p>
<p>Well, I enjoy Hitman 2.</p>
<p>The criticisms I buy are: - Although the game is Single Player only, the game requires you to be online all the time. Presumably this is to support integrity of the scoreboards. (I don’t think anyone cares about the scoreboards). The most pragmatic concern here is: the game isn’t going to be playable in 10 years or so. - An interesting criticism I kinda buy is that the levels in these games all stick to the same formula, whereas levels in the older games had more variety to them. - And, uh, the more embarrassing criticism is just how sloppy the maintenance of the game seems to be. They added a <a href="https://www.youtube.com/watch?v=8ArrPgs7z-Y">‘concealable shotgun’</a> that the player could start the game with; but it was quite buggy. When starting the level, it wasn’t ‘concealed’ at all. (Did they know it didn’t work and release it anyway? Or did they not know? Or does it actually work in some situations, but not others?).</p>
<p>These problems aside, I think the game is still a fun game. I cannot think of other games which have level designs with the amount of replayability as is inherent to Hitman 2. You start each level overwhelmed by how little freedom you have, and after exploring the level a bit have a sense of domination over the non-playable characters in the game.</p>
<p>I saw some interesting comments about Hitman 2’s rating system:</p>
<p>Hitman 2’s rating system is uncreatively ‘binary’:<br />
Currently the game ‘rates’ a playthrough of the level ‘Silent Assassin’ if the player finishes the level without being spotted doing anything bad, and no bodies are found. (With some exceptions like: it’s okay if the bodies of the level’s targets are found if they were killed in an accident, or by poison).<br />
There are score points lost for: taking a long time, or for killing non-targets, etc. but no one really cares about the score. The important rating is getting ‘Silent Assassin’.</p>
<p>I think the levels are designed in an accessible way.<br />
You can follow game-provided checkpoints that provide a paint-by-numbers style of killing the target. (This is along the lines of: the target wants to meet in private with the chef. Here’s the chef; so, grab his disguise, then meet the target, then kill the target in private).<br />
Once you follow each of the game-provided walkthroughs, you will have navigated your way around most of the map in various disguises, which helps you get to know the map.<br />
(Without the game provided walkthroughs, there are still characters who you can overhear e.g. “gee, the boss wants to meet with the chef in private, but the chef is feeling sick over there”).</p>
<p>This is nice, but the rating of ‘Silent Assassin’ or not is still quite ‘binary’.<br />
<a href="https://www.youtube.com/watch?v=a3edO5zHDos">TheKotti provides an example</a> of a ratings system for stealth style games which is more adaptive in nature. Rather than punishing the player for a mistake, it would be more interesting to have a ‘threshold’. This would enable dynamics like: if you make a mistake (e.g. get spotted), you can still play and get a good rating; but you have to be more careful.<br />
A ratings system like this would also measure the difference between “didn’t get spotted, because you knocked-out everyone in the map” and “didn’t get spotted because you skillfully moved around the map”.</p>
<p>As in, the nice thing about this is: as a beginner player, there’s a clear measurement for an incentive to get incrementally better. The current rating system has ‘cliffs’. (Getting spotted means “not silent assassin”, which is the same rating as run and gun).</p>
<p>It would also avoid some weird ‘quirks’ about the current rating system.<br />
e.g. currently you can set of the alarm as many times as you want, knock out as many people as you want, even ‘shoot’ people as many times as you want; so long as you don’t get spotted, it’s ‘silent assassin’. Whereas, if you get spotted even once (because you walked somewhere you weren’t supposed to be), it’s not ‘silent assassin’. Or if you use a sniper rifle and shoot the target from a distance, it’s also not ‘silent assassin’ (if the body gets found).</p>
<p>This would probably also resolve another problem with Hitman 2’s rating system: that it doesn’t measure skill for highly-skilled play.<br />
Currently, the hardest thing to achieve which is measured in Hitman 2 is getting a Silent Assassin rating without using any disguises on the Master difficulty. (Master difficulty restricts the player to saving only once, has a few more camera/guards. As I understand it, it essentially means you discover a good route on Professional difficulty, and execute it on Master).<br />
There are some challenges players in the community will try which are harder than this: e.g. silent assassin without using disguises, killing the targets wtih a loud weapon. But the game doesn’t measure this explicitly.</p>
<p>Recent changes to the game have made it more accessible to new players (which is great imo).<br />
One item they added was a James Bond style electrocution phone. An ‘electrocution kill’ counts as an ‘accident’, so it can be used for Silent Assassin. This makes it quite easy to get Silent Assassin. (Experienced players snob this; but I liked the argument that it’s more interesting to have items which are actually useful, rather than everyone using the same loadout for every level because the items are all lousy). Obviously, getting Silent Assassin when using such an overpowered item isn’t super impressive. But the player still needs to be sneaky killing the other targets.</p>
<p>So: that the game doesn’t ‘measure’ between high-skilled plays, and the game is making it easier to reach the highest-measure of skill in the game is unrewarding to the kinds of players who play Hitman long enough to get very proficient at it.</p>
]]></summary>
</entry>
<entry>
    <title>Netflix's Dark is Great</title>
    <link href="http://www.rgoulter.com/blog//posts/2019-07-13-netflixs-dark-is-great.html" />
    <id>http://www.rgoulter.com/blog//posts/2019-07-13-netflixs-dark-is-great.html</id>
    <published>2019-07-13T00:00:00Z</published>
    <updated>2019-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 13, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>Most of my blob-around time goes to YouTube rather than to Netflix. Before I had Netflix, I was worried that it would suck up all my spare time.</p>
<p>Like how Netflix’s “Dark” sucked up all my time.</p>
<p>“Dark” is a show which was written for the kind of people who love modelling things with graphs, and KT45 modal logic. I mean, I didn’t go to the effort of doing that, but it’d be kinda fun.<br />
I <em>did</em> often have to pause and rewind 30s a few times to catch what was being said. The show has many characters and a dense network of interactions.</p>
<p>The show has some light sci-fi, with elements of mystery and a bit of suspense.<br />
The sci-fi aspect is a bit of <em>time travel</em>; and the show has different cases of “Grandfather Paradox”es going on. – This gets combined with a love of dualities, repetitions and reflections. It’s fun.</p>
<p>The second season just released. I think the first few episodes of each season were a bit slow to build things up. (This is at the same time as having so many characters!). And the ending of each season is a bit ‘meh’. And a couple of the character actions come across as irrationally convenient for the plot.<br />
But I really loved the stuff in the middle.</p>
<hr />
<p>Just some rapid-fire thoughts on other shows I’ve watched:</p>
<ul>
<li><p>“Murder Mystery”. Eh. It’s okay. I kinda wondered if it’d have different endings like “Clue” did.</p></li>
<li><p>“The Nice Guys”. Eh. There’s one joke which managed to land quite well.<br />
The plot is a sortof neo-noir where the titular nice guys try to find a young woman who’s made an adult film which exposes corruption in government.<br />
– I’ve seen films like “Die Hard” described as power-fantasies for middle-aged guys. I think plots like this are the same kind of power-fantasy: rather than market-forces or complex systems, it’d be nice if the damaging effects of socially/environmentally-bad policies could be blamed on a secret cabal that can be beaten.</p></li>
<li><p>“Always Be My Maybe”. The guy is cute/charming. It features a scene where the in-vogue Keanu Reeves acts like an asshole.<br />
The rest of the film? Eh.<br />
There’s a romance plot between the two characters, but the story kindof relies on an archetypal plot and doesn’t really manage to land enough of the points well enough.<br />
– I enjoyed “The Accountant” even though I can see it’s a crap film. I could see people liking “Always Be My Maybe” as kindof a “representation matters” film, but it’s not very good.</p></li>
<li><p>“John Wick 3”. My girlfriend enjoyed it more than I did. John Wick has <em>way</em> too much plot armour. Especially towards the end. – Though there is a segment of the movie which is closer to the dumb-cool-action spirit of the first movie: Halle Berry’s character and John shoot there way out of some compound.<br />
I’d pass on the rest, though.</p></li>
<li><p>“Narcos: Mexico”. Outstandingly good. I dunno in terms of accuracy or Americo-centrism or whatever. But the Narcos writers are great at writing tense episodes.</p></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>You Might Like \"Anne with an E\" If...</title>
    <link href="http://www.rgoulter.com/blog//posts/2019-02-06-you-might-like-anne-with-an-e-if.html" />
    <id>http://www.rgoulter.com/blog//posts/2019-02-06-you-might-like-anne-with-an-e-if.html</id>
    <published>2019-02-06T00:00:00Z</published>
    <updated>2019-02-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February  6, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>You might like Netflix’s “Anne with an E” if: - You value current-year progressive ideals, unlike the stupid, ignorant and bad people who hold values you find gross. - You hate close-minded people. - You can’t understand why late 19th century rural farmers don’t hold modern urban bourgeois moral values. - You watched the 10-hour YouTube video of “Gillette commercial”. Three times. Because of how great it is. - etc.</p>
<p>Bonus points if you think the 1985 mini-series was boring and needed more flavour like “Anne has PTSD”.</p>
<p>I guess it’s a bit weird, but I don’t think anyone who <em>loves</em> the 1985 version would like the Netflix version. And vice-versa.<br />
The Netflix version is just a bit too “and everybody clapped”/“I’m so proud of this community”.</p>
<p>The characters are almost all flat, almost all the time; but entirely follow the tropes necessary for the misery porn.<br />
The characters in the plots tend to be one of: “good character with good morals”, “good character doesn’t agree with good morals but then has good morals by the end of the episode”, or “bad character with bad morals”.</p>
<p>I did quite like the penultimate episode of the second season where the characters being to face consequences for their actions. (The son of a poor family who have been making sacrifices for him to attend school gets caught for having been skipping school to pursue a life of art. This trouble was caused by an unconventional and unintegrated teacher who thought she knew the solution presuming she knew how to fix things. The class bully suffers injury in retribution for the pain he caused others).<br />
But apparently the final episode decided these were bad things. (e.g. the final episode has the bully have a change of heart with warm and fuzzy feelings, as he decides to not shoot the cute little fox which has been pillaging the neighbouring chickens).</p>
<p>The show is very pretty, though. So I can understand the idea of “tell whatever story you want just because you like the setting”.</p>
]]></summary>
</entry>
<entry>
    <title>Comparing Cucumber vs All-in-Code BDD Specs</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2019-01-19-comparing-cucumber-vs-all-in-code-bdd.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2019-01-19-comparing-cucumber-vs-all-in-code-bdd.html</id>
    <published>2019-01-19T00:00:00Z</published>
    <updated>2019-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 19, 2019
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>A couple of years ago I added a couple of Cucumber specs to a side-project of mine.<br />
I did this because I was learning to use Cucumber since I was being hired as a Software Engineer in Test. (Their existing automated acceptance tests used Cucumber).</p>
<p>I recently picked the project up again to do some maintenance on it, and I chose to migrate from using Cucumber to using all-in-code ScalaTest for implementing the same specifications.</p>
<p>When using Cucumber, you must ask “why use Cucumber over an all-in-code tool like RSpec (or ScalaTest)”. So, here are some considerations about the trade-offs between using Cucumber and using all-in-language tests:</p>
<h1 id="recap-cucumber-and-bdd">Recap: Cucumber and BDD</h1>
<p>Cucumber is a tool which enables structuring tests in a certain way. This structure particularly supports a “Behaviour Driven Development” (BDD) workflow.<br />
BDD is the idea of specifying behaviours (after having refined what these behaviours should be from examples).<br />
That is: a specification is an artifact from the project-management side; and Cucumber is a tool which executes specifications of behaviours.<br />
BDD’s selling point is “build the right product”. And executable specifications aim to provide “living documentation” about what the code actually does.</p>
<p>Well, that’s my understanding of it from Gojko Adzic’s fantastic “Specification By Example”.</p>
<p>Specifications and Cucumber, from a developers perspective: - Any automated test involves 3 things: - Set up some System Under Test (SUT) - Get the SUT to perform some action - Check that the SUT did what it was supposed to do. - Technically, automated tests may also need to clean up the environment they run in; but this is a technical detail about running the tests, not a detail about checking the SUT. - I’ve seen these three steps described with the mnemonic “Assemble, Act, Assert” which I quite like. - Typically, documentation about what a program does is hand-written. (Although there are interesting tools which try and address this, like <a href="https://stackoverflow.com/questions/50332885/how-do-i-install-and-use-gpg-agent-on-windows/50412924#50412924">Java’s Spring’s REST Docs</a>). - Cucumber’s file format involves describing a “feature” which is a sequence of “scenarios”. (Roughly corresponding to “suite” and “test” in xUnit terms). Each scenario consists of steps. - For example. from <a href="https://relishapp.com/rspec/rspec-expectations/v/3-8/docs/built-in-matchers/equality-matchers">rspec-expectations</a>: <code>cucumber     Given a file named &quot;compare_using_eq.rb&quot; with:       .... Ruby code using RSpec Expectations ....     When I run rspec compare_using_eq.rb     Then the output should contain &quot;3 examples, 0 failures&quot;</code> - it’s a good convention to write the scenario’s steps in a “Given/When/Then” sequence; and this corresponds to “Assemble, Act, Assert”. - Cucumber’s differentiating feature is that the executable specification is separate from the code which runs it. - i.e. a Cucumber test suite has its executable specification in a <code>.feature</code> file, written in Gherkin syntax. This is then executed using test code in “step definitions”. - My impression is that there are different styles of writing Given/When/Then steps: - steps as a convenient way to arrange test code/examples. e.g. for libraries (or APIs) like RSpec. This seems to be the easiest kind of product to write executable specifications for. - steps as “pseudo code”. This seems a compromise for getting documentation which is tested, with less emphasis on readability. - steps as declared descriptions. This is what I think is best for high-level end to end specifications. (Although this ends up with steps which are too vague if they are too high level and don’t mention any details).</p>
<h1 id="advantages-and-disadvantages-of-each-approach">Advantages and Disadvantages of Each Approach</h1>
<p>Relevant advantages/disadvantages for Cucumber vs all-in-code specs: (As opposed to inherent difficulties with end-to-end or out-of-process acceptance tests).</p>
<p>Advantages of Cucumber: - Cucumber specification features are English-readable in plaintext files. This is useful if you want to see “what are the specifications? what does the software do?” at a glance. - It’s much harder to access the “executable specification” from in-code specs (like RSpec or ScalaTest’s FeatureSpec). The “Given/When/Then” are mixed in with the step-execution code. - Cucumber makes it easier to adhere to an “executable specification discipline”. Because scenarios in the Feature file are idiomatically written with “Given/When/Then” steps, writing test code outside that convention naturally <em>smells</em>. - Similarly, if the step-definition code doesn’t “obviously agree” with the step it’s defining, this is another clear smell. - It “smells” if the executable specifications aren’t used anywhere. My experience is that tests tend to be ignored (beyond whether they pass and maybe coverage metrics); but I think tests could be leveraged to provide more value than this. - With all-in-code specs, it’s much easier to be sloppy and have poorly written specs or poorly engineered code which tests the code. - It “smells” if the Feature files aren’t used anywhere. (IME, It’s typical to ignore tests anyway. But I think this is a smell). - It’s easier to produce “living documentation” from a tool like Cucumber than a tool like RSpec.</p>
<p>Disadvantages of Cucumber: - Cucumber step-definitions code has a weird “interface”. “interface” in <a href="https://www.youtube.com/watch?v=bmSAYlu0NcY">John Ousterhaut’s use of the word</a>: “interface” is the stuff you need to be aware of in order to use code.<br />
- With normal imperative code: each statement is essentially adjacent to each statement in the program, or is embedded in some structure like a function or a class.<br />
It’s typically straightforward that the ‘interface’ is all the code in the function, any incoming parameters; and if unlucky, access to “global” state. - With step definitions: It’s possible that some steps will need to store information for later steps or make use of information from previous steps. Steps need to be written in a way that makes the assumed interface as obvious as possible, at the same time as being an idiomatic way to describe some step in a test scenario. - It’s really hard to write good specifications.</p>
<p>Disadvantage of all-in-code specs: - With code, it’s really tempting to “Dont Repeat Yourself” (DRY) so that there’s less code to read.<br />
Whereas, tests should “tell a story”. (They should use “Descriptive and Meaningful Phrases” rather than be ‘DRY’).<br />
With all-in-code specs, if a test step is re-used, then either subsequent steps are nested (which may be hard to read) or copy-pasted elsewhere in the test code. - Cucumber’s approach is to organise test code by step definitions. So, to see the full code listing for a test scenario, you have to view each step definition.<br />
Each step may be “DAMP”, but not the whole scenario.</p>
]]></summary>
</entry>

</feed>
