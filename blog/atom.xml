<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2021-11-07T00:00:00Z</updated>
    <entry>
    <title>Netflix's Narcos Mexico Season 3 is a Let Down</title>
    <link href="http://www.rgoulter.com/blog//posts/narrative/2021-11-07-netflixs-narcos-mexico-season-3-is-a-let-down.html" />
    <id>http://www.rgoulter.com/blog//posts/narrative/2021-11-07-netflixs-narcos-mexico-season-3-is-a-let-down.html</id>
    <published>2021-11-07T00:00:00Z</published>
    <updated>2021-11-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Netflix’s “Narcos”, and its companion “Narcos: Mexico” are very exciting shows to watch.</p>
<p>I, uh, am under the impression these shows play quite fast and loose with history in order to make a compelling drama. It does make for good entertainment.</p>
<p>I was excited to see “Narcos: Mexico”’s Season 3 recently released, and sat down to binge my way through its episodes. – Unfortunately, I found it disappointing.</p>
<p>“Narcos” especially had this charm of a cat-and-mouse game. You’d feel tense wondering if the good guys would catch the bad guys. I noticed the tension was an inverse of the results: when the tension looked like it might resolve in catching the bad guys, it resolved with the bad guys getting away. But when the tension looked like it leaned in the direction of the bad guys getting away, they’d get caught. – It was very fun to watch.</p>
<p>“Narcos” ran for 3 seasons, with seasons 1 and 2 based on the story of Pablo Escobar; and season 3 based on the story of the Cali cartel. “Narcos: Mexico” sees the rise of the Guadalajara Cartel; presumably future seasons will show us more of El Chapo.</p>
<p>After watching “Narcos: Mexico” season 1, I watched Netflix’s “El Chapo”. – The two shows both dramatise the same set of events. I tend to like the latter more.</p>
<p>Well, “Narcos: Mexico”’s Season 3 is a bit lame. I think it tries to land some emotional punches.. which didn’t really land.</p>
<p>At one point in the show, the good-guys (an American DEA agent, and a Mexican anti-drug military company) capture the brother of the right hand man of so-and-so that they want to catch. They start torturing the kid for information. Then, to the DEA agent’s <em>horror</em>, the kid claims he had Mexican-American dual-citizenship. There’s more hand-wringing in the show, where the DEA agent feels he’s not one of the good guys, because of the torture of the American.<br />
– Ugh. I mean, you can say torture is wrong, or argue torture is bad because it’s ineffective, or argue torture is effective despite being horrible. I don’t see it as defensible to say that citizenship has an impact. What the fuck. (The moral shock certainly can’t be from “torturing your own people” is bad, either. The torture was carried out by Mexicans).<br />
– And while I reckon the show’s writers hold the view that the US are responsible for many bad actions which hurt Mexico.. it feels like the part the story wants you to find shocking is the torture <em>of an American citizen</em>.</p>
<p>In contrast, Netflix’s “El Chapo” has a few standout episodes which really punch through the desensitization that might otherwise come with these gangster shows. Or rather.. it’s easy to see the gangsters killing other gangsters and not feel much about it. But in “El Chapo”, the show takes the time to tell the story from the perspective of lives of ordinary people impacted by the drug trafficking. – We see a poor family lose their daughter; the mother takes the last money they have, gives it to some police officers who then do nothing to help her. We see a young boy kidnapped of the streets, and forced into training as a soldier for the gang. We see poppy farmers who have a tough time under one cartel be forced to work under much worse conditions as another cartel takes over the area.</p>
<p>I guess the other let down to “Narcos: Mexico”’s season 3 is the cat-and-mouse aspect to the story just doesn’t feel as prominent.<br />
Previous seasons of “Narcos” and “Narcos: Mexico” have followed a pattern of following the rise and fall of the biggest drug cartel, and the DEA’s efforts to stop them. Tensions ratchet as the bad guy gets more powerful, and the good guys get closer to catching them.<br />
– In this season, the bad guys that the DEA are chasing never really seem to hold the position of dominance. And the bad guy who seems to be the the most prominent isn’t spending his time getting ahead of prominent threats. There’s no buildup in tension.<br />
Stuff just happens.<br />
– Is that some kind of deliberate meta-narrative harmony with the moral that the war on drugs isn’t a war where the anti-drug enforcement is coherently winning? Nah.</p>
<p>The hand-wringing of “Narcos: Mexico” season 3 falls flat and seems lame in comparison, where the show was previously very strong at telling a good gangster story.</p>]]></summary>
</entry>
<entry>
    <title>Example of Using Nix to Run Software Using Different Build Flags</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2021-10-31-example-of-using-nix-to-run-software-using-different-build-flags.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2021-10-31-example-of-using-nix-to-run-software-using-different-build-flags.html</id>
    <published>2021-10-31T00:00:00Z</published>
    <updated>2021-10-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I recently wanted to use FreeCAD to export a glTF file from a STEP file.</p>
<p>Unfortunately, I found that <a href="https://forum.freecadweb.org/viewtopic.php?f=8&amp;t=31680&amp;p=450917&amp;#p450658">FreeCad needed to be built with OCC built with rapidjson</a>.</p>
<p>The <a href="https://forum.freecadweb.org/viewtopic.php?t=56487&amp;p=486635">suggested solution</a> isn’t <em>hard</em>, as such; but it is more tedious than just installing a package:</p>
<blockquote>
<p>Building from OCC from scratch: 1. get the source code from (https://gitlab.com/blobfish/occt ) –&gt; fillet fix included 2. setup your machine with cmake 3. get freetype2 and tcl/tk 4. setup cmake 5. build occ</p>
</blockquote>
<p>Per <a href="https://dev.opencascade.org/doc/overview/html/build_upgrade__building_occt.html#build_cmake_conf">the opencascade documentation</a> (or e.g. <a href="https://dev.opencascade.org/content/rebuilding-occt-rapidjson">this forum post</a>), this means building opencascade, but with cmake flags: <code>-D USE_RAPIDJSON:BOOL=&quot;ON&quot;</code>.</p>
<p>It turns out Nixpkgs allows for doing this in a concise way:</p>
<p>e.g. with a file <code>freecad.nix</code>:</p>
<pre><code># By convention: this file declares function
# which takes in a set of arguments;
# &#39;pkgs&#39; has a default value of &#39;import &lt;nixpkgs&gt; {}&#39;
{ pkgs ? import &lt;nixpkgs&gt; {} }:

let
  # declare a package opencascade-occt, but with rapidjson support
  opencascade-occt-with-rapidjson =
    pkgs.opencascade-occt.overrideAttrs(oldAttrs: {
      # opencascade-occt depends on rapidjson if built with USE_RAPIDJSON
      nativeBuildInputs = oldAttrs.nativeBuildInputs ++ [ pkgs.rapidjson ];
      # and change which extra cmakeFlags are passed to the configuration.
      cmakeFlags = &#39;&#39;-D USE_RAPIDJSON:bool=&quot;ON&quot;&#39;&#39;;
    });
in
# The result of the function is the freecad package,
# but using the opencascade package we declared above.
pkgs.freecad.override {
  opencascade-occt = opencascade-occt-with-rapidjson;
}</code></pre>
<p>The syntax may look esoteric, but it’s hardly more intimidating than the fancy parts of ECMAScript syntax.</p>
<p>The code declares a function for building a package for freecad. The code is a function as a way of injecting dependencies. The code uses <code>nixpkgs</code> as a whole for our dependency. The code makes use of the <code>pkgs.freecad</code> and <code>pkgs.opencascade-occt</code>, so it doesn’t need to duplicate the effort needed to write those packages. The opencascade here is built with <code>-D USERAPIDJSON:BOOL=&quot;ON&quot;</code> as a flag to CMake; and <code>rapidjson</code> is also given as a dependency. Then this is version of opencascade is given to the <code>pkgs.freecad</code> package.</p>
<p>The <a href="https://nixos.org/manual/nixpkgs/unstable/#chap-overrides">Overriding</a> section of the nix manual explains <code>&lt;pkg&gt;.override</code> vs <code>&lt;pkg&gt;.overrideAttrs</code>. Roughly: <code>&lt;pkg&gt;.overrideAttrs</code> changes things about the way <code>&lt;pkg&gt;</code> is built; e.g. the code above changes the CMake flags. Whereas, <code>&lt;pkg&gt;.override</code> changes what versions of dependencies are used to build a package; e.g. the code above changes the <code>opencascade-occt</code> dependency of freecad to one which was built with rapidjson.</p>
<p>Stuff like this is what makes Nix both very powerful, but also very hard to get used to.</p>
<p>How to use some Nix file like <code>freecad.nix</code> might also be unclear. There are several different ways: e.g. running <code>nix-build freecad.nix</code> then running the <code>./result/bin/freecad</code> which results.. or using the footgun that is <code>nix-env --install</code> and running <code>nix-env --install --file freecad.nix</code>, among others.</p>
<p>The code is more concise without the comments; or without the <code>let</code>:</p>
<pre><code>{ pkgs ? import &lt;nixpkgs&gt; {} }:

with pkgs;
freecad.override {
  opencascade-occt =
    opencascade-occt.overrideAttrs(oldAttrs: {
      nativeBuildInputs = oldAttrs.nativeBuildInputs ++ [ rapidjson ];
      cmakeFlags = &#39;&#39;-D USE_RAPIDJSON:bool=&quot;ON&quot;&#39;&#39;;
    });
}</code></pre>
<p>That said, I don’t know whether anyone would write code like that without having written similar code previously.</p>
<p>I arrived at the above code through refactoring. The naive approach is to copy and paste the Nix files from the nixpkgs code, and make adjustments as necessary. This works, but isn’t very elegant.<br />
– One nice thing about refactoring Nix code, though, is that packages which are built with the same set of inputs don’t require rebuilding. e.g. after building either of the code snippets, the building the other wouldn’t require any further code to be compiled.</p>
<p>I reckon that even that effort is still less tedious than the suggested solution above.<br />
– Or perhaps I’m thinking of this from a yak-shaving perspective: e.g. with the good ol’ just clone and install dependencies and configure and build, you’ll have to repeat this understandable but awkward process on every computer you want to use FreeCAD with glTF export. With the Nix approach, at worst you’d just copy the snippet and rebuild on your computer.</p>
<p>Since rebuilding GUI programs like this can take quite a beefy computer or quite a long time, another nice aspect of Nix is <a href="https://nixos.org/manual/nix/stable/#chap-distributed-builds">the ability to build with other computers</a>. – I’ll have to try that at some point.</p>]]></summary>
</entry>
<entry>
    <title>Using Nix-Shell for Project-Specific Tools for Emacs</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2021-10-26-using-nix-shell-for-project-specific-tools-for-emacs.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2021-10-26-using-nix-shell-for-project-specific-tools-for-emacs.html</id>
    <published>2021-10-26T00:00:00Z</published>
    <updated>2021-10-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>One feature VSCode has is its <a href="https://code.visualstudio.com/docs/remote/containers">“Remote - Containers” extension</a> which allows for developing inside a container.</p>
<p>I found this strange when I first heard it; since every time I’ve <code>docker exec -it</code>’d into a container, I’ve had to then further install tools like vim or a better grep. – Instead, I understand the idea is actually to use the container image as a way of distributing a set of tools to use with the editor.</p>
<p>I liked the idea of project-specific tooling more once I made some use of <a href="https://direnv.net/"><code>direnv</code></a>. <code>direnv</code> enables automatically setting environment variables for the directories you <code>cd</code> through, by sourcing any <code>.envrc</code> files it encounters.</p>
<p>That allows e.g. having a separate directory structure for <code>dev</code> and <code>staging</code> deployments, where the <code>dev/.envrc</code> sets the <code>AWS_PROFILE</code> (or <code>CLOUDSDK_ACTIVE_CONFIG_NAME</code>, etc.) environment variable accordingly. – This reduces the risk of mis-matching commands intended for dev in production. But also increases the convenience of not needing to explicitly change between profiles.</p>
<p><code>direnv</code> has also has some integration with <code>nix-shell</code>. e.g. https://hardselius.github.io/2020/nix-shell-and-direnv/ – Although Nix is weird, using dotfiles to enable using different versions of tools depending on the directory is a solution as implemented with tools like <a href="https://github.com/rbenv/rbenv">rbenv</a> (or the more general <a href="https://asdf-vm.com/">asdf-vm</a>).</p>
<p>The <code>direnv</code> + <code>nix-shell</code> combo works for command-line shells, and VSCode can have its Docker containers.</p>
<p>Here’s an example of trying the same trick with Emacs.</p>
<p>e.g. for a Terraform file like <code>main.tf</code>:</p>
<pre class="terraform"><code>terraform {
  required_providers {
    aws = {
      source  = &quot;hashicorp/aws&quot;
      version = &quot;~&gt; 3.0&quot;
    }
  }
}

provider &quot;aws&quot; {
}

variable &quot;ssh_authorized_key&quot; {
  type = string
}

resource &quot;aws_key_pair&quot; &quot;key&quot; {
  key_name_prefix = &quot;ubuntu-vm&quot;
  public_key      = var.ssh_authorized_key
}

resource &quot;aws_security_group&quot; &quot;allow_ssh&quot; {
  name        = &quot;allow_ssh&quot;
  description = &quot;Allow SSH inbound traffic&quot;

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = &quot;tcp&quot;
    cidr_blocks = [&quot;0.0.0.0/0&quot;]
  }
}

data &quot;aws_ami&quot; &quot;ubuntu&quot; {
  most_recent = true

  filter {
    name   = &quot;name&quot;
    values = [&quot;ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*&quot;]
  }

  filter {
    name   = &quot;virtualization-type&quot;
    values = [&quot;hvm&quot;]
  }

  owners = [&quot;099720109477&quot;] # Canonical
}

resource &quot;aws_instance&quot; &quot;ubuntu&quot; {
  ami           = data.aws_ami.ubuntu.id
  instance_type = &quot;t3.small&quot;

  key_name = aws_key_pair.key.key_name

  vpc_security_group_ids = [aws_security_group.allow_ssh.id]

  associate_public_ip_address = true

  root_block_device {
    volume_size = 20
  }
}

output &quot;vm_public_ip&quot; {
  value = aws_instance.ubuntu.public_ip
}</code></pre>
<p>and a <code>shell.nix</code> with contents:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">{</span> <span class="ex">pkgs</span> ? import <span class="op">&lt;</span>nixpkgs<span class="op">&gt;</span> <span class="dt">{}</span> <span class="kw">}</span>:</a>
<a class="sourceLine" id="cb2-2" data-line-number="2"></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="ex">with</span> pkgs<span class="kw">;</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="ex">mkShell</span> {</a>
<a class="sourceLine" id="cb2-5" data-line-number="5">  <span class="ex">buildInputs</span> = [</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">    <span class="ex">terraform</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">    <span class="ex">terraform-ls</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8">    <span class="ex">tflint</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">  ];</a>
<a class="sourceLine" id="cb2-10" data-line-number="10">}</a></code></pre></div>
<p>(In this case, the shell includes the packages: <code>terraform</code> which is what interprets/runs the <code>main.tf</code>, <code>terraform-ls</code> as the Language Server for LSP, and <code>tflint</code> as the linting tool).</p>
<p>An <code>.envrc</code> can be used to set <code>AWS_PROFILE</code>, <code>AWS_REGION</code>, and <code>TF_VAR_ssh_authorized_key</code>.</p>
<p>To integrate this with Emacs:</p>
<p>Using <a href="https://github.com/travisbhartwell/nix-emacs/"><code>nix-sandbox</code></a> for convenience, we can set some variables in a <code>.dir-locals.el</code> file, e.g.:</p>
<pre class="elisp"><code>((terraform-mode . ((eval . (progn
                              (setq-local lsp-terraform-server
                                          `(&quot;nix-shell&quot;
                                            &quot;--command&quot;
                                            &quot;terraform-ls serve&quot;
                                            ,(nix-current-sandbox)))))))
 (prog-mode . ((flycheck-command-wrapper-function
                . (lambda (command) (apply &#39;nix-shell-command (nix-current-sandbox) command)))
               (flycheck-executable-find
                . (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd))))))</code></pre>
<p>The <code>lsp-terraform-server</code> variable is used by <a href="https://emacs-lsp.github.io/lsp-mode/page/lsp-terraform/">lsp-mode</a>, and the <code>flycheck-command-wrapper-function</code> is for <a href="https://github.com/flycheck/flycheck">flycheck</a>.</p>
<p>With this, e.g. the <code>terraform-ls</code> from the <code>nix-shell</code> environment can be used for LSP code intelligence, and <code>tflint</code> by flycheck.</p>
<p>I’ve been pretty lazy about figuring out how to setup LSP servers for whatever programming language I’ve been using. Nix doesn’t promise to make that easier. – But what Nix does support is making it easier for someone to make use of a development setup written in Nix (e.g. just running a single “nix-shell” command, rather than following several steps in a blogpost).</p>
<p>I don’t know if project-specific tooling will catch on. I think project-specific tooling looks like it goes well with web applications like replit, gitpod, or GitHub’s codespaces.</p>]]></summary>
</entry>
<entry>
    <title>Static Site Generators are Well Suited to Hobbyist Programming</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2021-10-24-static-site-generators-are-well-suited-to-hobbyist-programming.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2021-10-24-static-site-generators-are-well-suited-to-hobbyist-programming.html</id>
    <published>2021-10-24T00:00:00Z</published>
    <updated>2021-10-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Static site generators are definitely a “for developers” tool. Or that’s the impression I get from seeing that <a href="https://staticsitegenerators.net/">staticsitegenerators.net</a> has hundreds of projects listed, ranging from a few GitHub stars all the way up to tens of thousands of GitHub stars.</p>
<p>I’m reminded of a comment I saw on Hacker News talking about Factorio. Factorio is a game with gameplay which feels very similar to programming. This comment I saw explained, though, that the game’s similarity to programming leads to two sets of reactions to it from programmers: 1. the game is similar to what I put my creative energy into, but without the constraints of needing to be reliable or being told what to do: it’s very fun; 2. the game is similar to what I put my creative energy into, but without any tangible benefit from putting in that work: why would anyone want to ‘play’ this?</p>
<p>My blog is generated with a static site generator, customised using the Haskell programming language.</p>
<p>I don’t think I’d be able to argue that it’s a practical choice if the goal is to serve a blog. – But it’s as good an excuse as any to write something with Haskell.</p>
<p>This weekend I spent some time brushing the project up a bit.</p>
<p>It’s fun.</p>
<p>I’m not familiar enough with Haskell to know all the right idioms. I think <a href="https://github.com/rgoulter/my-hakyll-blog/blob/6958e2a8399e2d32a041592bb74a527fa8ec36a8/site.hs">the code for the site</a> very much smells in places with indications that I don’t know what I’m doing.</p>
<p>Still, I feel I rearranged the code into a nicer, more consistent shape than <a href="https://github.com/rgoulter/my-hakyll-blog/blob/1ef0045662aace8e063d69094e31b76e8062cf25/site.hs">it was in before</a>.</p>
<p>I also tinkered around and updated the Nix files. I think Nix is nice for side projects. It’s often tedious to try and install some old compiler on a system. – With Nix, it’s easier to install from an older version of the package repository.<br />
So when the project needed to build using an older GHC version (and NixOS didn’t like running the GHC version which <code>stack</code> downloaded, because it didn’t have the shared libraries available), Nix can get an older GHC by using the package definition from an older version of the package repository.<br />
– Albeit, Nix has quite a steep learning curve. I wasn’t able to figure out how to do that nicely last time I’d tried to write the Nix files for the project.</p>]]></summary>
</entry>
<entry>
    <title>Follow-up Review of the BM40 Ortholinear Keyboard</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2021-10-22-follow-up-review-of-the-bm40-ortholinear-keyboard.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2021-10-22-follow-up-review-of-the-bm40-ortholinear-keyboard.html</id>
    <published>2021-10-22T00:00:00Z</published>
    <updated>2021-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>So I’ve had my BM40 for over a year now.</p>
<p>My <a href="../programming/2020-08-22-early-impressions-of-bm40rgb-ortholinear-keyboard.markdown">initial impressions</a> after getting the keyboard were:</p>
<ul>
<li><p>that it was a <em>relatively</em> cheap, easy to assemble fancy keyboard,</p></li>
<li><p>that was nicer to use compared to a typical keyboard for cases where you could use the computer with both hands on the keyboard,</p></li>
<li><p>that it took a bit of time to get used to. (The alphabetical keys were easy to get used to, since I had trained with ‘touch typing’ discipline to learn the Dvorak; but the symbols took some time to get used to).</p></li>
</ul>
<p>Now that I’ve had more experience with the keyboard, I think those points still pretty much hit the mark.</p>
<p>Perhaps the most important point to add is that I’m still able to use a stock-standard row-staggered keyboard. I don’t lose that ability by using a small/weird keyboard.</p>
<p>Here are some more points for my updated impression:</p>
<h3 id="big-increase-in-comfort">Big Increase in Comfort</h3>
<p>The biggest difference in usage between a BM40 and a standard row-staggered keyboard is the comfort.</p>
<p>I’d point out that the thumb is much stronger than the pinky.</p>
<p>On a standard keyboard, the thumb will press spacebar, and sometimes the left alt key.</p>
<p>On a standard keyboard, the pinkies will press the outermost letters (q, a, z), as well as ctrl, shift, the capslock key, tab, tilde, escape, and on the righthand side, the pinkies are responsible for the extra symbol keys ([], _, +, ), as well as the backspace, and enter keys. – Albeit.. you end up accessing many of these by moving your hand over, and using ring + pinky fingers; and these keys generally don’t need to be pressed very frequently. But this still leaves the pinky doing more work than the thumb.</p>
<p>By comparison, the BM40 does a much better job at utilising the thumbs (and reducing usage of the pinky).</p>
<p>Many layouts on the BM40 keep the two hands together on the inner 10 columns, leaving the outer columns for the pinkies. With the hands on home row, the thumb can reach the spacebar and each thumb can reach the key to the side.</p>
<p>– I think this leaves the lowermost, outer 4 keys in an awkward spot. You have to move your hands in an awkward way to use them. (Albeit, this is no worse than the Ctrl, Win, Alt, etc. of standard keyboards).</p>
<p>In general, better thumb/pinky usage would be to use the thumb more, and pinky even less. I also took a go at designing <a href="https://github.com/rgoulter/keyboard-labs">my own split keyboard</a> (using a small development board to take care of the difficult parts of PCB design), and found this to be relatively comfortable.</p>
<p>With the BM40, you could also try and ‘split’ the hands; the left hand rests on the leftmost 5 columns, the right hand resting on the rightmost 5 columns, leaving a ‘gap’ of two columns in the middle. – I’ve been trying this layout out. I found it a bit difficult to adjust to, but otherwise appreciate it.</p>
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/keyboards/bm40rgb/bm40rgb_split.JPG" /></p>
<h3 id="customisable-firmware">Customisable Firmware</h3>
<p>The BM40 supports customising its keyboard firmware.</p>
<p>The <a href="https://docs.qmk.fm/">QMK firmware documentation</a> boasts a large number of features.</p>
<p>The features I’ve found most useful:</p>
<ul>
<li><p>Layers. The idea is a key can behave differently if a “Fn” key is held down. Many laptops will do this in order to provide more functionality without needing to add extra keys. QMK’s layering allows customising what the definitions of each of these layers are, and how they get activated.</p></li>
<li>Tap-Hold keys. A key behaves differently depending on whether you tap it, or hold it down. e.g. a bit like having a button which skips to the next track if tapped, but fast-forwards if held down. (Or treating the CapsLock key as Ctrl key when it’s held, but CapsLock key when tapped).
<ul>
<li>One useful layout this allows is putting the Shift/Ctrl/Windows/Alt key underneath the index/middle/ring/pinky fingers. So you’ll get “jkl;” if tapping, but the modifiers if holding these keys down. Putting these modifier keys on the home row is surprisingly useful.</li>
</ul></li>
<li><p>Combo keys. Invoke some action when tapping multiple keys at once. I don’t make extensive use of this, but my favourite use of it has been to put combos on the two keys “cv” and “m,” to move to the workspace to the left/right. This makes switching between workspaces about as natural as using the gestures on a Macbook trackpad.</p></li>
</ul>
<p>Pretty much all of this customisable functionality is accessible to regular keyboards using software like <a href="https://github.com/kmonad/kmonad">kmonad</a>. – Although having it on the keyboard means you don’t need to fiddle with the OS settings for every computer you make use of.</p>
<h3 id="alternate-recommendation">Alternate Recommendation</h3>
<p>I would also add a recommendation: Consider the BM40 is an ortholinear keyboard with a 4x12 grid of keys (with a 2-key wide spacebar in the middle), the lack of a number row limits its usablility for e.g. gaming.</p>
<p>Keyboards like the XD75 seem like they retain most of the advantages of the BM40, with fewer downsides. e.g. it’s a 5x15 grid of keys (so would be easier to use with gaming?), but also fits into a standard GH60-sized keyboard case. Since the size of the keyboard case is standard, this means there are more options.</p>
<p>Or taking another route: I’ve also seen a bunch of other interesting designs for “split”, two-handed keyboards. The ergodox was the first I saw. The ergodox’s key cluster for thumbs isn’t very good, though. The ergodox also needs a custom case 3D-printed, IIRC.</p>
<p>More recent designs often have a “sandwich style” case where the keyboard’s PCB is ‘sandwiched’ between two laser-cut metal plates. I think it’s easier to find places which will do lasercutting compared to getting access to a 3D printer.</p>
<p>Popular sandwich-style keyboard designs include the corne, the kyria or the lily58 or the sofle keyboard. These involve some very simple soldering. These are often sold in kits at various online stores. If the PCB design files are available, there’s also the option of getting the PCB fabricated &amp; sourcing the other parts yourself.</p>
<h3 id="keyboard-shouldnt-get-in-the-way">Keyboard shouldn’t get in the way</h3>
<p>– In my initial impressions post, I commented that you want a keyboard to be transparent between you and your computer, and not something you have to think about.</p>
<p>While getting used to it, the BM40 does indeed get in the way. And it also gets in the way if you make a significant change to your layout.</p>
<p>But once I got used to the BM40, the “not moving from home row” is wonderful.</p>
<p>In contrast, when I use a standard row-staggered keyboard now it feels like playing the piano. My fingers have to move all over the place, with all sorts of stretching or weird movements.</p>
<h3 id="downside-its-your-keyboard-others-cant-use-it">Downside: It’s <em>your</em> keyboard, others can’t use it</h3>
<p>This will be familiar to those who use customisable text editors like Vim or Emacs. – Once your editor has been customised enough, others can’t use it. (And vice versa).</p>
<p>With small, customisable keyboards it’s the same.</p>
<p>Since the BM40 has fewer keys than the regular keyboard, there’s no obvious convention for where the keys can be expected to go.</p>
<p>If all you’ve got is this small keyboard and you’re ill-equiped to handle situations where someone else might need to type things in.</p>
<h3 id="downside-external-keyboards-are-difficult-to-use-with-laptops">Downside: External Keyboards are Difficult to use with Laptops</h3>
<p>Using a small keyboard is great when you’ve got a desktop setup. It means that much more desk space.</p>
<p>But if you’re using a laptop.. using an external keyboard means more desk space is used up by the keyboard.</p>
<p>One workaround I’ve seen people come up with involve disabling their laptop’s keyboard if using an external keyboard. The keyboard can then be placed on top of the laptop’s keyboard.</p>
<p>Another workaround I saw involved using a small tray that could be placed on top of the laptop keyboard.</p>
<p>This isn’t a downside of the BM40 itself. But, laptop keyboards aren’t ortholinear.</p>
<h3 id="downside-mechanical-keyboards-are-expensive-or-difficult-to-assemble">Downside: Mechanical Keyboards are expensive, or difficult to assemble</h3>
<p>The BM40 is straightforward to assemble. And while it’s cheap relative to other non-standard mechanical keyboards, it’s also quite expensive.</p>
<p>(Standard mechanical keyboards themselves can end up being much cheaper than the BM40 keyboard. e.g. looks like an Anne Pro 2, which is a Bluetooth keyboard, is roughly about half the price of a BM40).</p>
<p>There are cheaper ways to try and assemble a small mechanical keyboard. <a href="https://github.com/rgoulter/keyboard-labs/blob/master/docs/buildguide_rev2021.4_budget.md">I tried designing one which is relatively cheap to build</a>. But custom keyboards which involve fabricating PCBs and doing some soldering work could be described as “difficult to assemble”.</p>
<p>This doesn’t really detract from how much I value having this keyboard, but it does make it harder to recommend to others.</p>
<h3 id="downside-mechanical-keyboards-are-loud">Downside: Mechanical Keyboards are loud</h3>
<p>All these weird/niche keyboards typically use mechanical key switches, since this makes the keyboard cheap enough to produce in low volumes.</p>
<p>In my own space, I consider loud clicky keys an upside. For work spaces, fortunately mechanical key switches don’t need to be clicky. However, I think they’re still louder than standard keyboards.</p>
<p>I worked beside someone who had a mechanical keyboard. His keyboard wasn’t a loud keyboard. I don’t remember being annoyed by the sound.</p>
<p>Though, even more typical keyboards can still be distracting. I once had a colleague who could type very quickly on his Bluetooth Mac keyboard. He said that when he visited one of the satellite offices, the colleagues he sat beside asked him to move away from them since his impressive typing speed was distracting.</p>]]></summary>
</entry>
<entry>
    <title>Dreamy Eyes is Very Sweet</title>
    <link href="http://www.rgoulter.com/blog//posts/narrative/2021-07-29-dreamy-eyes-is-very-sweet.html" />
    <id>http://www.rgoulter.com/blog//posts/narrative/2021-07-29-dreamy-eyes-is-very-sweet.html</id>
    <published>2021-07-29T00:00:00Z</published>
    <updated>2021-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I watched “Dreamy Eyes” on Netflix.<br />
I recommend it. It’s (at times) intensely romantically sweet. Although it doesn’t have a happy ending.<br />
(Well, without a happy ending I suppose “angsty” is more apt than “sweet”).</p>
<p>It’s a drama set in Vietnam during the 1960s - 1970s. The main character has an unrequited love for his childhood friend.</p>
<p>In a sense, the “unrequited love interest over decades” reminds me of “Gone with the Wind”.<br />
In another sense, it’s very similar to Jenny’s story in “Forrest Gump”. (I think “Dreamy Eyes” does a better job. I think “Forrest Gump”’s tone misses “life can be funny and tragic”, and in doing so dampens the heft to what ought to have been some very impactful scenes).</p>
<p>On the other hand, I don’t think you’re really supposed to behave in the same manner as any of the characters in the story. The way they all behave is understandable; but at the same time, the story is so dramatic that it’s all a bit silly. (For example, the main character’s love remains unrequited for decades. Maybe this can be called sweet; but another girl has a completely unreciprocated admiration for the main character that persists for decades too. That’s just silly).</p>
<p>Silliness aside.. I think the situations and characters presented and the actions taken are interesting.</p>
<p>e.g. The story features tones of rural vs urban/modern culture. The main character and the girl he loves grew up together in the same village; but she grows more interested in the attractions of the city.<br />
What I found enhances this tension was the status symbolism of American products. e.g. When the main character reunites with his sweetheart after she has moved to the city, his sweetheart’s mother offers a tin of butter cookies (announcing that these can’t be found in the village), before she drives her car to the disco.</p>
<p>I’ve also found myself thinking about the drama in the film, too. I know <strong>having</strong> to analyse as story is the easiest way to take the fun out of hearing it.. but I also don’t find it so clear where I’d draw the line each of the characters cross from “yeah, that seems fine” to “no, that’s not the good life”.<br />
e.g. I don’t think it spoils too much to reveal that the main character’s love interest gets pregnant out of wedlock. Nothing wicked about that. But e.g. later on in the story, there’s an incident where the love interest walks with a charming date into her store, and doesn’t acknowledge her daughter who had been waiting for her for hours.<br />
The love interest isn’t an easy character to like. (Or as I saw it put once, “you’re not supposed to like the character the same way you like hotdogs”).</p>
<p>But really, what I like about this is the intense romantic angst of the story. We see a sweet romance the main character has as he grows in the village, and we see him return to the same village as an adult and walk the same paths and it just has such an impressive impact.</p>]]></summary>
</entry>
<entry>
    <title>Thoughts on  Netflix's Bridgerton S1</title>
    <link href="http://www.rgoulter.com/blog//posts/romance/2021-02-06-thoughts-on-netflix-bridgerton.html" />
    <id>http://www.rgoulter.com/blog//posts/romance/2021-02-06-thoughts-on-netflix-bridgerton.html</id>
    <published>2021-02-06T00:00:00Z</published>
    <updated>2021-02-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I just finished watching Netflix’s “Bridgerton” series. I’d enjoyed reading the book series some time ago. The third book in the Bridgeron series was the first book I ever stayed up the whole night to read.</p>
<p>The Bridgerton series is a famous and well-loved series of romance novels by Julia Quinn, featuring the Bridgerton family. The author has a charming voice. Since the stories always end with a happy ending, they’re quite fun to read. I hope the popularity of the Netflix series (and the book series consisting of eight books) means more people get to share in on the fun of reading it.</p>
<p>I enjoyed watching through this first season on Netflix with my girlfriend. Yet.. I can’t quite enthusiastically recommend the show.</p>
<p>I’m not sure who the show was made for. The show has an ambivalent tone to it. Half of the content is sweet and romantic and silly and reliably steers towards a happy ending. The other half is dramatic and somewhat serious and bitter and grim and unromantic and doesn’t even land a happy ending. (This part is original, not coming from the books).<br />
– I can understand people liking both of these things. I can’t understand why a story would be both at once.</p>
<p>The source story is quite sweet. I think the show would be better if it were just this part.<br />
The heroine of this romance is Daphne Bridgerton, and the hero is a proud duke. They get together after complaining how awful it is to be so handsome and desired by everyone else. (This, uh, wasn’t my favourite book of the series). They fight because he really doesn’t want to have children (for proud, manly reasons), she is able to convince him that’s silly, and they live happily ever after.<br />
– The adaptation of this is nice. The duke is played by Regé-Jean Page, who is very handsome.</p>
<p>This part was fun to watch with my girlfriend. At one point, the heroine is mad at the hero and doesn’t want to spent time with him. The heroine is later grumpy at the hero because he never spends time with her. When I pointed out this was a no-win situation for the guy, my girlfriend laughed and said that’s how girls are. (Another fun thing was to play nipple-spotting. We get to see the duke’s nipples all the time during sex scenes; but the duchess’ nipples are hidden even as she rides on top in the nude, thanks to some well placed hair).</p>
<p>The show features pop songs with classical arrangements. Like Taylor Swift’s “Wildest Dreams” or Billie Eilish’s “Bad Guy”. These are much more fun when you’re familiar with the covered music. It’s fitting with the overall presentation. (It’s entertainment which isn’t aiming to faithfully reproduce history; but feel-good pop entertainment dressed up in old-timey clothes).</p>
<p>But the other half?</p>
<p>Well. I was curious to see how the adaptation would be handled.<br />
It seems to be that recently, several popular entertainment series have been overbearingly progressive. Maybe the values isn’t so much of a problem; but the characters tend to be lame and unsophisticated, the writers’ intent bludgeoned into an audience not trusted to appreciate complexity.<br />
– Here, Bridgerton avoids any of that in its romantic half. It’s dramatic half isn’t obnoxious in this way, either.</p>
<p>But I think this dramatic half drags the romantic half down, and mostly just pads out the runtime.</p>
<p>I think part of the problem is its ambivalent tone.<br />
Half the time there’s this romance where the conflict is the guy doesn’t want to marry the woman he loves because of a vow he made against his long dead dad;<br />
and the other half you have e.g. a proud boxer who’s wondering whether he should sacrifice his integrity and throw a match for a great sum of money, or whether he’ll be able to keep providing for his family with his boxing exhibitions in the long term, going from match to match as he grows old.</p>
<p>Other dramatic subplots involve, e.g.: - A side-character’s cousin is pregnant and unmarried; her lover is a solder who hasn’t replied to her letters. She must secure a marriage before her pre-marital pregnancy becomes clear, or else ruin the reputation of the family hosting her. - Daphne’s older brother Anthony has a lower-class opera singer as his mistress. He’s infatuated with this mistress (promising to protect her forever), but his mother chides him for maintaining the relationship. He breaks it off, but still is attracted to her. - etc.</p>
<p>None of these subplots end with a happy ending.</p>
<p>Which is dreary enough.<br />
What exacerbates this is that it feels the writers like this lame dramatic half more than they like the sweet romantic half. – Frequently, characters in this dramatic half will speak their mind sincerely, without cliche. The viewer doesn’t need to suspend disbelief at all to sympathise with these characters.</p>
<p>One example moment in this part I didn’t like was with a subplot where Daphne’s sister Eloise is sleuthing out the identity of the anonymous Lady Whistledown. (Lady Whistledown is like the more recent Gossip Girl of the Gossip Girl series).<br />
Eloise asks the head servant whether she’s the Gossip-Girl, and the servant replies impetuously with “I wouldn’t be working for <em>you</em> if I was earning that kind of money”.<br />
– This feels like the writers want to complain about the rich and priviledged the main characters are; how there’s this huge inequality where servants miserably do work they’d otherwise not choose.<br />
We’re supposed to <em>like</em> the main characters.</p>
<p>It may be that there’s no outright overbearing, lazy progressive preaching.<br />
But.. some shows, if you look for it in the show, and compare the character’s identity (skin colour, sex, etc.), you won’t find significant correlation between what a character looks like and how capable the character is. Characters will be equally capable of good and bad deeds, of being helpful or antagonistic. The characters are all written respectfully.<br />
Bridgerton … just isn’t one of those shows. But there’s nothing really stopping it from doing that.</p>
<p>That said. I was surprised the show included a part where the newly wed duchess unintentionally offends the townspeople. She was asked which of the three pigs at a festival should be slaughtered. Aghast at the thought of violence, she says none of them are to be killed. This effectively denies any of the townspeople the right to make money from their pigs.<br />
It’s a nice example of Chesterton’s fence.</p>
<p>The Bridgerton series features eight books, and various other series in the same setting. If it remains one book per season, that’d be eight seasons. Eight seasons is a lot. Moreso because the show creates its own subplots which diverge from the much better source material. I don’t think this dramatic half is good enough to last that long. I’m curious to see what they do with it.</p>]]></summary>
</entry>
<entry>
    <title>Early Impressions of BM40RGB Ortholinear Keyboard</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2020-08-22-early-impressions-of-bm40rgb-ortholinear-keyboard.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2020-08-22-early-impressions-of-bm40rgb-ortholinear-keyboard.html</id>
    <published>2020-08-22T00:00:00Z</published>
    <updated>2020-08-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I finally received my BM40RGB keyboard that I’d ordered from <a href="https://www.aliexpress.com/item/4001147779116.html">KPRepublic on AliExpress</a>.</p>
<p><img src="http://rgoulter.com/images/keyboards/bm40rgb/bm40rgb.jpg" style="width:70.0%" /></p>
<h2 id="quick-summary">Quick Summary</h2>
<ul>
<li><p>it’s a <em>relatively</em> cheap, easy to assemble fancy keyboard,</p></li>
<li><p>it’s nicer to use compared to a typical keyboard for usecases where you could use the computer with both hands on the keyboard,</p></li>
<li>it took a bit of time to get used to.
<ul>
<li>(The alphabetical keys were easy to get used to, since I had trained with ‘touch typing’ discipline to learn the Dvorak; but the symbols took some time to get used to).</li>
</ul></li>
</ul>
<p>Recommendation: - Nifty if you’re comfortable spending most of your time in tmux/vim or emacs, and would prefer a keyboard-focused experience. The reduced number of keys isn’t a hinderance. - If the grid-like arrangement of keys is still appealing, but you’d prefer to use it for mouse+keyboard activities like First Person Shooter games, then a larger ortholinear keyboard like an XD75 would be better.</p>
<h2 id="keyboard-overview">Keyboard Overview</h2>
<p>In case “self-assembled hot-swappable 40% ortholinear mechanical keyboard” is all opaque jargon:</p>
<h4 id="a-what-now">A What Now?</h4>
<p>The keyboard is a “40% ortholinear mechanical keyboard”.</p>
<p>The “mechanical” part refers to the key switches. They’re nicer to type with than more typical keyboard switches. (There’s a variety of mechanical key switches; loud/clicky is the most fun).</p>
<p>The “ortholinear” refers to the keys being aligned in a grid. Whereas typical keyboards are “row-staggered”. (Keyboards are now “row-staggered” because typewriters had to be, and that’s what everyone is used to, I guess).<br />
An iteration further is “columnar staggered” where the columns are staggered to better suit how fingers are staggered.</p>
<p>The “40%” refers to approximately how many keys are on the keyboard compared to a full-sized 104-key keyboard. Keyboards with less keys isn’t limited to ortholinear boards. e.g. Razer recently released a 60% keyboard. – But, the most prominent ortholinear keyboards come from &lt;olkb.com&gt;. (With sizes: a “50%” named the Preonic, and a “40%” named the Planck).</p>
<p>Well. Clearly “custom mechanical keyboards” is a rabbit-hole of a hobby topic. But I’d still recommend looking into it for people who work with a keyboard all day. The main benefit to aim for would be a more ergonomic experience.</p>
<p>With my keyboard: The BM40RGB is the keyboard PCB.<br />
To complete the keyboard, the PCB is mounted in a case, key switches are connected to the PCB, and key caps are put on the key switches.</p>
<p>In the picture above, the case is a <a href="https://www.aliexpress.com/item/32832624442.html">nice anodized aluminium case</a>. The keycaps are the “big bang” <a href="https://www.melgeek.com/collections/keycaps-1">key cap set from melgeek.com</a>. The key switches are Gateron Brown.</p>
<h4 id="assembly">Assembly</h4>
<p>In terms of putting it together: Typically with assembling a keyboard from a PCB, case, and switches, the switches require soldering to be connected to the PCB. (In my limited experience: soldering itself isn’t too hard. Desoldering can be harder. A cheap soldering iron will get the job done, but is harder to use than nicer soldering irons for inexperienced hobbyists).<br />
The BM40RGB switches don’t require soldering, because the PCB has been assembled with Kailh “hot swap” sockets. – I’ve seen comments that these switches can be fragile, and that Mill-Max sockets are nicer. But these still do the job of making keyboard assembly accessible.</p>
<p>Moreover, the BM40RGB is pretty blinged-out. Assembled on the PCB are RGB LEDs underneath each switch, as well as underglow.<br />
Necessary to have? No. Fun? Yes.</p>
<p>So. It was pretty easy to put together. A bit more difficult than putting Lego together, but not by that much.</p>
<h4 id="firmware">Firmware</h4>
<p>One other good thing about this BM40RGB PCB is that <a href="https://qmk.fm/">QMK</a> can be used as the keyboard’s firmware.<br />
This is useful because QMK can be used to customise not only the layout of the keys, but also the functionality of the keyboard. Examples of features I’ve found useful:</p>
<ul>
<li><p>Support different “layers” for the keyboard. This almost goes without saying, since otherwise it really would be infeasible to use a keyboard with so few keys. Similar in usage to how pressing shift + ‘5’ result in a ‘%’, the different layers allow pressing the same physical key to output different key codes. e.g. the letter ‘t’, ‘5’, and ‘%’ can be produced from the same key.</p></li>
<li><p>Being able to switch the “capslock” key to “Escape key if tapped, Ctrl key if held”; and the “enter key” to “Enter key if tapped, Ctrl key if held”. (I’ve tried this with software like AutoHotKey, but the result from QMK is more reliable, and easier to customise like that).</p></li>
<li><p>Being able to switch the keyboard itself between QWERTY and Dvorak keyboard layouts. (QMK itself assumes that the OS is using a US keyboard layout).</p></li>
<li><p>Fancy RGB lighting effects. e.g. making a splash of colours as each key is pressed.</p></li>
</ul>
<p>There are other features that sound neat, but that I haven’t tried yet. e.g. <a href="https://docs.qmk.fm/#/feature_leader_key">using a vim-style “leader key”</a>, <a href="https://docs.qmk.fm/#/feature_space_cadet">space-cadet style shift keys</a>.</p>
<h2 id="my-experience-so-far-with-the-keyboard">My Experience So Far With the Keyboard</h2>
<p>In a sentence: I prefer using this keyboard for use cases where I don’t need to be using a mouse. That is, in cases where I can have both hands on the keyboard.</p>
<h4 id="my-contextbackground">My Context/Background</h4>
<p>That preference might need to be further qualified. With my typical usage and workflows, I can do a lot <em>without having to use the mouse</em>.</p>
<p>I’m happiest when in working in Emacs or tmux, and editing with vi keybindings.</p>
<p>As with many programmers, I never bothered learning ‘finger discipline’ for the QWERTY layout. i.e. each finger sticks to its own columns. On the other hand, I’m not sure anyone learns the Dvorak layout without using this ‘finger discipline’.</p>
<h4 id="things-i-like-about-it">Things I Like About It</h4>
<p>This keyboard saves so much on desk space compared to a full-sized keyboard.</p>
<p>It saves more than you’d think just by looking at the picture. Here’s the keyboard laid overtop of the full-sized Razer BlackWidow Ultimate 2016 keyboard:</p>
<p><img src="http://rgoulter.com/images/keyboards/bm40rgb/comparison_razer-bw-2016.jpg" style="width:70.0%" /></p>
<p>I haven’t yet tried using it with a laptop on a small table. e.g. at a cafe. But, if I wanted to use a keyboard with a laptop like that, I’d rather have a small keyboard like this.<br />
– And the size does mean it’s convenient to carry in a bag.</p>
<p>In terms of typing speed:<br />
- Using the ‘simple words’ test on 10fastfingers.com, <a href="https://10fastfingers.com/user/2133712/">using the Dvorak layout with a row-staggered laptop keyboard</a>, my average was <strong>83 WPM</strong>. Personal Best was around 90 WPM. - That’s about what <a href="https://10fastfingers.com/user/2179576/">I get with the BM40RGB</a>. (Although when I tried just now, I managed to score 100 WPM. So, it’s likely that it’s easier to type Dvorak layout on an ortholinear keyboard). - For the sake of transparency: <a href="https://10fastfingers.com/user/2155355/">using QWERTY layout with my Razer BlackWidow</a>, I could average around 100 WPM, and my Personal Best was <strong>around 108 WPM</strong>. - For a laugh I tried with QWERTY. – I got about <strong>70 WPM</strong>. That’s partly from not using QWERTY layout with this keyboard very much. But also because with QWERTY my fingers physically know where the keys are supposed to be; whereas with Dvorak my hands know which fingers to use for each key.</p>
<p>So.<br />
Typing speed for typing words isn’t really sacrificed if you drilled with touch-typing exercises. (Typing speed for symbols is discussed later).<br />
The bigger benefit to ortholinear is it’s much more comfortable than a row-staggered layout. I’m willing to sacrifice some typing speed for that. – I can still type on a normal row-staggered QWERTY keyboard; but it feels so awkward to.</p>
<p>The symmetry of the ortholinear keyboard is so good.<br />
The ortholinear layout makes it much easier to make use of the modifier keys (alt, ctrl, shift, etc.) on the right hand side of the keyboard. It’s not that I couldn’t make use of right-shift or right-ctrl etc. when using a full-sized row-staggered keyboard.<br />
– Row-staggered layouts have all sorts of different distances between keys. (e.g. distance the pinky finger travels from home row to ctrl key is different between left hand and right hand; distance from ‘f’ to ‘t’ is different than from ‘j’ to ‘y’. etc.).</p>
<p>The RGB lighting effects are fun.<br />
If you’re using this keyboard, you’re probably not looking down at the keyboard when you type. That’s why the ‘ambient’ animation effects are cool.</p>
<h4 id="downsides-and-things-i-dont-like">Downsides, and things I don’t like:</h4>
<p>Most of this applies to the 40% size, and some specifically to the BM40RGB PCB.</p>
<p>The downsides to ortholinear?<br />
As noted above, if your fingers are used to row-staggered and haven’t trained ‘finger discipline’, then it will be a clumsy transition.<br />
For custom keycaps, most keycap sets are for standard layouts of keyboards. Ortholinear layouts like this all use “1 unit” keys. Finding matching keycap sets is somewhat harder.</p>
<p>Downsides to the 40% size?<br />
Yes, it is more difficult. (This also comes with a ‘bragging factor’, though).<br />
Whereas the alphabetical characters are quick to pick up, the symbols take much more time. After a week and a half of usage (and some minor layout changes to improve consistency), I’m much quicker than I was; but I still make more errors than I’d like.</p>
<p>If a keyboard should disappear, and be a transparent instrument between the user’s mind and what’s on the page: then, unfortunately, it takes quite a bit of time to get there with such a small keyboard.</p>
<p>I don’t think the reduced number of keys of a 4x12 ortholinear provides more than a marginal ergonomic benefit compared to a 5x12 ortholinear layout. And not enough of a benefit for the added difficulty.</p>
<p>A 40% layout is much harder to play PC games that make full use of the number keys. (e.g. for tool belts like in Minecraft or control groups like in Age of Empires).<br />
I tried with Halo, and it seems ok at that, after rebinding the controls. (Subject-to aforementioned clumsiness at being used to row-staggered layouts for QWERTY).<br />
My Razer Naga has long since broken on me, so I can’t say for sure if that would mitigate it. This is literally the use case for that mouse, though.</p>
<p>There’s definitely a time-sink aspect to this, as with any hobby. I don’t find myself constantly re-customizing my keyboard layout. (I think some people do; but I don’t know if that’s because they use a wider range of software than I do, or because they use a narrower range of software).</p>
<h2 id="further-down-the-rabbit-hole-of-this-hobby">Further Down the Rabbit Hole of this Hobby</h2>
<h4 id="alternatives-and-other-considerations">Alternatives and Other Considerations</h4>
<p>I love this keyboard. Other keyboards are nice, too.</p>
<p>What are the differences between this and the Planck PCB?</p>
<p>For one, the BM40RGB is available from KPRepublic. This makes it more accessible for me than the mainly US/EU websites.<br />
With such a niche hobby, often websites which sell custom keyboard parts will be out of stock on certain parts. e.g. <a href="https://olkb.com/products/planck-pcb">the Planck PCB on olkb.com</a> is out of stock at the time of writing.<br />
There are <a href="https://drop.com/buy/planck-mechanical-keyboard">Planck PCBs plus cases available on drop.com</a>. (Drop grew its brand as massdrop).<br />
Also, ZSA Labs (who make the Ergodox EZ) also offer the <a href="https://ergodox-ez.com/pages/planck">Planck EZ</a>.</p>
<p>Other than availability, the Planck has other advantages e.g. it’s much more customizable. e.g. BM40RGB only supports one arrangement of keys, whereas the Planck PCB doesn’t require the small spacebar, and could have a full 48 keys. etc.</p>
<p>The BM40RGB PCB also didn’t require any soldering.<br />
But if you’re fine with <a href="http://www.40percent.club/2017/03/ordering-pcb.html">ordering a PCB</a> and doing soldering yourself, here are some projects I came across:</p>
<ul>
<li><a href="https://github.com/ai03-2725/Contra">ai03-2725’s Contra</a> is a PCB which aims to be low cost to make.</li>
<li><a href="https://github.com/AcheronProject/SharkPCB">AcheronProject’s Shark PCB</a> is a PCB which was designed because the cost to buy a Planck from drop.com would’ve been infeasibly high.</li>
<li>Skip the PCB, and <a href="https://docs.qmk.fm/#/hand_wire">hand-wire the switches together in a plate</a>.</li>
<li>Or design <a href="http://blakesmith.me/2019/01/16/making-my-own-usb-keyboard-from-scratch.html">the PCB yourself</a> (whoa!).</li>
<li>And <a href="https://github.com/BenRoe/awesome-mechanical-keyboard/blob/master/docs/README.md">BenRoe/awesome-mechanical-keyboard</a> is a pretty long list of all sorts of fancy mechanical keyboards.</li>
</ul>
<p>If ortholinear sounds good, but the 40% form-factor sounds to small, there are larger ortholinear keyboards. As far as I understand, several 75-key ortholinear keyboards will fit into most GH60-compatible cases. e.g. <a href="https://www.aliexpress.com/item/32818745981.html">KPRepublic’s XD75</a></p>]]></summary>
</entry>
<entry>
    <title>Repairing my Razer Keyboard</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2020-07-26-repairing-my-razer-keyboard.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2020-07-26-repairing-my-razer-keyboard.html</id>
    <published>2020-07-26T00:00:00Z</published>
    <updated>2020-07-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I recently repaired my mechanical keyboard. It’s a Razer BlackWidow Ultimate, 2016 Edition that I’d bought on sale a couple of years ago.<br />
The result was an imperfect success.</p>
<p>The successful part: my keyboard now works and can be reliably used for typing and gaming. (Before, many of the keys didn’t activate when pressed; or only activated some of the time. Or seemed to work most of the time, but then sometimes would fail to activate).</p>
<p>The imperfect part: currently, three keys don’t work: numpad 5, numpad 4, and the right Windows key. And I didn’t bother to resolder the per-key LEDs. (And some blemishes on the PCB from some subpar desoldering work).</p>
<p>The repair involved replacing all the key switches on the keyboard.<br />
This came after I’d tried to see if compressed air would help with the keys.<br />
And after seeing if just desoldering and resoldering some of the ‘faulty’ keys would help. (This sortof seemed to improve some of the keys, at least from ‘not working at all’ to ‘working reliably’; but, it didn’t fix all of the keys).<br />
And after removing some of the switches, taking them apart to see if there was any ‘smoking gun’ that indicated any problems.</p>
<p>Most of the difficulties I had with desoldering would probably have been avoided if I had bought nicer soldering equipment. (I was just using the stuff on AliExpress which had the most orders). And if I had ordered soldering flux.</p>
<p>Searching the web, and Reddit, for advice would have helped with some of this, too. These were invaluable resources for finding out how to even do this stuff.</p>
<p>As an example of how I found desoldering difficult, my desoldering attempts would sometimes end up looking like this, despite my best efforts:</p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/desoldering_difficulties_example.jpg" style="width:70.0%" /></p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/desoldering_difficulties_example2.jpg" style="width:70.0%" /></p>
<p>I didn’t have any significant success with desoldering braid. I don’t know why. Maybe the braid I bought was subpar quality, or the soldering iron. – But it didn’t seem to work like it did in the YouTube videos I watched.</p>
<p>The LEDs themselves were difficult to deal with.<br />
The LEDs make the keyboard fancy, in that they light up when the key is pressed; but the LEDs make changing key switches more difficult as they must be desoldered and removed before the key switch can be desoldered and removed.<br />
Desoldering and removing the LEDs was not easy.<br />
So my process was: I used a desoldering pump to remove some of the solder. Then I heated the LED legs so that I was able to remove the LED using tweezers. (I didn’t bother to do anything after this. But if I had to re-insert the LEDs, I would remove the rest of the solder).</p>
<p>Here’s another example of a difficulty I had. The F6 key here still had enough solder that the switch couldn’t be removed easily. (To fix this, you ought to add more solder back.. but I found this risked getting into the bad situation like above).</p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/desoldering_difficulties_example_f6.jpg" style="width:70.0%" /></p>
<p>Unfortunately, with my inexperience (and cheap tools?), I did end up damaging the board quite a bit.<br />
Most notably, Numpad 5:</p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/desoldering_damaged_num5.jpg" style="width:70.0%" /></p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/desoldering_damaged_numpad_back.jpg" style="width:70.0%" /></p>
<p>(Some hand-wiring could be used to get this working again; but I don’t have the motivation or the resources to do that just yet).</p>
<p>The desoldering work on the rest of the PCB wasn’t great either. But, these keys seem to work fine anyway.</p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/desoldering_result_not_pretty.jpg" style="width:70.0%" /></p>
<p>After desoldering and removing the switches, the rest of the process was relatively straightforward: replace the switches, solder these, and reassemble the keyboard.</p>
<p>Even putting the switches in isn’t foolproof. e.g. Here some of the switches had their legs bent by not being careful when putting the switch in. (To be honest, I was impatient enough that I soldered some of these switches before realising this was a problem).</p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/reswitching_difficulties.jpg" style="width:70.0%" /></p>
<p>Here’s a view of the PCB and case with Gateron Blue switches in them.</p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/reswitching_result.jpg" style="width:70.0%" /></p>
<p>And here’s the final result.<br />
I used a keycap set with cute Totoro keycaps. (I don’t think these keycaps would show off the LEDs anyway).</p>
<p><img src="https://rgoulter.com/images/keyboards/razer-blackwidow-ultimate-2016/final_result.jpg" style="width:70.0%" /></p>
<p>I’m pleased enough with the result.<br />
I probably wouldn’t be so pleased if the keys I broke were keys I use more often than the numpad.</p>]]></summary>
</entry>
<entry>
    <title>Replaying Halo CE</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2020-07-25-replaying-halo-ce.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2020-07-25-replaying-halo-ce.html</id>
    <published>2020-07-25T00:00:00Z</published>
    <updated>2020-07-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Halo recently re-released to Steam as part of the Halo Master Chief Collection. And I finally got around to re-playing it.</p>
<p>I’d played the game on PC some time after it was released.<br />
But I couldn’t remember the game as a whole. I did remember bits and pieces. I remember the first time I got to drive the Warthog vehicle. I remember parts of the game which introduce the zombie-like Flood monsters. – I didn’t remember the ending parts of the game.</p>
<p>More recently, I wasn’t super impressed with my first playthrough of “Halo: Reach”.<br />
I didn’t like the story.<br />
I wasn’t good enough at the gameplay to get into a good flow of it.</p>
<p>Halo CE is simpler than Halo Reach.<br />
It has fewer kinds of enemies.<br />
It doesn’t really have spaceship combat like Halo Reach had.<br />
Its story is essentially much simpler.<br />
– I think it sticks closer to the parts of the game I liked more.</p>
<p>The shooty-shooty parts are satisfying.<br />
The shotgun feels solid as it destroys the zombie-like Flood units in one hit.<br />
The enemies are threatening enough to demand attention.<br />
It’s nice when the game offers good tactics to hard-counter enemies. e.g. the human bullet-fed weapons are good against unshielded enemies and against the Flood, the alien laser weapons are good against shielded enemiesand against the robotic enemies.</p>
<p>Some parts weren’t so satisfying.<br />
The game’s default assault rifle is a pea-shooter. It’s generally just a bad gun to use.<br />
When the game did try and deliver story, it was often overlapping with action parts of the game.<br />
Some parts of the game, especially near the end, had infinitely-spawning enemies but it’s not really clear when you’re supposed to run, or supposed to just fight.</p>
<p>I also think that the auto-regenerating shield, and the limit of carrying only two weapons, limits the gameplay.<br />
Compared to Doom Eternal:<br />
When you run out of shields, you have to duck out of combat. When you run out of shields/health in Doom Eternal, you have to aggressively attack weaker enemies.<br />
When you need to use different weapons to fight different enemies: Halo you have to strategically choose two weapons. In Doom Eternal, your only limit is the ammunition for the weapons you have. And if you run out, you get more ammunition by chainsawing your enemies.</p>
<p>Halo does at least have vehicles which was quite fun.</p>]]></summary>
</entry>

</feed>
