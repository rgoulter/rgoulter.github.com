<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2022-12-11T00:00:00Z</updated>
    <entry>
    <title>Factorio on the Switch Still Scratches the Itch</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2022-12-11-factorio-on-the-switch-still-scratches-the-itch.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2022-12-11-factorio-on-the-switch-still-scratches-the-itch.html</id>
    <published>2022-12-11T00:00:00Z</published>
    <updated>2022-12-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Factorio is a game which is widely regarded as addictingly fun to play.</p>
<p>The ostensible goal of the game is to assemble &amp; launch a rocket ship.</p>
<p>The start of the game is reasonably familiar: you control a character, mine some
ores from resource deposits, and then use these resources to assemble tools or
whatever item you need. (e.g. you’ll mine some iron ore, put this ore in a
furnace,
and use the resulting iron plates to assemble an iron pickaxe).<br />
– Factorio allows for automating these process. A mining machine can
automatically gather resources; conveyor belts can automatically move these
resources along; an assembly machine can automatically assemble some item, and
inserter arm machines can automatically insert items from the convey belts into
the assembly machines.</p>
<p>The first time you play the game (if you don’t read guides first), you’ll
probably end up with a factory which works, but you’ll certainly end up with
something that’s difficult to maintain or improve on. You’ll end up with
a disorganised mess.<br />
(Then you hear the term “main bus”, and that helps organise things <em>a lot</em>).</p>
<p>The dynamic of the game ends up feeling very similar to programming or
electrical engineering.<br />
So much so that, while I think most programmers who play the game find it
addictively engaging, there are also those who don’t want to play it. – I think
it’s one of two responses: “it’s similar to what I do for work, but without
having to do what others tell me to do, and without having to be reliable. Fun!”
or “it’s similar to what I do for work, but I don’t benefit from putting in the
effort.
Why would I do that?”.<br />
I mean, there’s a satisfying feeling of constructing a system which works (as
well as ‘debugging’ why some system doesn’t work).</p>
<p>I think complementing this is that usually there are multiple things that you
can do to reduce the mess in your factory; and that improvements often have some
delay before you see the tangible benefits from them. So there’s often some task
you can aim towards that feels satisfying to do. (Sid Meier’s Civilization games
are similarly entralling).</p>
<p>Probably “fun is in the eye of the beholder”.<br />
There are parts of Factorio where I think it’s fun for me to come up with my own
solution to the problem. There are parts where I’d rather lookup a guide for how
to do it on the Factorio wiki, or some YouTube video.</p>
<p>I found it fun to play Factorio with particular challenges/goals in mind. One
achievement requires that you craft only the minimal number of items by hand
(and use assembly machines to bootstrap the rest). Another achievement was to
play the game on non-peaceful, but without using solar power.</p>
<p>“Non-peaceful” mode is the default setting for the enemies’ aggression mode.
The player’s factory produces pollution; the enemies react to the pollution by
getting stronger and attacking the player every now and then in waves. Whereas,
in peaceful mode, enemies will only attack if attacked first (and attacking
one enemy base doesn’t ‘aggro’ other enemy bases).<br />
In my experience, non-peaceful mode ‘just’ requires the extra pushback/effort of
automatically building (sufficient) ammunition/defenses, etc. – It adds a bit
of pressure/flavor to the game, and isn’t extremely stressful, but I prefer to
play with peaceful mode.</p>
<p>At the higher end of things, some players enjoy seeing how frequently their
factory is able to assemble/launch a rocket (since this requires a well organised
factory at significant scale). – I’ve not yet tried doing this.</p>
<p>For the playthroughs I’ve spent significant time on, I inevitably had the same
task/notes system I use when programming. (Start the day by writing down status
of WIP; write down tasks to-do, and obstacles faced which need to be resolved).</p>
<p>Anyway.</p>
<p>The game was recently released for the Nintendo Switch. I was travelling for a couple of
weeks, have a Nintendo Switch, and have enjoyed playing Factorio.</p>
<p>I can vouch that the game scratches the same itch as it does on PC.</p>
<p>The controls are reasonably nice, although using the controller won’t be as fast
as using the mouse.</p>
<p>I think if someone were (somehow) playing through Factorio for the first time on
the Nintendo Switch, I think they’d opt to play on PC by the time they got to
the blue science technologies. (About halfway through the game). – Because at
that point, you’ve unlocked trains and the construction robots and solar power
and electric furances… there’s lots of stuff which can all be used to improve
your factory. (Trains are earlier; but, I didn’t bother assembling rail stuff
until after I’d assembled blue science).</p>
<p>I’d bet that the Switch is suited to people having the large post-game factories.
I never noticed performance issues in my playing, though.</p>
<p>If someone were wondering whether to by Factorio for PC or for the Switch, I’d
say “yes”. Well, I don’t think anyone’s going to regret buying this game. I
think PC is the better environment to play it on. But, on the Switch it still
stratches the same itch just the same.</p>]]></summary>
</entry>
<entry>
    <title>The CapsLock Key was not the Problem</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-10-28-the-capslock-key-was-not-the-problem.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-10-28-the-capslock-key-was-not-the-problem.html</id>
    <published>2022-10-28T00:00:00Z</published>
    <updated>2022-10-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>It’s fashionable among developers to give a tip about the CapsLock key: you can switch out its functionality, replacing it with the Escape key.</p>
<p>When I did this, in order to then type out something like <code>SEQUENCE_OF_UPPERCASE_WORDS</code>, I’d hold down the shift key using my left pinky finger, and type out the letters as necessary.<br />
– And if you can do that, then the CapsLock key is redundant.</p>
<p>These days, I prefer using a fancy, symmetrical keyboard. (I think buying an expensive fancy keyboard is justifiable if it’s symmetrical, and offers more keys for the thumb to press; and I don’t think it makes sense to spend a lot of money on a keyboard which isn’t symmetrical, etc.).<br />
And the fashionable (and I think superior) way of arranging the modifier keys Shift, Ctrl, Windows/Cmd, Alt keys is to put these as dual-use tap-hold keys
on the home row. (Which allows access to these keys without having to move your hand).</p>
<p>With such a keyboard, and with home row modifiers, the “use an improper position which stretches your weak pinky finger” technique doesn’t really work.<br />
Instead, to type <code>UPPERCASE</code>, you end up having to alternate use of the shift key; pressing shift for the opposite side of the letter being pushed.<br />
– I can do this; but I find it to be slower, and error prone. (It’s easy to miss the timing, and type ‘THhiS’ instead of ‘THIS’, as the Shift key requires holding down ‘h’).</p>
<p>For long sequences of uppercases letters, it does make sense to have the CapsLock key available. – Though, with a fancy keyboard, you can have the CapsLock key accessible on (or hidden away on) a layer.</p>
<p>Rather. The CapsLock functionality itself isn’t inherently useless, and needn’t be banished.<br />
It’s that, in a standard keyboard, the real-estate of “on home row, easy to reach” that the CapsLock key occupies is put to much better use by using it for Escape (or Ctrl, or dual-use Escape/Ctrl).<br />
Since a fancy keyboard is nicer to use (the modifier keys are easy to each, and layers allow bringing more keys to within easy reach), you get to use the CapsLock key without it taking up space which could be better utilized.</p>]]></summary>
</entry>
<entry>
    <title>The just Command Runner is an Neat Tool</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-10-17-the-just-command-runner-is-an-neat-tool.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-10-17-the-just-command-runner-is-an-neat-tool.html</id>
    <published>2022-10-17T00:00:00Z</published>
    <updated>2022-10-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I came across the tool <a href="https://just.systems/man/en/chapter_1.html">just</a>.</p>
<p>It’s a tool for running commands/scripts.</p>
<p>My initial impression was “that’s it?”.</p>
<p>I might describe it slightly differently, compared to other common workflows:</p>
<ul>
<li>It’s common to see <code>make</code> used with a bunch of <code>.PHONY:</code> targets. The point
of a <code>make</code> is to describe how some target is built. But since people will
often want to run tasks (e.g. run tests with <code>make test</code>), a ‘phony’ target
is a task where the target isn’t a file that gets built.
<ul>
<li>Compared to “use <code>make</code> with a bunch of <code>.PHONY</code> targets”, <code>just</code> has some
nice quality of life features.
<ul>
<li>e.g. with <code>just</code>, you don’t have to indent the definitions using Tabs.</li>
<li>e.g. <code>just</code> can list the targets in its <code>justfile</code>.</li>
</ul></li>
</ul></li>
<li>In the NodeJS ecosystem, its <code>package.json</code> files often contain a <code>scripts</code>
property, which is used to describe common tasks that will be run when
working with the project.
<ul>
<li>Compared to this, a <code>justfile</code> is more expressive / less constrained.
<ul>
<li>e.g. ‘make with <code>.PHONY</code> targets’ is more expressive than
<code>package.json</code>’s scripts`.</li>
</ul></li>
</ul></li>
<li>It’s common to have a ‘script directory’ where you keep a bunch of scripts
for common functionality.
<ul>
<li>Compared to this, <code>just</code> allows for a consistent starting point, some
quality of life features (e.g. by-default always starting scripts with
starting directory being the <code>justfile</code>’s directory) and allow for
integration with editors.</li>
</ul></li>
</ul>
<p>Overall, I find that quite persuasive: it’s more polished/tailored than <code>make</code>
for a particular use case; and that use case is something which developers
definitely make use of.</p>
<p>There is the downside that <code>just</code> isn’t a standard tool that you can hope to
find on most systems (in contrast to e.g. <code>python</code>, <code>bash</code>, or maybe <code>awk</code> or
<code>make</code>).<br />
But, installing packages isn’t all that hard. (And <code>just</code> is <a href="https://just.systems/man/en/chapter_4.html">available in many
places</a>).<br />
And I use <code>nix</code>, so it’s especially easy to ensure it’s available when I want
it.</p>
<p>I think this is a good example of “sometimes better isn’t MUCH better; it’s
merely slightly better”.</p>]]></summary>
</entry>
<entry>
    <title>Using NixOS Specialisations to Try Out Different Desktop Environments</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-10-06-using-nixos-specialisations-to-try-out-different-desktop-environments.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-10-06-using-nixos-specialisations-to-try-out-different-desktop-environments.html</id>
    <published>2022-10-06T00:00:00Z</published>
    <updated>2022-10-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Recently, Tweag’s blog featured a post on <a href="https://www.tweag.io/blog/2022-08-18-nixos-specialisations/">NixOS
specialisations</a>.</p>
<p>It allows for having an additional boot entry in grub which
loads a slightly different configuration. – This makes it very convenient
to try slightly different NixOS configurations.</p>
<p>As the blogpost above shows, this can be used for different desktop environments.</p>
<p>I ran into some problems with conflicting attributes, and wasn’t previously
aware of how to set the priority. (e.g. as discussed in this <a href="https://discourse.nixos.org/t/what-does-mkdefault-do-exactly/9028">discourse
post</a>).</p>
<p>e.g. I’d wanted to try out the <a href="https://wiki.archlinux.org/title/Pantheon">Pantheon</a> desktop environment, which comes out of <a href="https://elementary.io/">Elementary OS</a> and looks very nice. – But, if you try to enable both <code>services.xserver.desktopManager.gnome</code> and <code>services.xserver.desktopManager.pantheon</code>, you get an error like:</p>
<pre><code>error: The option `environment.sessionVariables.NIX_GSETTINGS_OVERRIDES_DIR&#39; has conflicting definition values:</code></pre>
<p>Not knowing about overriding attribute priorities, my first attempt at solving this problem was using <code>specialisations</code> to separate the conflicting config options: <a href="https://github.com/rgoulter/nix-user-repository/blob/8df3abaea46b8fbd5d212e64c209d5ef0602955c/modules/desktops.nix">8df3…/modules/desktops.nix</a>.</p>
<p>Knowing the above about overriding attribute priorites, it makes sense that it’s possible to use Gnome in the ‘parent’ config, and to disable Gnome in the specialisations, with:</p>
<pre><code>services.xserver.desktopManager.gnome.enable = lib.mkDefault true;</code></pre>
<p>e.g. <a href="https://github.com/rgoulter/nix-user-repository/blob/c3f0df686ea024f3fae8da13dae6e10a02e920cd/modules/desktops.nix">c3f0…./modules/desktops.nix</a>.</p>
<pre class="nix"><code>{ config, lib, pkgs, ... }:

{
  services = {
    xserver = {
      desktopManager.gnome.enable = lib.mkDefault true;
      displayManager.gdm.enable = lib.mkDefault true;

      enable = true;

      layout = &quot;us&quot;;
    };
  };

  specialisation = {
    gnome.configuration = {
      services.xserver = {
        desktopManager.gnome.enable = true;
        displayManager.gdm.enable = true;
      };
      system.nixos.tags = [ &quot;gnome&quot; ];
    };
    pantheon.configuration = {
      services.xserver = {
        # Pantheon conflicts with gnome
        desktopManager = {
          gnome.enable = false;
          pantheon.enable = true;
        };
        # Pantheon requires lightdm
        displayManager = {
          gdm.enable = false;
          lightdm.enable = true;
        };
      };
      system.nixos.tags = [ &quot;pantheon&quot; ];
    };
    xfce.configuration = {
      networking.networkmanager.enable = true;
      services.xserver = {
        desktopManager = {
          gnome.enable = false;
          xfce.enable = true;
        };
        displayManager = {
          gdm.enable = false;
        };
      };
      system.nixos.tags = [ &quot;gnome&quot; ];
    };
  };
}</code></pre>]]></summary>
</entry>
<entry>
    <title>Git Worktrees a Neat Command for Working with Multiple Versions of a Repo</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-10-01-git-worktrees-a-neat-command-for-working-with-multiple-versions-of-a-repo.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-10-01-git-worktrees-a-neat-command-for-working-with-multiple-versions-of-a-repo.html</id>
    <published>2022-10-01T00:00:00Z</published>
    <updated>2022-10-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://git-scm.com/docs/git-worktree">git-worktree</a> has apparently been in git
for some time, but I’ve only recently learned of it.</p>
<p>It lets you conveniently check out multiple versions of a repository at once.</p>
<p>Which may sound only marginally useful; but I find the benefit to be better than
it sounds. (e.g. Without the worktree command, perhaps the easiest way to
imitate it would be to clone from the local repository, and adjust the remotes).</p>
<p>I’ve found it’s useful to keep a checkout of the master branch, as well as using
worktrees for feature branches, or other experimenting.</p>
<p>By keeping work-in-progress in a separate working tree, you don’t have to worry
about the working tree being dirty in order to check out different versions.</p>]]></summary>
</entry>
<entry>
    <title>Signal Boost drduh's Yubikey Guide</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-09-30-signal-boost-dr-duhs-yubikey-guide.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-09-30-signal-boost-dr-duhs-yubikey-guide.html</id>
    <published>2022-09-30T00:00:00Z</published>
    <updated>2022-09-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://github.com/drduh/YubiKey-Guide" class="uri">https://github.com/drduh/YubiKey-Guide</a></p>
<p>I recently set up my Yubikeys so that I could use the key to hold the private
keys I use with git.</p>
<p>I spent a bunch of time reading through various guides discussing how to set up
a master key with an offline backup, and how to put this on a GPG smartcard.</p>
<p>Drduh’s guide above is the best I’ve come across.</p>
<p>e.g. Most guides only mention the interactive way to generate keys. This guide
at least mentions using a <a href="https://github.com/drduh/YubiKey-Guide#create-keys-with---batch-and---quick-add-keys">the batch
interface</a>.</p>
<p>(c.f. <a href="https://github.com/rgoulter/nix-user-repository/blob/a96522d387396e7dd9ab8b6e489a97ffb6bcec92/scripts/gpg-quick-generate-master-key.sh">my key generation
invocations</a>).</p>]]></summary>
</entry>
<entry>
    <title>Travel Setup Using a Fancy Keyboard with a Laptop</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-08-24-travel-setup-using-a-fancy-keyboard-with-a-laptop.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-08-24-travel-setup-using-a-fancy-keyboard-with-a-laptop.html</id>
    <published>2022-08-24T00:00:00Z</published>
    <updated>2022-08-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>One of the downsides to using a fancy keyboard is that it’s difficult to use
when out and about with a laptop.</p>
<p>This is arguably mitigated by that laptops themselves have a keyboard.</p>
<p>I like my small, fancy keyboard much more than the laptop keyboard, though.
(My thumbs get access to 2-3 keys each on my fancy keyboard, etc.).</p>
<p>Here’s the travel setup I’ve used:</p>
<p>The first thing which helps is getting a bit of acrylic cut to shape, with some
bumpons to lift it above the keys:</p>
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/keyboards/travel-setup/keyboard_travel_mba.JPG" /></p>
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/keyboards/travel-setup/keyboard_travel_mba_plate.JPG" /></p>
<p>In terms of cables:</p>
<p>I was able to have a working setup with an ordinary USB-C cable. Since the
cable needs some clearance, the keyboard couldn’t quite be close to the screen.
Thanks to how HUGE the Macbook trackpads are, I could get by without needing an
extra mouse.</p>
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/keyboards/travel-setup/keyboard_travel_mba_plate_usbc.JPG" /></p>
<p>What I haven’t yet tried while traveling, but I expect to work much better, is
to use a USB-C cable with a right-angle connector:</p>
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/keyboards/travel-setup/keyboard_travel_mba_plate_rightangle.JPG" /></p>
<p>Unfortunately, use of right-angled connectors like this depends a bit on the
keyboard. In the following pictures, both have a magnetic connector inserted.
The right-angled USB-C cables I’ve tried cannot connect to the BM40, since the
case is too thick.</p>
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/keyboards/travel-setup/keyboard_bm40.JPG" /></p>
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/keyboards/travel-setup/keyboard_gh60_case.JPG" /></p>]]></summary>
</entry>
<entry>
    <title>A Visual Explanation of GPG Subkeys</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-06-10-a-visual-explanation-of-gpg-subkeys.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-06-10-a-visual-explanation-of-gpg-subkeys.html</id>
    <published>2022-06-10T00:00:00Z</published>
    <updated>2022-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>As with anyone who’s been using git for long enough, I’m familiar enough with
SSH keys (Even to the point where I don’t really need to follow <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">the GitHub docs
for generating a new
key</a>.</p>
<p>My developer journey hasn’t led me to build the same intuition for GPG keys.</p>
<p>So, when I see fancy wiki pages and guids, such as <a href="https://wiki.debian.org/Subkeys">Debian wiki’s page on
subkeys</a>, <a href="https://wiki.debian.org/OfflineMasterKey">on offline master
keys</a>, or <a href="https://wiki.debian.org/GnuPG/AirgappedMasterKey">on an airgapped master
key</a>, it sounds really fancy;
but I’m left curious to get an intuition for what’s going on.</p>
<p>I hope to use this blogpost illustrate enough of the details to build an
intuition.</p>
<h3 id="public-key-cryptography">Public Key Cryptography</h3>
<p>The <a href="https://en.wikipedia.org/wiki/Public-key_cryptography">Wikipedia page on Public Key cryptography</a>
has some nice diagrams.</p>
<p>This itself should still be relatively straightforward, comparing with how SSH
keys get used with git forges like GitHub, and with SSHing into servers:</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/key_generation.png"  /></p>
</div>
<ul>
<li><p>You have a key pair with a private key and public key,</p></li>
<li><p>you keep the private key <em>private</em>,</p></li>
<li><p>you share the public key with the servers you want to access to.</p>
<ul>
<li>Having the private key gives access.
And this is ‘secure’ because only the user with the private key
which matches the public keys will be granted access.</li>
</ul></li>
</ul>
<p>So it makes sense: Encrypting;</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/encrypt_document.png"  />
<img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/decrypt_document.png"  /></p>
</div>
<ul>
<li><p>You encrypt something for someone else using their public key.</p>
<ul>
<li><p>Everyone has their public key, so everyone can send them something.</p></li>
<li><p>Only they have their private key, so only they can read the message.</p></li>
</ul></li>
</ul>
<p>Or signing:</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/sign_document.png"  />
<img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/verify_signature.png"  /></p>
</div>
<ul>
<li><p>You sign something with your private key.</p>
<ul>
<li><p>You’re the only person who has your private key, so only you can sign something.</p></li>
<li><p>Everyone has your public key, so everyone else can verify you signed it.</p></li>
</ul></li>
</ul>
<h3 id="the-rote-gpg-commands">The Rote GPG Commands</h3>
<p>So far, we can just label everything above with “GPG” and it still makes sense:</p>
<p>e.g. Key generation could be done by invoking a command like:</p>
<pre><code>gpg --quick-generate-key &quot;Richard Goulter (NixOS Desktop) &lt;richard.goulter@rgoulter.com&gt;&quot;</code></pre>
<p>e.g. exporting a key, to copy the public part to GitHub or whatever could be done by invoking a command like:</p>
<pre><code>gpg --export --armor &quot;Richard Goulter (NixOS Desktop)&quot;</code></pre>
<p>e.g. encrypting/decrypting a message could be done by invoking a command like:</p>
<pre><code>gpg --encrypt --recipient &quot;My Colleague&quot; document.txt</code></pre>
<p>and the recipient could decrypt it with:</p>
<pre><code>gpg --decrypt document.txt.gpg</code></pre>
<p>e.g. signing could be done by invoking a command like:</p>
<pre><code>gpg --clearsign file.txt</code></pre>
<p>or</p>
<pre><code>gpg --detach-sign file.txt</code></pre>
<p>and the signature could be verified with a command like:</p>
<pre><code>gpg --verify file.txt.asc</code></pre>
<p>or</p>
<pre><code>gpg --verify file.txt.sig</code></pre>
<h3 id="what-starts-to-confuse-me-subkeys">What Starts to Confuse Me: Subkeys</h3>
<p>Okay, but having created a key, then list the keys:</p>
<pre><code>gpg --list-keys</code></pre>
<p>outputs something like:</p>
<pre>
pub   rsa4096 2020-10-05 [SC] [expires: 2022-08-01]
      D9463A85F093811B887DE4B03229F4BB09CC8A22
uid           [ultimate] Richard Goulter (NixOS Desktop) <richard.goulter@gmail.com>
sub   rsa4096 2020-10-05 [E] [expires: 2022-08-01]
</pre>
<p>and secret keys:</p>
<pre><code>gpg --list-secret-keys</code></pre>
<p>outputs something like:</p>
<pre>
sec   rsa4096 2020-10-05 [SC] [expires: 2022-08-01]
      D9463A85F093811B887DE4B03229F4BB09CC8A22
uid           [ultimate] Richard Goulter (NixOS Desktop) <richard.goulter@gmail.com>
ssb   rsa4096 2020-10-05 [E] [expires: 2022-08-01]
</pre>
<p>I can see the only difference is <code>pub</code>, <code>sub</code>, vs <code>sec</code> and <code>ssb</code>. What?</p>
<p>What’s <code>[SC]</code>, <code>[E]</code>?</p>
<p>And if you enable some recommended options in <code>~/.gnupg/gpg.conf</code>:</p>
<pre><code>keyid-format LONG
with-fingerprint
with-keygrip</code></pre>
<p>re-running:</p>
<pre><code>gpg --list-keys</code></pre>
<p>outputs:</p>
<pre>
pub   rsa4096/3229F4BB09CC8A22 2020-10-05 [SC] [expires: 2022-08-01]
      Key fingerprint = D946 3A85 F093 811B 887D  E4B0 3229 F4BB 09CC 8A22
      Keygrip = 480A928A7AA17A693FDF4F4E9DEAEBEE1B778FB7
uid                 [ultimate] Richard Goulter (NixOS Desktop) <richard.goulter@gmail.com>
sub   rsa4096/15BAE7FB6F3DA787 2020-10-05 [E] [expires: 2022-08-01]
      Keygrip = A996CF5366A2FFCA11EE958FBA3AC4BDFDB6AC76
</pre>
<p>I feel like this one I’m allowed to be confused by.</p>
<p>Long Id?</p>
<p>Fingerprint??</p>
<p>Keygrip???</p>
<h3 id="a-key-consisting-of-multiple-keys">A Key Consisting of Multiple Keys</h3>
<p>Uh. Hopefully it’s not too late in this blogpost to mention it.<br />
But “key” gets used in multiple ways e.g. “running <code>gpg --quick-generate-key</code>
generates a GPG ‘key’”, and in “a GPG ‘key’ consists of at least one key pair”.</p>
<p>Generally, context is often enough to disambiguate these. But given that GPG is
confusing enough as it is, it’s worth mentioning the ambiguity.</p>
<p>Taking a look at the terminology GPG’s manual uses:
<a href="https://www.gnupg.org/gph/en/manual.html#CONCEPTS" class="uri">https://www.gnupg.org/gph/en/manual.html#CONCEPTS</a></p>
<blockquote>
<p>GnuPG uses a somewhat more sophisticated scheme in which a user has a primary
keypair and then zero or more additional subordinate keypairs. The primary and
subordinate keypairs are bundled to facilitate key management and the bundle
can often be considered simply as one keypair.</p>
</blockquote>
<p>This excerpt refers to the keys being ‘bundled’, and that the bundle can often
be considered as a keypair.</p>
<p>The GnuPG FAQ has an answer which better describes the ambiguity.
<a href="https://www.gnupg.org/faq/gnupg-faq.html#define_key" class="uri">https://www.gnupg.org/faq/gnupg-faq.html#define_key</a></p>
<blockquote>
<p>The word ‘key’ is unfortunately ambiguous. It can either refer to the
mathematical structures that allow encryption, decryption, signing and
verification to occur, or to the rather large blobs of data that contain those
mathematical structures as well as information about the person associated
with it, additional subkeys, and so forth.</p>
<p>With respect to the large blobs of data, it is preferable to call them
‘certificates’, so that the word ‘key’ may be unambiguously recognized as
meaning just the mathematical structures. Unfortunately, this is a custom that
seems to be honored mostly in the breach.</p>
</blockquote>
<p>In this blogpost, I’ll try to use the word “key” in scare quotes to indicate
“bundle of key pairs”.</p>
<h3 id="other-gpg-featurescomplications">Other GPG Features/Complications</h3>
<p>So while I feel like the idea of “a key pair, with a private part and a public
part” is understandable, there are other features of GPG “keys” which make
things more complicated:</p>
<p>GPG “keys” can be set with an expiry date.<br />
(This is useful as a way of indicating you’ve still got access to the private
key).</p>
<p>GPG “keys” can have multiple “User IDs” (Name + email). Photos can be included
in the GPG “key”.</p>
<p>GPG “keys” can be signed. Or more specifically: the keys and UIDs can be signed.<br />
– I don’t find this intuitive. Sure, Bruce Wayne and Batman are different
identities, but I don’t see why they’d want to use the same key.</p>
<p>GPG “keys” can be revoked. That is, an indication that other subkeys or UIDs or signatures
should not be trusted.<br />
– I didn’t find this intuitive.</p>
<p>GPG “keys” can have some level of trust.<br />
– This also seems unintuitive to me.</p>
<h3 id="why-subkeys-are-subkeys">Why Subkeys are Subkeys</h3>
<p>I found <a href="https://serverfault.com/questions/397973/gpg-why-am-i-encrypting-with-subkey-instead-of-primary-key">this StackOverflow answer about why different keys are used for
encryption vs signing</a>
illuminating:</p>
<blockquote>
<p>If you look into the details of the math of public-key encryption, you will
discover that signing and decrypting are actually identical operations. Thus
in a naïve implementation it is possible to trick somebody into decrypting a
message by asking them to sign it.</p>
</blockquote>
<p>i.e. it would be bad a idea to use the same (sub)key for both signing and
encryption. So, GPG uses a separate subkey for at least encryption.</p>
<p>This answer also explains what the <code>[SC]</code> and <code>[E]</code> refer to:</p>
<blockquote>
<p>E = encrypt/decrypt (decrypt a message you received encrypted for you to read)<br />
S = sign (sign data. For example a file or to send signed e-mail)<br />
C = certify (sign another key, establishing a trust-relation)<br />
A = authentication (log in to SSH with a PGP key; this is relatively new usage)</p>
</blockquote>
<p>The <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">Wikipedia page about RSA</a>
gives an example of using RSA keys, which is useful for understanding “signing
and decrypting are identical operations”.</p>
<p><a href="https://www.gnupg.org/gph/en/manual.html#AEN267">The GPG User Guide (Section “Key Management”, subsection “Key
integrity”)</a> sort of does
explain the “master” and “subordinate” part:</p>
<blockquote>
<p>Using digital signatures is a solution to this problem. When data is signed by
a private key, the corresponding public key is bound to the signed data. In
other words, only the corresponding public key can be used to verify the
signature and ensure that the data has not been modified. A public key can be
protected from tampering by using its corresponding private master key to sign
the public key components and user IDs, thus binding the components to the
public master key. Signing public key components with the corresponding
private master signing key is called self-signing, and a public key that has
self-signed user IDs bound to it is called a certificate.</p>
</blockquote>
<p>The ‘self-signing’ of sub-keys by the master key is a detail which wasn’t clear to me.</p>
<p>“Subordinate” is a surprising word here.<br />
Even the <em>absolutely excellent</em> post <a href="https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/">“anatomy of a gpg
key”</a> expands
“subkey” to “sub-component of another key”, not “subordinate key”.</p>
<p>I further feel vindication in that the website <a href="https://gpg.wtf/" class="uri">https://gpg.wtf/</a> also discusses
‘what a subkey is’ in its “things that are confusing about gpg”.</p>
<p>The “master key signs the subkeys” can be seen by running a command like:</p>
<pre><code>gpg --check-signatures 0x3229F4BB09CC8A22</code></pre>
<p>which outputs something like:</p>
<style>
span.key0 {
  color: #2072B8;
}
span.key1 {
  color: #7FBA42;
}
</style>
<pre>
<b>pub</b>   rsa4096/<span class="key0">0x3229F4BB09CC8A22</span> 2020-10-05 [SC] [expires: 2022-08-01]
      Key fingerprint = <span class="key0">D946 3A85 F093 811B 887D  E4B0 3229 F4BB 09CC 8A22</span>
      Keygrip = <span class="key0">480A928A7AA17A693FDF4F4E9DEAEBEE1B778FB7</span>
<b>uid</b>                   [ultimate] Richard Goulter (NixOS Desktop) <richard.goulter@gmail.com>
sig!3        <span class="key0">0x3229F4BB09CC8A22</span> 2022-05-03  Richard Goulter (NixOS Desktop) <richard.goulter@gmail.com>
<b>sub</b>   rsa4096/<span class="key1">0x15BAE7FB6F3DA787</span> 2020-10-05 [E] [expires: 2022-08-01]
      Keygrip = <span class="key1">A996CF5366A2FFCA11EE958FBA3AC4BDFDB6AC76</span>
sig!         <span class="key0">0x3229F4BB09CC8A22</span> 2022-05-03  Richard Goulter (NixOS Desktop) <richard.goulter@gmail.com>

gpg: 2 good signatures
</pre>
<p>i.e. The GPG “key” has:</p>
<ul>
<li><p>the public master key,</p></li>
<li><p>a UID which is signed with the <code>[SC]</code> key,</p></li>
<li><p>a subordiate key, which is intended for <code>[E]</code> usage, as signed with the <code>[SC]</code> key.</p></li>
</ul>
<h3 id="illustrating-the-rote-gpg-operations">Illustrating the Rote GPG Operations</h3>
<p>Going back over the rote commands again, now with a diagrams to illustrate
subkeys at work:</p>
<p>e.g. key generation:</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/sign_document.png"  /></p>
</div>
<p>could be done by invoking a command like:</p>
<pre><code>gpg --quick-generate-key &quot;Richard Goulter (NixOS Desktop) &lt;richard.goulter@rgoulter.com&gt;&quot;</code></pre>
<p>e.g. exporting a key, to copy the public part to GitHub or whatever:</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/gpg_export_key.png"  /></p>
</div>
<p>could be done by invoking a command like:</p>
<pre><code>gpg --export --armor &quot;Richard Goulter (NixOS Desktop)&quot;</code></pre>
<p>e.g. encrypting/decrypting a message:</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/gpg_encrypt_document.png"  />
<img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/gpg_decrypt_document.png"  /></p>
</div>
<p>could be done by invoking a command like:</p>
<pre><code>gpg --encrypt --recipient &quot;My Colleague&quot; document.txt</code></pre>
<p>and the recipient could decrypt it with:</p>
<pre><code>gpg --decrypt document.txt.gpg</code></pre>
<p>e.g. signing:</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/gpg_sign_document.png"  />
<img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/gpg_verify_signature.png"  /></p>
</div>
<p>could be done by invoking a command like:</p>
<pre><code>gpg --clearsign file.txt</code></pre>
<p>or</p>
<pre><code>gpg --detach-sign file.txt</code></pre>
<p>and the signature could be verified with a command like:</p>
<pre><code>gpg --verify file.txt.asc</code></pre>
<p>or</p>
<pre><code>gpg --verify file.txt.sig</code></pre>
<h3 id="gpg-for-ssh">GPG for SSH</h3>
<p>Again, coming from the mindset of “SSH keys for pushing to <code>git</code> repositories,
<code>gpg</code> for signing stuff”, hearing “GPG ‘keys’ can be used for SSH too” sounds
like wizardry.</p>
<p>This is also where “keygrip” comes into use. As <a href="https://blog.djoproject.net/2020/05/03/main-differences-between-a-gnupg-fingerprint-a-ssh-fingerprint-and-a-keygrip/">this blogpost discussing GPG
fingerprint vs SSH key fingerprint vs GPG
keygrip</a>
explains, the keygrip is a way of identifying the key regardless of
protocol/usage.</p>
<p>Now that I have a better understanding of subkeys,
it seems the main points for “using GPG for SSH” involves two things to understand:</p>
<ul>
<li><p>Using a suitably configured <code>gpg-agent</code> instead of <code>ssh-agent</code>, by pointing
the <code>SSH_AUTH_SOCK</code> and <code>SSH_AGENT_PID</code> to GPG.</p></li>
<li><p>Having a subkey with <code>[A]</code> capability.</p></li>
</ul>
<h3 id="visualisation-of-the-offline-master-key-setup">Visualisation of the Offline Master Key Setup</h3>
<p>With the above in mind, a summary of the result of these tutorials for setting
up master keys could be visualised as follows:</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/gpg_offline_master_key.png"  /></p>
</div>
<p>Which seems less complex than all the confusion I had over it made it out to be.</p>
<p>As the Debian wiki article pages discuss, because the private master key is used
to self-sign the subkeys in the GPG “key”, it can then be used to revoke the
other subkeys.</p>
<h3 id="yubikey-as-a-gpg-smart-card">Yubikey as a GPG Smart Card</h3>
<p>Yubikeys can then allow a nicer User Experience for using
GPG keys. e.g. the Yubikey supports 3 slots for private keys: for signing, encryption, or authentication.</p>
<div style="text-align: center;">
<p><img src="https://raw.githubusercontent.com/rgoulter/rgoulter.github.com/master/images/gpg/gpg_smart_card_slots.png"  /></p>
</div>
<p>e.g. <a href="https://developers.yubico.com/PGP/PGP_Walk-Through.html">Yubico’s PGP walkthrough</a>.</p>]]></summary>
</entry>
<entry>
    <title>EPA in Emacs is a Neat UX on top of GPG</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-06-07-epa-in-emacs-is-a-neat-ux-on-top-of-gpg.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-06-07-epa-in-emacs-is-a-neat-ux-on-top-of-gpg.html</id>
    <published>2022-06-07T00:00:00Z</published>
    <updated>2022-06-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>GPG is notorious for having an archane interface
which is easy to misuse.</p>
<p>As a developer, the most I’ve used it for has been to
sign git commits.</p>
<p>Emacs supports a workflow which uses GPG to automatically
decrypt the file when reading it, and automatically
encrypt the file when saving it.</p>
<p>With the Doom Emacs distribution of Emacs,
if the user’s <code>config.el</code> sets <code>user-full-name</code> or <code>user-mail-address</code>,
and the GnuPG keyring on the computer has a PGP key pair with this
as a user ID, then this works seamlessly. (Well, subject to things
like pinentry and GPG agents and all).</p>
<p>Even that sounds complicated; but you probably will have those things set
if you’re using Doom Emacs; and probably do have GPG keys with your email/name
if you’ve used GPG for anything.</p>
<p>Since the acronyms are confusing:</p>
<ul>
<li><p>PGP = Pretty Good Privacy. OpenPGP is an open standard for signing/encrypting things.</p></li>
<li><p>GPG = GnuPG = Gnu Privacy Guard. Implements OpenPGP.</p></li>
<li><p>EPG = EasyPG. An Emacs library for GnuPG.</p></li>
<li><p>EPA = EasyPG Assistant. The Emacs user interface to GnuPG that’s part of the EPG package.</p></li>
</ul>
<p>Some notes:</p>
<p>Doom Emacs achieves this in its <code>modules/config/default/config.el</code>:</p>
<pre class="elisp"><code>(after! epa
  ;; With GPG 2.1+, this forces gpg-agent to use the Emacs minibuffer to prompt
  ;; for the key passphrase.
  (set &#39;epg-pinentry-mode &#39;loopback)
  ;; Default to the first enabled and non-expired key in your keyring.
  (setq-default
   epa-file-encrypt-to
   (or (default-value &#39;epa-file-encrypt-to)
       (unless (string-empty-p user-full-name)
         (when-let (context (ignore-errors (epg-make-context)))
           (cl-loop for key in (epg-list-keys context user-full-name &#39;public)
                    for subkey = (car (epg-key-sub-key-list key))
                    if (not (memq &#39;disabled (epg-sub-key-capability subkey)))
                    if (&lt; (or (epg-sub-key-expiration-time subkey) 0)
                          (time-to-seconds))
                    collect (epg-sub-key-fingerprint subkey))))
       user-mail-address))
   ;; And suppress prompts if epa-file-encrypt-to has a default value (without
   ;; overwriting file-local values).
  (defadvice! +default--dont-prompt-for-keys-a (&amp;rest _)
    :before #&#39;epa-file-write-region
    (unless (local-variable-p &#39;epa-file-encrypt-to)
      (setq-local epa-file-encrypt-to (default-value &#39;epa-file-encrypt-to)))))</code></pre>
<p>Since it wasn’t obvious to me: the <code>epa-file-encrypt-to</code> is used to determine
which PGP keys in the keyring to encrypt the file to.<br />
It’s sortof similar to the <code>--recipient</code> flag when using <code>gpg --encrypt</code>.
Some additional functionality EPA adds is that if there are multiple public
keys which match, EPA will encrypt the file for all of these; whereas <code>gpg --encrypt</code>
will only encrypt for the most recent encryption key which matches.</p>
<p>When opening an encrypted file,
<code>epa-file-encrypt-to</code> will be filled with the keys which were used to encrypt
the file. You can change the value of this variable to change which keys
are used to encrypt the file.</p>
<p>Also, since it wasn’t obvious to me: a file encrypted with <code>gpg</code> for multiple
keys is like a concatenation of the file encrypted for each key. So a file
can obviously be encrypted for multiple keys; and that encrypted file can
be decrypted with any of the keys it was encrypted with.</p>
<p>In Emacs, you can visit the <code>info</code> node for EPA’s encrypting/decrypting by
executing the elisp:</p>
<pre class="elisp"><code>(info &quot;(epa) Encrypting/decrypting gpg files&quot;)</code></pre>
<p>(assuming <code>epa.info</code> has been installed to the right place).</p>
<p>Or, going to the “EasyPG Assistant” manual, “Commands”, “Encrypting/decrypting gpg files” menu items.</p>
<p>Or, in the online manual: <a href="https://www.gnu.org/software/emacs/manual/html_node/epa/Encrypting_002fdecrypting-gpg-files.html" class="uri">https://www.gnu.org/software/emacs/manual/html_node/epa/Encrypting_002fdecrypting-gpg-files.html</a>.</p>]]></summary>
</entry>
<entry>
    <title>Tool Recommendation: Helix Editor</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2022-05-19-tool-recommendation-helix-editor.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2022-05-19-tool-recommendation-helix-editor.html</id>
    <published>2022-05-19T00:00:00Z</published>
    <updated>2022-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The <a href="https://helix-editor.com/">Helix editor</a> is a fancy new text editor which
looks to be a compelling competitor to vim for modern developer environments.</p>
<p>Currently, my preferred editing environment is Emacs, making use of the Doom
Emacs distribution.</p>
<p>Before that, I was using vim (and its cousin, neovim). And I still use
neovim for editing files from the command line.</p>
<p>But, I’d heard of <a href="http://kakoune.org/">kakoune</a>. Kakoune takes the “verb +
text object” text navigation and manipulation of Vim, and flips it into a more
user friendly direction: Kakoune opts for “text object + verb”.</p>
<p>This seems like it would soften the rough edges of the finer parts of vim. It’s
often easier to make use of vim’s visual mode, and then copy/delete/replace that
selection.</p>
<p>So. The <a href="https://helix-editor.com/">Helix editor</a>, another text editor, is
interesting for a few reasons:</p>
<ol type="1">
<li><p>It takes the same user-friendly “text object + verb” approach that kakoune
used. (This also allows for powerful multi-cursor text manipulation).</p></li>
<li><p>It leverages <a href="https://microsoft.github.io/language-server-protocol/">language server protocol
(LSP)</a>, which enables
editor integration with language compilers, allowing for code completion or
quickly bringing up documentation.</p></li>
<li><p>It leverages <a href="https://tree-sitter.github.io/tree-sitter/">tree sitter</a>. This
allows different editors to share parsers for different languages, for syntax
highlighting, or perhaps navigation of text objects.</p></li>
</ol>
<p>So. It’s got a few fancy features, each are worth being excited about.</p>
<p>So I’ve given it a try.</p>
<p>Overall, as a vim user, trying out Helix has the following loop:</p>
<ol type="1">
<li><p>Try and use Helix as if it’s vim (but swapping text object and action).</p></li>
<li><p>Be surprised when something doesn’t work, because Helix isn’t vim,
so look up the equivalent action, and remember to use the Helix
keybinding.</p></li>
</ol>
<p>I’d say the ‘trouble’ here is that with Vim, there’s a long tail of keybindings
which you’ll use infrequently.</p>
<p>e.g. it took me a while to notice that Helix doesn’t open directories in
a buffer. (Whereas, vim has netrw, and Emacs has dired).</p>
<p>Overall, Helix’s keybindings seem consistent and well thought out.</p>
<p>e.g. my current “rosetta stone” is:</p>
<table>
<colgroup>
<col style="width: 11%" />
<col style="width: 13%" />
<col style="width: 13%" />
<col style="width: 9%" />
<col style="width: 51%" />
</colgroup>
<thead>
<tr class="header">
<th>vim mode</th>
<th>vim</th>
<th>helix mode</th>
<th>helix</th>
<th>note</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>0</td>
<td></td>
<td>gh</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>^</td>
<td></td>
<td>gs</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>$</td>
<td></td>
<td>gl</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>gq</td>
<td></td>
<td>=</td>
<td>format. TBI in helix. Vim’s = is ‘indent’.</td>
</tr>
<tr class="odd">
<td></td>
<td>C-v i</td>
<td></td>
<td>C i</td>
<td>Or Alt-s to split selection on newline.</td>
</tr>
<tr class="even">
<td></td>
<td>C</td>
<td></td>
<td>v gl c</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>x</td>
<td></td>
<td>;d</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>V</td>
<td></td>
<td>X</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>*</td>
<td></td>
<td>*n</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>G</td>
<td></td>
<td>ge</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>:bprev, [b</td>
<td></td>
<td>gp</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>:bnext, ]b</td>
<td></td>
<td>gn</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>`.</td>
<td></td>
<td>g.</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>H</td>
<td></td>
<td>gt</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>M</td>
<td></td>
<td>gc</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>L</td>
<td></td>
<td>gb</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>C-r</td>
<td></td>
<td>U</td>
<td>redo</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td>ga</td>
<td>last accessed file</td>
</tr>
<tr class="odd">
<td></td>
<td></td>
<td></td>
<td><SPC>R</td>
<td>replace selection with clipboard</td>
</tr>
<tr class="even">
<td></td>
<td>%</td>
<td></td>
<td>mm</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>ggVG</td>
<td></td>
<td>%</td>
<td>select entire file</td>
</tr>
<tr class="even">
<td></td>
<td>,</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>;</td>
<td></td>
<td>Alt-.</td>
<td></td>
</tr>
<tr class="even">
<td>visual</td>
<td>o</td>
<td></td>
<td>Alt-;</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>(/)</td>
<td></td>
<td></td>
<td>left up to tree-sitter?</td>
</tr>
<tr class="even">
<td></td>
<td>{/}</td>
<td></td>
<td></td>
<td>left up to tree-sitter?</td>
</tr>
<tr class="odd">
<td></td>
<td>gc</td>
<td></td>
<td>Ctrl-c</td>
<td>Evil comment</td>
</tr>
<tr class="even">
<td></td>
<td>~</td>
<td></td>
<td>~</td>
<td>(same in both) toggle case</td>
</tr>
<tr class="odd">
<td></td>
<td>gu</td>
<td></td>
<td><code>| to lowerlase                               | |          | gU         |            | Alt+</code></td>
<td>to uppercase</td>
</tr>
<tr class="even">
<td></td>
<td>vi”</td>
<td></td>
<td>vmi”</td>
<td>prefix sequence with <code>m</code> for things.</td>
</tr>
</tbody>
</table>
<p>Overall, I like what I’ve tried of Helix. It feels very polished out-of-the-box.</p>]]></summary>
</entry>

</feed>
