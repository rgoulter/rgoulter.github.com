<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Richard Goulter's Blog</title>
    <link href="http://www.rgoulter.com/blog//atom.xml" rel="self" />
    <link href="http://www.rgoulter.com/blog/" />
    <id>http://www.rgoulter.com/blog//atom.xml</id>
    <author>
        <name>Richard Goulter</name>
        <email>richard.goulter+blog@gmail.com</email>
    </author>
    <updated>2018-02-19T00:00:00Z</updated>
    <entry>
    <title>Vigilant Reflection</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2018-02-19-vigilant-reflection.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2018-02-19-vigilant-reflection.html</id>
    <published>2018-02-19T00:00:00Z</published>
    <updated>2018-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 19, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>One good, sensible motto that is worth keeping in mind every now and then is to reflect: ‘Where am I at? Where do I want to be? How can I get there?’. – I’m not sure how that works for ‘I don’t know what I want’; but it’s much better to know that you don’t know, than to just have the angst.</p>
<p>I think this is useful especially if you find yourself in the same ‘situations’ repeatedly.<br />
– I like to think it’s helped me figure out some of my failure-modes in terms of how I work. e.g. I like having ‘flow’ with my work. This can be described as work with ‘the right level of challenge, for your current level of skill’. (I’ve seen different diagrams for this; I don’t know which are reliable, but this sounds a sensible model).<br />
For me, if I’ve found if I don’t have ‘flow’, it can be difficult to find motivation and to live up to my potential. And if I’m not aware of this, I’ll end up stuck.</p>
<p>So it’s useful to have tools to help reflect.</p>
<p>The term ‘Emotional Intelligence’ (EQ) gets thrown around every now and then.<br />
It certainly sounds like a bullshit term made for cuddly-feely for people who may not have high IQ, but can get on with other people.<br />
But the concepts related to it seem useful enough tools: awareness and management of self, awareness and management of others. <a href="https://www.keystepmedia.com/emotional-social-intelligence-leadership-competencies/">This link</a> looks like cuddly-feely MBA nonsense, but it sensibly expands on examples of these kinds of things. e.g. ‘awareness of self’ includes ‘understanding my emotions and the effects they have on me’; ‘management of others’ includes ‘can you influence others: have a positive impact, and persuade them to gain their support’.</p>
<p>I think a big limitation with the EQ stuff is it kindof splits into ‘good with people’ and ‘bad with people’.<br />
But people can be complicated. This doesn’t mean EQ is nonsense, so much as I think it’s useful to be aware of this limitation.</p>
<p>It can be fascinating to reflect / consider the different ways people interact.<br />
Mis-alignment of assumptions between people inevitably leads to conflict.<br />
This is made clear by Alice Maz’s excellent <a href="https://status451.com/2016/01/06/splain-it-to-me/">‘Splain it to me’</a>. I think another interesting example is e.g. <a href="https://www.theatlantic.com/national/archive/2010/05/askers-vs-guessers/340891/">Askers vs Guessers</a>. – The point of these tools isn’t to model people as entirely fitting into the model’s boxes, so much as they help understand / explain interactions between people.</p>
<p>I think something that’s unfortunately omitted in discussions of diversity, where the claim is that it’s beneficial to have different kinds of people working on a task:<br />
Differences risk mis-aligned assumptions.<br />
Which surely leads to tension, and conflict.<br />
– This can be mitigated by emphasis on a shared identity (e.g. Between citizens, a shared national identity. Between employees, a shared company identity), rather than emphasis on differences between identity.<br />
But my concern is: pro-diversity folk often encourage situations which lead to tension/conflict without acknowledging the potential conflict, and without providing tools to mitigate and work around this.</p>
<p>Similarly, I think ‘cultural differences’ aren’t just ‘demographic differences’.</p>
<p>Yet. I kindof wonder if other people in teams reflect on differences like this.<br />
For myself, I think I can get as far as aware of how others feel. I don’t think I’m the kind of person who could easily manipulate others. So I guess ‘Where am I at? etc.’ is useful for ‘What are my limitations? How should I approach these situations from that?’.</p>
]]></summary>
</entry>
<entry>
    <title>On Maintaining on Old Side Project</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2018-02-19-on-maintaining-on-old-side-project.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2018-02-19-on-maintaining-on-old-side-project.html</id>
    <published>2018-02-19T00:00:00Z</published>
    <updated>2018-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 19, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>Recently I’ve had the motivation to try and maintain one of my side-projects.<br />
Or at least, brush it up from being “completely awful” to “not terrible”.</p>
<p>This is mostly just for fun.<br />
But in a way, it’s valuable in that I learn the lessons of what it’s like to maintain a project which isn’t freshly-written. That’s the kindof learning which fresh programmers can’t easily get.</p>
<p>Partly this also comes from wanting to be able to display a ‘portfolio’ of ‘look, I can program’.<br />
Albeit, it’s hard to justify it from this perspective, since: - The <a href="http://www.daedtech.com/hiring-is-broken/">original post mentioned here</a> essentially says “I had a great personal brand, but didn’t get hired anyway”. - On the one hand, this is great in terms of ‘equal opportunity’, in that what supposedly matters is ‘ability to pass a tech interview’, not ‘ability to present yourself well’. And <em>in theory</em> the former ought to be better than the latter at predicting ‘will do a good job’. - I saw a post on LinkedIn where a guy pointed out that, although he had applied via LinkedIn to over 900 job listings, the only times he got a job was through networking. - On the other hand, this is concerning in terms of ‘equal opportunity’, in that effects of networking aren’t going to be as fair as a more ‘systematic’ process of finding a candidate. (Or so you’d think!).</p>
<p>So. While I think it makes sense that ‘polished side project’ means ‘good portfolio’ and a step towards ‘good personal brand’; it seems like tech doesn’t particularly respect ‘good personal brand’.<br />
So, side projects are just for fun. :-)</p>
<h2 id="things-i-didnt-dounderstand-in-c-as-an-undergraduate">Things I Didn’t Do/Understand in C++ as an Undergraduate</h2>
<h3 id="properly-setting-up-the-windows-build">Properly Setting Up the Windows Build</h3>
<p>The project is an old C++ project which was initially done for a computational geometry course. Generally, as an undergraduate, the process for such projects is “here’s how to manually install any dependency, here’s how to configure the project”.</p>
<p>My experience of not-C++ projects is “here’s the project dependencies file, and here’s the command to install the dependencies”.<br />
I don’t know which language did this first, but this is my experience with e.g. Ruby, Python, Haskell, even Java/Scala.</p>
<p>This recent iteration of maintaining the side-project was aimed at getting the project to work on Windows. Previous refactoring efforts (e.g. to use CMake, adding a <code>.travis.yml</code> file to the repository) improved the project for Linux/macOS, but broke the Windows build.<br />
Joy.</p>
<p>I ran into a couple of problems getting the project working on Windows.<br />
One was getting the compiler to find the dependencies. (On Linux, this is more/less a process of “use system package manager to install dependencies).<br />
The other was that, I’d refactored the code to use a class called”Polygon“, and one of my files included <code>&lt;windows.h&gt;</code>, which has a function called <code>Polygon</code> which pollutes the global namespace and etc.<br />
Fun to figure out.</p>
<p>Windows C++ development is made a bit more confusing in that there are different compilers / environments. e.g. MSYS2/MinGW, and MSVC (Visual Studio’s C/C++ compiler).<br />
– It took me way too long to figure out fundamental things about these. In the end, I figured out the easiest thing to do was write a <code>.bat</code> script which adds the relevant compiler to <code>PATH</code>.</p>
<p>As an example of how ‘weird’ this is, CMake’s “MinGW Makefiles” didn’t work if MSYS2’s <code>sh.exe</code> was on <code>PATH</code>. With <code>MSYS2</code> and <code>MinGW</code> on the <code>PATH</code>, the correct generator to use would be <code>MSYS Makefiles</code>.</p>
<h3 id="getting-the-thing-to-run-maybe-deploy">Getting the Thing to Run (&amp; Maybe Deploy)</h3>
<p>My experience with programming in other languages:<br />
If you can build the project, you can run the project.<br />
My experience with C++:<br />
Just because the project built, doesn’t mean that the project would run.</p>
<p>The reason for this is fairly straightforward: C++ builds the executable, and the dependencies in other libraries will get ‘linked’ dynamically when the program runs. (On Windows, from Dynamically-Linked Libraries. On unix, from shared libraries). And so these need to be on the <code>PATH</code> when running the program. But not when building the program.<br />
– Perhaps you’ll forgive me if this wasn’t immediately obvious to me (given the ‘can build the thing =&gt; can run the thing’ expectation).</p>
<p>I’m aware that one way to get around this is to ‘statically link’ the dependencies into the built executable.<br />
– But I’m not aware of a trivial/easy way to do this on Windows. (Especially not if there’re complicated transitive dependencies!).</p>
<p>Unfortunately, I’m <em>still</em> not aware of an easy way to <em>find</em> all these requisite DLLs for running the executable.<br />
– It occurs to me that for “other languages”, I never really dealt with “how to deploy the program; how to share it with someone else”. This is one BIG advantage to JavaScript / web browser programs. (Or web applications).</p>
<h3 id="vcpkg-is-great">VCPKG is Great</h3>
<p>I am vaguely aware that conan.io is one piece of software trying to bring the concept of ‘modern language dependency installer’ to C++.</p>
<p>I saw that an example of competing software is vcpkg.<br />
I tried it, it’s <em>amazing</em>.</p>
<p>It’s only for the Visual Studio compiler, and is analogous to pacman for MSYS2’s MinGW-w64 compiler.</p>
<p>It Just Works.<br />
– You use it to install certain packages (e.g. OpenCV, Qt5) and it downloads the source, builds the project.</p>
<p>When using vcpkg to build a project, it copies the DLLs to the build directory which makes the program easier to deploy/share. Whoa!</p>
<p>As far as I can tell, static-linking with vcpkg would be easy, too, since vcpkg builds the packages from source.</p>
<p>One downside is that not all projects support all generators. (e.g. I couldn’t use ninja with OpenCV on Windows for MSVC. But this is upstream, and not vcpkg’s fault).</p>
<p>Compared to conan.io?<br />
The vcpkg FAQ argues that vcpkg targets only Windows/MSVC, so doesn’t have to solve the problems which conan.io is trying to solve (and which are solved by distribution package managers like brew, pacman).<br />
And that since vcpkgs is a privately-maintained repository of packages, rather than a ‘public federation’ of packages, there’s less effort required to find the dependencies which work for your project.</p>
<h3 id="setting-up-appveyor">Setting Up AppVeyor</h3>
<p>One of the cool things about open-source projects these days is the fancy badges they have saying “hey the project is working”.</p>
<p>Travis-CI is one such CI service which offers free builds for “open source” projects. (i.e. free stuff for public repositories).<br />
But Travis-CI only supports Linux/macOS. The equivalent for Windows is AppVeyor.</p>
<p>Despite my newfound knowledge of how to build the project reliably on Windows, I found this not-so-easy.</p>
<p>Using vcpkg for the build is a nice idea. But vcpkg doesn’t use binaries for its packages. So although vcpkg makes it super easy to get a development environment going, … it takes too long for an AppVeyor build, if using sufficiently heavy dependencies. (AppVeyor builds time out after an hour).</p>
<p>Fortunately, the machine does have common heavy dependencies like Qt5 installed already.<br />
But it didn’t have OpenCV.</p>
<p>It may be that using chocolatey (Windows’ answer to macOS’ homebrew) to install OpenCV is probably ‘best’.<br />
But I wanted to keep with vcpkg.</p>
<p>The main difficult I had was to cache the vcpkg directory. It took me some time to realise that I was the caching didn’t affect the <code>init</code> section of the AppVeyor build. (i.e. the cache only gets loaded for the <code>build</code> step, and cache gets saved after the <code>build</code> step).<br />
Oops.</p>
<h3 id="thoughts-on-the-c-language">Thoughts on the C++ Language</h3>
<p>The above remarks (e.g. about not knowing how to find DLLs, &amp; that it’s hard to install dependencies) are more about the environment C++ runs in, and the developer ecosystem.<br />
But considering C++ as a language:</p>
<p>Okay to be fair, I don’t think anyone really defends C++ as a “good” language (aside from maybe the pragmatic case that “it’s what people use”, and that having an imperfect which works is better than not having anything, etc.).</p>
<p>C++ is monstrously complex. (e.g. a C++ parser is something which has to be hand-written, since the language is so complex). “Effective C++” describes C++ as a ‘federation of four languages’. (If I recall correctly: C, C with classes, standard-template library, and template meta-programming).<br />
– There are competing languages for “better C” replacement: Go, Rust, and then more obscure languages like D (which I’ve heard is really nice, but seems to lack the community which e.g. Rust has gunned for).</p>
<p>What I’ve come to realise maintaining this C++ project is that there’s a lot of C++ stuff which I’d consider ‘fundamental’ in other languages, where with C++ “I just don’t know it”.<br />
And I don’t think other languages suffer this problem as easily.</p>
<p>The details sound fairly easy, but it’s not necessarily clear how they combine.<br />
For example: individually the words <code>const</code>, <code>pointer</code>, <code>reference</code> are individually easy to understand, but very quickly difficult to understand when combined.<br />
<em>Especially</em> for someone who hasn’t maintained a C++ project in a long time.</p>
<p>e.g. Coming from other languages, it may not be clear that there’s a difference between ‘direct initialization’ and ‘copy initialization’. cf. <a href="http://en.cppreference.com/w/cpp/language/initialization">CPP Reference</a>.</p>
<p>Every language inevitably has a ‘long tail’ of obscure details that an experienced programmer will run into. I don’t even know what kindof weird stuff that’d involve for C++!<br />
But with C++, I feel it’s more like the ‘lowest common denominator’ of being able to write simple C++ programs (e.g. “Undergrad C++”) doesn’t cover very much.</p>
<h2 id="concluding-thoughts">Concluding Thoughts</h2>
<p>One way to summarize the above is I’ve gone from ‘I wrote a project in C++ while not knowing much about C++’ to ‘I had to learn a bit more about how C++ stuff works for polishing the project’.<br />
– I kindof have mixed thoughts about these things. It’s .. nice that with programming, it’s ‘easy’ to do a lot of cool stuff without having a good understanding of what’s really going on.<br />
But it also seems a bit uncraftsmanlike to make stuff with such a poor understanding.</p>
<p>I think polishing this side-project a bit has been a good project for understanding what to avoid in a project, and what’s good to have.</p>
]]></summary>
</entry>
<entry>
    <title>Hitman is Fun</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2018-02-11-hitman-is-fun.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2018-02-11-hitman-is-fun.html</id>
    <published>2018-02-11T00:00:00Z</published>
    <updated>2018-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 11, 2018
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>I hadn’t really played any of the previous games in the Hitman series.<br />
My experience was limited to watching games on YouTube.</p>
<p>I picked up the game recently.</p>
<p>The game was released episodically.<br />
So, they released level-by-level. Each new release did see improvements to the gameplay and such, too. This seems much more sober and professional than “early access”.<br />
– An advantage of not picking it up ‘as it came out’ is I have the option to play it all at once.</p>
<p>And, interestingly, I have the option to play <em>any level I want</em>.<br />
Which is weird for a game. Because, usually games with single-play have stories. And usually the story should be experienced in-order. And so usually the game gets you to play it in order.<br />
Hitman <em>does</em> have a story-based single-player campaign. Which should be played in-order.<br />
But. I think Hitman’s formula is really aimed at “replayability”. In this sense, each map isn’t so much a ‘level’ so much as an arena.<br />
The story-based missions have particular, prominent targets; and most of the special details and potential interactions <em>are</em> designed around the main targets.<br />
– But what makes Hitman replayable is a fairly rich set of gameplay rules, and levels designed to make the most of the dynamics which come from that.</p>
<p>Some examples of this, which enhance replayability: - The game will highlight / show interactions, even if you don’t have the requisite disguise or equipment. This shows the player what is possible. e.g. In the first level, you can hide an explosive in a camera, and trigger the explosive when the camera is used in an interview. – So you know next time you try the level, to keep an eye out for explosives. - As per the design of “modern” games, Hitman does ‘tell’ you what things are possible by listing certain ‘challenges’ to try. (e.g. “use a sniper rifle and kill both targets within 10s of each other”). - There’s a game-mode, “escalations”, which iteratively reveals a set of objectives on each replay (of that mode). e.g. 1st stage would be “kill this target while disguised as a guard”; 2nd stage may add a complication that you <em>must</em> hide any dead bodies. Or the escalated complication might change the disguise required. - Completing certain challenges/etc. unlocks different equipment, and different entry-points into the level. (Sometimes with different disguises!).</p>
<p>To clarify the gameplay rules: The player is on his own, and must kill targets (or sometimes steal something), and the map is filled with guards and people. Typically set in a relatively normal context. e.g. a fashion show.<br />
But the levels aren’t especially designed for “sneak around the guards, kill the target” as much as around the particular ‘disguises’. That is, outfits that the different kinds of game characters wear. The puzzle to the game is to find out what your outfit allows you to do, how to acquire a better outfit, and how to make use of the different outfits. – e.g. if you’re disguised as a kitchen chef, you won’t be allowed into where you could go if you were disguised as a guard.<br />
But, it’s not as if being a guard is necessarily the best outfit for every situation: some of the enemy guards will notice that they don’t recognise you! (Another example: It’s not suspicious to see a waitor add <em>something</em> to a drink (like poison). But if they see a guard adding something to a drink, that’s just suspicious).</p>
<p>There are more subtle gameplay aspects crafted around the disguise-game. e.g. people can hear gunshots, or combat.. and will be suspicious if they see you using a picklock to open a lock, or whatever.</p>
<p>But the dynamics this leads to?<br />
- Learning what the layout of the level is. (Where are all the good items? Where’s the key/wrench/coin/etc.? Where are easy places to get particular outfits? Which places allow which outfits?). - More than one way to skin a cat! – In particular, you usually get the feeling that maybe there was a less ‘awkward’ way to complete the mission than you did.</p>
<p>Simple plain run-and-gun is discouraged.<br />
The player isn’t a bullet-sponge, and will die fairly quickly to a guard shooting him. That said, with the right choke points it is possible to eliminate the guards in an area. – IMHO, this is kindof useful for learning the location of certain key items, and getting familiar with the layout of a map.</p>
<hr />
<p>So far I’ve spent my time only in one map. But I’ve poured more time into it than a typical Call of Duty campaign, so I’m kindof impressed by how the game manages to achieve a degree of “replayability”.</p>
]]></summary>
</entry>
<entry>
    <title>Asking for Help Threshold</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2017-11-08-asking-for-help-threshold.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2017-11-08-asking-for-help-threshold.html</id>
    <published>2017-11-08T00:00:00Z</published>
    <updated>2017-11-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November  8, 2017
    
        by Richard Goulter
    <br/>
    
    Tags: 
    
</div>

<p>I think my experience is probably similar to other talented programmers fresh to the workforce: To not ‘ask for help’ with a problem until too much time has been spent stuck on the problem.</p>
<p>This isn’t too strange.<br />
As hobbyists, or as students in school, we program and learn individually. I think ‘talented’ really means ‘has made more mistakes’. Surely you can’t be ‘talented’ without having curiousity to understand how the tools/programs you’re using work.</p>
<p>For what it’s worth: Personally, I’m not curious about <em>everything</em>. I find git a tool where add/commit/push/pull covers 95% of what I do, 5% is Googling for how to undo some mistake.</p>
<p>On the other hand, there are people who apparently lack all curiousity (or capability) to investigate how to self-correct.<br />
My experience is they’ll ask for help as soon as possible.<br />
Which is fine for project-specific knowledge which I know and they don’t. And ‘okay’ for things which they might not have known.</p>
<p>But “asking for help without trying” is just irritating. I like the admonishment “don’t ask the same question twice”. (I mean, I’ll answer it, but eventually the asker loses my respect).</p>
<p>I saw some tech-culture discussion complaining about this kindof thing:<br />
“no one is really ‘self-taught’; e.g. communities like StackOverflow involve <em>people</em>”.<br />
I think that’s a somewhat disingenuous point. – If the programmer attitude of ‘I shouldn’t have to bother learning it to know how to do it’ weren’t so prevalent, then StackOverflow wouldn’t be so popular.<br />
It’s fair to say the process of ‘try it’, ‘search it’, ‘try that again’ (without asking someone else directly) is ‘self-taught’. Since anyone can do try doing that. By themselves.<br />
– On the other hand, it’s interesting to point out that “on the shoulders of giants” does include someone else who had the same stupid question you’re googling for.</p>
]]></summary>
</entry>
<entry>
    <title>Toothless Dangerous Rhetoric in NZPol</title>
    <link href="http://www.rgoulter.com/blog//posts/politics/2017-01-15-toothless-dangerous-rhetoric-in-nzpol.html" />
    <id>http://www.rgoulter.com/blog//posts/politics/2017-01-15-toothless-dangerous-rhetoric-in-nzpol.html</id>
    <published>2017-01-15T00:00:00Z</published>
    <updated>2017-01-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 15, 2017
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/new%20zealand.html">new zealand</a>, <a href="/tags/politics.html">politics</a>
    
</div>

<p>I don’t follow the NZ Blogosphere too closely.<br />
Glimpsing at it, it’s not difficult to come across nutcase-y views. (My favourite, as made popular by the NZ Flag Referendum, was the kind which used CAPITALS to highlight IMPORTANT WORDS in a meaningless rant).<br />
– Given that NZ has a largely apathetic attitude towards politics, religion et al., I guess it’s no surprise that those who <em>do</em> care are disproportionately <em>weird</em>.</p>
<p>There is the risk in pointing to content and saying “hey, this deviates from what society ought to be” that this lends power to such deviants. c.f. <a href="https://status451.com/2016/11/28/its-protein-world-we-just-live-in-it/">Meredith Patterson’s remarks here</a>.</p>
<hr />
<p><a href="http://thewireless.co.nz/articles/there-is-no-such-thing-as-casual-racism">This post</a> came up on my newsfeed.<br />
(For context of popularity: the post itself has 0 comments).</p>
<p>The title “No such thing as casual racism” is pretty edgy.<br />
Moreso since the intended audience is presumably one which would tell you “casual racism is a big problem”. – Less so since the preview-snippet says “it’s just straight-up racism” (which kindof ratchets up an extreme view even further).</p>
<p>Reading over it, the piece isn’t as explicitly dangerous as I was expecting.<br />
The piece takes Sir Peter “Mad Butcher” Leitch as its excuse for saying “current events demonstrate my political view is correct”.<br />
The author’s point, perhaps more elegantly phrased, is that “1) all kinds of racism are racism 2) racism is bad 3) therefore, to categorise kinds of racism means defending racism as ‘not that bad’”. – Thus, referring to any remark as “casually racist” is saying “racism isn’t <em>that</em> bad”. (In the author’s words: <em>“How can you categorise racism in any form and excuse racism in any form?”</em>).</p>
<p>Or, to look at it from another perspective:</p>
<ol type="A">
<li><p>Racism is a problem in NZ. e.g. Maoris are over-represented in NZ’s Criminal-Justice System, and Maoris are victims of unconscious bias against them.</p></li>
<li><p>A prominent New Zealander said a racially-tinged remark which the conversant took offence at; the conversant received an immediate apology.</p></li>
<li><p>To defend (B) as ‘not as bad as’ (A) is to defend racism.</p></li>
</ol>
<p>– Logically this leads to “i) (B) is as bad as (A). ii) (B) is not that bad. iii) Therefore, (A) is not that bad”, which is fucking absurd.</p>
<p>I don’t think the author seriously believes that.<br />
But saying “casual racism is racism; racism is bad; so, the term ‘casual racism’ enables racism” is a <em>morally righteous</em> thing to say. It sounds good.<br />
– In the article, the author lambasts Newshub for having a ‘quiz’ “Are a casual racist?”; the author misinterprets this as ‘normalizing’ racism, rather than an attempt to raise consciousness about racism in society. – Again, this looks like an attempt to be the most anti-racist person possible (rather than say something of substance).<br />
– The author continues: <em>Māori Party co-leader Te Ururoa Flavell said … that Sir Peter is not racist, but the incident has highlighted the casual racism in society.</em>: with the above lens in mind, criticising Maori Party’s co-leader of enabling racism is super anti-racist, or something.</p>
<p>If we instead read the post as if it’s discussing problems in NZ society, then that the author is able to steadfastly posture over something so trivial indicates that there can’t be any more serious problems worth worrying about.<br />
– I can only makes sense if the author supports something like “the racism behind misinterpreted remarks is how we end up with inequalities in society”. Horseshoe nails and broken windows and all. – That sounds fascinating, and possibly nuanced. Maybe the author should have written about that instead?</p>
<hr />
<p>It’d be remiss of me, in analysing the post, to not include the most interesting paragraph:</p>
<blockquote>
<p>Racism is an ideology, just like being a liberal, conservative, anarchist, or religious. In many cases they are intertwined by design or just pure coincidence. And here we are, masquerading racism as if its “casual” component was comparable to having brunch, or casual sex, actions free of beliefs. What’s next, a Tinder-like app for casual racism?</p>
</blockquote>
<p><code>&quot;Racism is an ideology&quot;</code> sounds like parroting a taught mantra without explaining it. Perhaps using the word ‘racism’ differently to how most people would use the word.<br />
<code>&quot;In many cases they are intertwined by design or just pure coincidence.&quot;</code> is a preaching-to-the-choir sophisticated way of saying “some ideologies are racist, amirite?”.<br />
<code>&quot;What's next, a Tinder-like app for casual racism?&quot;</code>. Like. Surely even the author had to think this was a dumb thing to write. – An absurd exaggeration which doesn’t particularly work for supporting “racism is a problem in NZ”, but does flow for supporting the author saying “look how concerned about this problem I am”.<br />
– That the author doesn’t acknowledge their own convictions are ideologically driven also detracts from the post’s maturity.</p>
<hr />
<p>Coming across the title, I figured the post would be dangerous in terms of inciting tension. (cf. <a href="http://thefederalist.com/2016/11/14/election-marks-end-americas-racial-detente/">“an End to Racial Detente”</a>).<br />
But overall it’s pretty toothless. Much of what is righteously compelling about the post is regurgitation of politicised views of the world. (Viewpoints which aren’t necessarily common/shared with the NZ population).</p>
<p>I still using accusations of ‘racism’ disproportionately is dangerous.<br />
cf. US Media’s drift from over-using “racist”, to “outright racist” to “white nationalist”, as each phrase becomes ineffective; <a href="http://slatestarcodex.com/2016/11/16/you-are-still-crying-wolf/">You’re Still Crying Wolf</a>.<br />
Let alone, if people are condemned regardless of what they do, there’s nothing to stop people from doing wrong.<br />
People like this, righteous &amp; not with majority viewpoint, need to see value in “playing politics” (or “being persuasive”) if they hope to make any changes to the problems they see in the world. Signalling what <em>good people</em> they are only feels good.<br />
– To that extent, it’s still valuable to rebut “casual racism is racism”. (Albeit, with the tradeoffs/risks noted at the start of this post).<br />
One dumb, preaching-to-the-choir internet blogpost to another.</p>
]]></summary>
</entry>
<entry>
    <title>Internet Myopia</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2016-12-26-internet-myopia.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2016-12-26-internet-myopia.html</id>
    <published>2016-12-26T00:00:00Z</published>
    <updated>2016-12-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 26, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/politics.html">politics</a>
    
</div>

<p>Twitter is a great website for righteous anger. Recently, I’ve observed that people on Twitter tend to be myopic. – You can be fairly sure that the things people tweet about (or retweet) will all have a single focus. It’s more specific than “my tribe is awesome/good”.</p>
<p>I tend to be hesitant about giving object-level opinions.<br />
There’s a well-known fable about four blind folk describing what they sense; four unique/different parts of an elephant. It’s often recounted in a kumbaya, “people may each see a different part of truth” kindof way. (Similarly, there’s the cartoon about the cylinder projected as a circle and a rectangle, and two folk arguing..; I think that’s pretty dumb/bullshit, because it does a poor job of modelling how people disagree over things).<br />
– What I’d emphasise here is the <em>limited</em> nature the opinions (rather than the “everyone sees some truth”). – The blind folk still only know the parts of the elephant they encounter. – You can kinda-sorta dismiss <em>any</em> opinion off-hand as limited and probably-wrong. (This is why ‘qualifying’ the opinion is useful). But it’s still probably useful to have some marketplace of ideas where different opinions get thrown about.</p>
<p>Something which is pretty fascinating is, in their myopic anger.. it’s interesting to see the way one group describes their out-group. – People remain pettily angry about some incident/issue for a long time.<br />
I guess fear is a better motivator than hope; and each side of some conflict will see their side as losing. e.g.:</p>
<ul>
<li><p>in the culture-wars of the tech industry, the progressives see the industry as full of white dudebros even as every major tech company does their best to make efforts toward diverse ethnic/gender identities. Whether the public efforts are lightweight lip-service (without impact) or wasteful tithing to ideology depends on your tribe. (Or: Is <em>saying</em> you’re going to make things better sufficient to show things will get better?).</p></li>
<li><p>Many are exclaiming that 2016 has been a bad year for liberal politics in Western Democracies; those who dissent claim the extreme difficulty with which the non-elite masses have to get their voice heard in democracy.</p>
<ul>
<li>Nutcases will use the phrase “Age of Trump” to describe an epidemic of sexism and racism (this dramatic interpretation all because Trump won by ~1% of the vote!), whereas the other side points to those who are fired (or harassed) for not toeing the progressive politics.</li>
</ul></li>
</ul>
<p>On Facebook, my friends share posts with phrases like “..your Facebook feed full of Trump supporters..”, and such an experience is completely alien to me.</p>
<p>– Of course, none of that is much of a <em>surprise</em>: people don’t question claims which support their beliefs; and will be doubtful about claims which go against their beliefs.<br />
“<em>Can</em> I believe it?” (for things you want to believe),<br />
“<em>Must</em> I believe it?” (for things you don’t want to believe).<br />
– And in a sense all the above is just an example of “talking past each other”. But it’s fascinating to see.</p>
]]></summary>
</entry>
<entry>
    <title>What even is the point of politics</title>
    <link href="http://www.rgoulter.com/blog//posts/argument/2016-12-18-what-even-is-the-point-of-politics.html" />
    <id>http://www.rgoulter.com/blog//posts/argument/2016-12-18-what-even-is-the-point-of-politics.html</id>
    <published>2016-12-18T00:00:00Z</published>
    <updated>2016-12-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 18, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/politics.html">politics</a>
    
</div>

<p>What even is the point of politics?<br />
The arguing-with-acquaintances-about-the-news kind of politics.</p>
<p>It seems to be just for expressing anger.. – but moreover, to express tribal affiliation. (Meaningness’s <a href="https://meaningness.wordpress.com/2015/10/05/buddhist-ethics-is-advertising/">“Ethics is Advertising”</a> post does a good job of arguing this point: that so much of what we do is to signal that <em>we</em> are <em>good</em> people).</p>
<p>But it seems to me all the kinds of articles which get shared about say the same thing: “Here’s something which happened; here’s why it shows my political viewpoint is correct”.<br />
– I’m trying <em>really</em> hard to internalize that people don’t discuss politics in search of truth; that “reason is slave to the passions”. – Surely it’s at least a little pathetic that all the anger expressed has no more purpose, no more impact than a disguised way of saying “hey I’m correct?”.</p>
<p>Perhaps it’s the INTJ in me, but I guess there’s more hope in trying to understand politics in terms of ‘incentives’, then it’s easier to find a model to describe the world; easier to discuss policies in terms of which better suits whatever set of ideals/priorities.<br />
– That, if politics is about satisfying incentives, then we can discuss the politics of history. (“in this case, this happened; in that case, that happened, so what does that mean this time”).</p>
<p>– That righteous-expression-of-anger has dominated the political discussion I see … I guess in order to think that this is a <em>bad</em> thing (compared to, say, a fantastic disinterested discussion of policies), you’d still be clinging to the idea that people intend to seek truth.<br />
– Seeking out the drama of all the hypocrisies inherent in arguing over moral values, &amp; shitposting about this; that’s fun.<br />
– But in terms of modelling &amp; making sense of politics, “righteousness” is a way better model.</p>
]]></summary>
</entry>
<entry>
    <title>Best Programming Style Always Depends</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-12-17-best-programming-style-always-depends.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-12-17-best-programming-style-always-depends.html</id>
    <published>2016-12-17T00:00:00Z</published>
    <updated>2016-12-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 17, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.html">programming</a>
    
</div>

<p>In Steve Yegge’s hauntingly interesting <a href="http://steve-yegge.blogspot.sg/2008/02/portrait-of-n00b.html">“Portrait of a n00b”</a> article, he argues that:</p>
<ol type="1">
<li>all meta-data is unnecessary for programs to run.</li>
<li>n00b programmers can’t handle the complexity of code, and so prefer as much whitespacing as possible (so that there’s less code on the screen). – Expert programmers on the other hand prefer as much code on the screen as possible.</li>
<li>So it’s unsurprising that n00b programmers will write bad code which is over-commented, with a strong preference for meta-data. (While Expert programmers will write bad code which is uncommented, and will avoid use of meta-data).</li>
</ol>
<p>– The article also portrays the kind of person who loves modelling how situations; who just loves meta-data. Either programmers who pickup Database Administration, or who come across an ML-language like OCaml or Haskell. – Yegge points out “you can’t force people to provide meta-data for everything, they’ll hate you”.</p>
<hr />
<p>The generally-accepted rule-of-thumb for function length is “fits on a screen” or “less than 50/30/20 lines”, etc. (I’ve heard the “Pragmatic Object-Oriented Design in Ruby” argues for even stricter guidelines).</p>
<hr />
<p>Not long ago, a post about <a href="http://number-none.com/blow/john_carmack_on_inlined_code.html">an email from John Carmack about inlining code</a> got quite popular.<br />
Briefly: while small functions are fine for ‘pure’ functions, it’s impractical to have all functions be ‘pure’. For impure functions, there are often implicit assumptions made about state: e.g. it’s expected certain methods are called in a particular order. It’s more straightforward to ‘inline’ the ‘methods’ all in one larger method. This guarantees these ‘methods’ can’t be called elsewhere.</p>
<hr />
<p>I also recently came across this interesting post from <a href="http://martinfowler.com/bliki/FunctionLength.html">Martin Fowler, about ‘function length’</a>.<br />
The first observation he makes is that “how long should a function be” is asked in lieu of “what should be contained in its own function?”.<br />
The second observation is the astute distinction between a program’s intention and it’s implementation. – He gives the example from an old system where ‘highlighting’ text was the same as ‘reverse-image of display’; but because the intention (‘highlight’) was significantly different from the implementation (‘reverse’), there was value in a method which just deferred the work to another method.</p>
<hr />
<p><a href="http://degoes.net/articles/insufficiently-polymorphic">“Descriptive Names are a Code Smell”</a> is an interesting post in this regard.<br />
To paraphrase, “long/descriptive names violate the notion of ‘keep your type-declarations as vague as they need to be’”.<br />
– I think this only applies to ‘implementation’ of a computation. (“I want to get a result in this form, from an input in this form”). Because “descriptive names are bad” flies in the face of “keep intention clear”. – I don’t see this advice as contradictory to e.g. Fowler’s. (Implementation code occurs at a lower level of abstraction than the intention’s code).</p>
<p>But. On the other hand.<br />
“Keep things generic”, ‘polymorphic’ rather than ‘monomorphic’.. it’s easier to see how to do this with generic data structures like lists/arrays/dictionaries. For, say, Java, I suppose you get this polymorphims by Interfaces. (Though I guess with e.g. Python/Ruby, you could be ‘generic’ without needing to provide the meta-data).<br />
– But I imagine this is where (mainstream) languages aren’t so expressive. It’s not so easy to provide abstractions over functions, classes, or at least modules/packages. – It’s not so hard to write a common-enough computation for any array; but not so easy to supply functionality over a module. – Though I can’t think of an example off the top of my head why that’d be necessary.</p>
<hr />
<p>There’s something else to be cautious of with “be as generic as possible”.<br />
People love to over-engineer; to solve problems they used to have (or think they’ll have) rather than problems they currently have.<br />
There may be different ways to make a program ‘more generic’.</p>
]]></summary>
</entry>
<entry>
    <title>Catching up on Action Games</title>
    <link href="http://www.rgoulter.com/blog//posts/games/2016-11-26-catching-up-on-action-games.html" />
    <id>http://www.rgoulter.com/blog//posts/games/2016-11-26-catching-up-on-action-games.html</id>
    <published>2016-11-26T00:00:00Z</published>
    <updated>2016-11-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 26, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/game.just%20cause.html">game.just cause</a>, <a href="/tags/game.call%20of%20duty.html">game.call of duty</a>
    
</div>

<p>So I recently got a new gaming PC. It’s good to not have to say “can’t play that game, my computer is so old”.</p>
<p>I was able to re-play through Just Cause 3. – I’d played through on a friend’s PS4; but since then the DLC for the game has been released.<br />
JC3 was already very much an action-playground. The DLC added to this: a jetpack (where you get to shoot machine-guns / missiles while flying around), mechs, and a super-action-jetboat (with machine-guns and missiles).<br />
– My thoughs on JC3 remain more/less the same as at the start of the year; I still wish you could customise things (like in Saints Row), etc. – But in terms of “crazy action-man gameplay”, I can’t imagine how Just Cause 4 could possible top Just Cause 3.</p>
<p>I’ve also spent some time catching up on the Call of Duty games. (I was able to get away with playing CoD:Black Ops 2 on my laptop, barely).<br />
– I almost feel the need for a disavowal: CoD is barely more of a game than The Sims is. No serious, enthusiastic gamer would be proud to say they enjoyed playing CoD. (As opposed to, say, The Witcher 3 or Dark Souls or etc.). – That’s fine, but also for the most part refers to CoD <em>multiplayer</em>. Which I don’t touch. (Nor the zombies, for that matter).<br />
– I just play the dumb action campaign, influences of which has somehow come to dominate the FPS genre. – Which is kindof weird; ’cause the CoD games tend to throw in ACTION like the player will get bored if they go for 3 seconds without seeing an explosion or something cool happen. – And games like Homefront which follow the formula pretty closely (albeit with a more budget feel) cop a lot of shit.</p>
<p><em>That</em> stuff I don’t mind so much.<br />
With CoD you pretty much know what you’re getting.</p>
<p>CoD Ghosts, I recall, caught many bad reviews.<br />
It’s “the one with the dog”.</p>
<p>– I think Zero Punctuation’s review remarked that so much of CoD gameplay involved “hey, here’s a new toy, which you get to use once, and never again”. – I think that’s accurate, and it really limits how good a ‘game’ CoD could be.<br />
Rather than incrementally expanding a player’s tools (&amp; the enemies they face).. fancy gimmicks which get used once leads to the game feeling like Dora-the-Explorer: receiving instructions for when to push which button at which time.</p>
<p>So, yeah, CoD Ghosts does that.<br />
And continues the CoD tradition of having a super-bad-guy who wants-to-get-caught. And who you fight at the end only through a series of quick-time-events.<br />
– So, yeah. You know what you’re getting.</p>
<p>CoD: Advanced Warfare. “the one with Kevin Spacey”.<br />
– Holy shit, I found it hard to tell whether the (pre-rendered) cutscenes were computer-rendered or live-action. I’m fairly sure the scenes must be computer-generated.</p>
<p>CoD:AW at least adds a game-mechanic you get to keep using throughout: you have a new exo-suit. (Kindof like a lamer version of Crysis’ exo-suit, although it’ll be different in different levels).<br />
– There was also one interesting level: your left-arm gets injured, so you’re unable to reload and must continuously pick up weapons (with ammo) from fallen enemies. – It’s a nice example of requiring the player to <em>adapt</em> from the game’s typical gameplay.</p>
<p>CoD:AW was less annoying than CoD:Ghosts. But they’re both the same blob-ish cinematic blur of action, which is fun enough.</p>
]]></summary>
</entry>
<entry>
    <title>My Impression of Ruby So Far</title>
    <link href="http://www.rgoulter.com/blog//posts/programming/2016-10-15-my-impression-of-ruby-so-far.html" />
    <id>http://www.rgoulter.com/blog//posts/programming/2016-10-15-my-impression-of-ruby-so-far.html</id>
    <published>2016-10-15T00:00:00Z</published>
    <updated>2016-10-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 15, 2016
    
        by Richard Goulter
    <br/>
    
    Tags: <a href="/tags/programming.ruby.html">programming.ruby</a>, <a href="/tags/programming.scala.html">programming.scala</a>, <a href="/tags/programming.haskell.html">programming.haskell</a>
    
</div>

<h3 id="background">Background</h3>
<p>I’ve recently started programming in Ruby. I’ve inherited a codebase for writing automated-UI tests against a website. The tests make use of Capybara, which provides a high-level “DSL” for interacting with a webpage/browser in the sameway a user would; Capybara itself does this by abstracting over Selenium (or some other driver, like Poltergeist/PhantomJS); Selenium itself allows interaction with different web-browsers, by providing abstractions for different drivers of browsers (e.g. ChromeDriver).</p>
<p>As is also common for tests like these (called “UI tests”, “acceptance tests”, “functional tests”, “specifications”, “end to end tests” depending on who you ask) is use of Cucumber. – But that’s not too important for this post.</p>
<h3 id="very-first-impression">Very First Impression</h3>
<p>Anyway,<br />
I’d first read a few books before getting my hands dirty. (“Ruby Best Practices” and some of “The Ruby Way”). What I read was exciting enough: Ruby seems to be a language with decent pedigree, inheriting aspects from Lisp and the emphasis on message-passing from SmallTalk (as well as e.g. the power of Regular Expressions from Perl).<br />
Also cool was e.g. Ruby’s dynamic features. Everything is an object, objects pass messages between each other. And so by overriding a few magic methods, some pretty cool things can be done. – e.g. the <code>method_missing</code> method is called if the object was called with a method that wasn’t defined on that object; so an object overriding this can have different behaviour.</p>
<p>That Ruby isn’t a low-pedigree language surprised me. ‘cause I kindof thought of Ruby as a “slightly prettier Python”. (It really isn’t, the philosophies of the two languages are quite different).<br />
And while I’d heard Ruby documentation was ’good’, it was ‘good’ by-way-of “here’s an example of probably what you’ll want to do”.<br />
And, well, if all someone knew was “Ruby on Rails”, then it’s kindof a good indicator that that person (prob’ly) doesn’t know how to program.</p>
<p>Steve Yegge also gave the language well-nuanced praise: that he didn’t <em>like</em> the language, but he found himself using it for everything when he had the choice; that he didn’t <em>know</em> the language, but he found he didn’t need to read the documentation while writing it (unlike other languages he was more familiar with).</p>
<h3 id="actually-using-it">Actually Using It</h3>
<p>I’d say, Ruby isn’t as nice a blub language as Python is. To me it feels like a blub language, but with a message-passing system.</p>
<p>I guess I don’t like it as much coming from a Scala background:<br />
“Ruby’s nice ’cause you can map/reduce over lists” … just like Scala. But without pattern matching.<br />
And Ruby has nice “no brackets” syntax … like Scala. (Except in Ruby, it’s like <code>o.m(x,y,z)</code> can be <code>o.m x, y, z</code>; in Scala it’s more like <code>x.op(y)</code> can be written as <code>x op y</code>; in Haskell it’s <code>f(x,y,z)</code> must be written as <code>f x y z</code>). – Also, in Scala, operator overloading works for any symbol which is a valid method name, whereas Ruby takes C++’s approach.</p>
<p>That Ruby has symbols (like Lisp) is one thing I certainly do like about it, though.</p>
<p>And I guess I don’t like it as much coming from a Haskell background:<br />
Say what you like about how shit Haskell documentation can be; (and I suppose outside “being too academic”, large-scale shit like Lenses can be god-damn atrocious to read). But at least it’s clear what <em>types</em> things have.<br />
Ruby documentation makes clear what <em>messages</em> the objects receive. – The expectation is that the documentation give examples of different ways to use the method. Fucking good luck to you if the documentation lacks that. – This is slightly exasperated by Ruby’s “there’s more than one way to skin a monkey” philosophy, wherein a call to the same method-definition with different kinds of arguments ought to do the-right-thing.</p>
<p>And I guess it kind-of, sort-of makes sense for those familiar with Ruby, but I was surprised to learn that methods like <code>map</code>, etc. accept <em>only</em> procs; even if an objects method receives the same type of argument as an equivalent proc, the higher-order methods only take procs.<br />
– The lack of tuples (in the same sense as Haskell or Scala or Python) also seems strange to me.</p>
<p>But the biggest woe I have with Ruby at the moment is “wtf errors”, presumably from the magic. – It’s not completely uncommon in statements calling Capybara (and therefore, Selenium, and ChromeDriver) to throw an <code>&quot;undefined method 'map' for 0:Fixnum</code> (or <code>nil:NilClass</code>), when the statement contains no calls to map, nor any numbers/nil values. (I guess as a hint, the same statement may sometimes throw other errors about connection problems for some pipe).<br />
– i.e. the call-stack from the exception doesn’t show the actual call-stack.<br />
It’s possible, but very difficult, to debug this sort of thing. I still haven’t figured it out.</p>
<p>– All that said; this was on an non-idiomatic codebase I’d inherited. And I’m by no means yet comfortable with writing Ruby.</p>
<h3 id="conclusion-hopes">Conclusion / Hopes</h3>
<p>So I find the syntax and semantics of Ruby conflict with what I’d expect, coming from a Scala/Haskell/Python background.<br />
I’m not saying Ruby is a <em>bad</em> language. It looks like it’s pretty nice at writing message-passing paradigm programs. – But I don’t yet have love for the Ruby environment.</p>
<hr />
<h4 id="btw-about-cucumber">Btw, About Cucumber</h4>
<p>Cucumber is a tool to help write “executable specifications”. The specification is written in e.g. Gherkin; the main aspect of a Gherkin specification is its sequence of Given/When/Then steps, written in a natural-language like English. – Cucumber tests will then bind these steps to code by matching the steps against a regex, and executing some code for that.<br />
(In terms of “does the program pass tests”, this is kindof a costly abstraction to make, and for programmers-only, it’s easier to just write the executed code directly. – The purported benefit of writing executable specifications is more about communication: first that those involved in writing/reviewing the specification come up with an agreement of what the program ‘is’, &amp; what terminology/phrases to use when discussing it; second that you get a (readable!) “living document” which describes what features the program has).</p>
<p>The automated testing suite is still quite young (currently working on getting it stable). I’m interested in seeing what difficulties come up in maintaining it (both from a technical and ‘social’ standpoint).</p>
]]></summary>
</entry>

</feed>
